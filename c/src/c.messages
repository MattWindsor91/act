translation_unit: ENUM LBRACE LIT_EXISTS COMMA XOR_EQ
##
## Ends in an error in state: 232.
##
## separated_nonempty_list(COMMA,enumerator) -> enumerator COMMA . separated_nonempty_list(COMMA,enumerator) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## enumerator COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE 233>

translation_unit: ENUM LBRACE LIT_EXISTS EQ STRING XOR_EQ
##
## Ends in an error in state: 231.
##
## separated_nonempty_list(COMMA,enumerator) -> enumerator . [ RBRACE ]
## separated_nonempty_list(COMMA,enumerator) -> enumerator . COMMA separated_nonempty_list(COMMA,enumerator) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## enumerator
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 52, spurious reduction of production unary_expression -> postfix_expression 
## In state 50, spurious reduction of production cast_expression -> unary_expression 
## In state 129, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 123, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 142, spurious reduction of production shift_expression -> additive_expression 
## In state 119, spurious reduction of production relational_expression -> shift_expression 
## In state 135, spurious reduction of production equality_expression -> relational_expression 
## In state 153, spurious reduction of production and_expression -> equality_expression 
## In state 161, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 162, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 163, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 147, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 145, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 187, spurious reduction of production constant_expression -> conditional_expression 
## In state 229, spurious reduction of production option(preceded(EQ,constant_expression)) -> EQ constant_expression 
## In state 230, spurious reduction of production enumerator -> identifier option(preceded(EQ,constant_expression)) 
##

<YOUR SYNTAX ERROR MESSAGE HERE 232>

translation_unit: ENUM LBRACE LIT_EXISTS EQ XOR_EQ
##
## Ends in an error in state: 34.
##
## option(preceded(EQ,constant_expression)) -> EQ . constant_expression [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE 34>

translation_unit: ENUM LBRACE LIT_EXISTS XOR_EQ
##
## Ends in an error in state: 33.
##
## enumerator -> identifier . option(preceded(EQ,constant_expression)) [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## identifier
##

<YOUR SYNTAX ERROR MESSAGE HERE 33>

translation_unit: ENUM LBRACE XOR_EQ
##
## Ends in an error in state: 29.
##
## enum_specifier -> ENUM option(identifier) LBRACE . loption(separated_nonempty_list(COMMA,enumerator)) RBRACE [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LIT_EXISTS LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## ENUM option(identifier) LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE 29>

translation_unit: ENUM LIT_EXISTS XOR_EQ
##
## Ends in an error in state: 234.
##
## enum_specifier -> ENUM identifier . [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LIT_EXISTS LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## option(identifier) -> identifier . [ LBRACE ]
##
## The known suffix of the stack is as follows:
## ENUM identifier
##

<YOUR SYNTAX ERROR MESSAGE HERE 235>

translation_unit: ENUM XOR_EQ
##
## Ends in an error in state: 25.
##
## enum_specifier -> ENUM . option(identifier) LBRACE loption(separated_nonempty_list(COMMA,enumerator)) RBRACE [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LIT_EXISTS LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## enum_specifier -> ENUM . identifier [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LIT_EXISTS LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## ENUM
##

<YOUR SYNTAX ERROR MESSAGE HERE 25>

translation_unit: LIT_EXISTS LBRACE CASE STRING XOR_EQ
##
## Ends in an error in state: 323.
##
## labelled_statement -> CASE constant_expression . statement [ WHILE SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RETURN RBRACE NOT LPAR LNOT LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT ELSE DO DEFAULT CONTINUE CHAR_LIT CASE BREAK AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## CASE constant_expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 52, spurious reduction of production unary_expression -> postfix_expression 
## In state 50, spurious reduction of production cast_expression -> unary_expression 
## In state 129, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 123, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 142, spurious reduction of production shift_expression -> additive_expression 
## In state 119, spurious reduction of production relational_expression -> shift_expression 
## In state 135, spurious reduction of production equality_expression -> relational_expression 
## In state 153, spurious reduction of production and_expression -> equality_expression 
## In state 161, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 162, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 163, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 147, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 145, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 187, spurious reduction of production constant_expression -> conditional_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE 320>

translation_unit: LIT_EXISTS LBRACE CASE XOR_EQ
##
## Ends in an error in state: 322.
##
## labelled_statement -> CASE . constant_expression statement [ WHILE SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RETURN RBRACE NOT LPAR LNOT LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT ELSE DO DEFAULT CONTINUE CHAR_LIT CASE BREAK AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## CASE
##

<YOUR SYNTAX ERROR MESSAGE HERE 319>

translation_unit: LIT_EXISTS LBRACE DEFAULT COLON XOR_EQ
##
## Ends in an error in state: 320.
##
## labelled_statement -> DEFAULT COLON . statement [ WHILE SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RETURN RBRACE NOT LPAR LNOT LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT ELSE DO DEFAULT CONTINUE CHAR_LIT CASE BREAK AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## DEFAULT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE 317>

translation_unit: LIT_EXISTS LBRACE DEFAULT XOR_EQ
##
## Ends in an error in state: 319.
##
## labelled_statement -> DEFAULT . COLON statement [ WHILE SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RETURN RBRACE NOT LPAR LNOT LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT ELSE DO DEFAULT CONTINUE CHAR_LIT CASE BREAK AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## DEFAULT
##

<YOUR SYNTAX ERROR MESSAGE HERE 316>

translation_unit: LIT_EXISTS LBRACE DO SEMI WHILE LPAR STRING WHILE
##
## Ends in an error in state: 341.
##
## expression -> expression . COMMA assignment_expression [ RPAR COMMA ]
## iteration_statement -> DO statement WHILE LPAR expression . RPAR [ WHILE SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RETURN RBRACE NOT LPAR LNOT LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT ELSE DO DEFAULT CONTINUE CHAR_LIT CASE BREAK AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## DO statement WHILE LPAR expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 52, spurious reduction of production unary_expression -> postfix_expression 
## In state 50, spurious reduction of production cast_expression -> unary_expression 
## In state 129, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 123, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 142, spurious reduction of production shift_expression -> additive_expression 
## In state 119, spurious reduction of production relational_expression -> shift_expression 
## In state 135, spurious reduction of production equality_expression -> relational_expression 
## In state 153, spurious reduction of production and_expression -> equality_expression 
## In state 161, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 162, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 163, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 147, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 145, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 166, spurious reduction of production assignment_expression -> conditional_expression 
## In state 183, spurious reduction of production expression -> assignment_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE 338>

translation_unit: LIT_EXISTS LBRACE DO SEMI WHILE LPAR XOR_EQ
##
## Ends in an error in state: 340.
##
## iteration_statement -> DO statement WHILE LPAR . expression RPAR [ WHILE SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RETURN RBRACE NOT LPAR LNOT LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT ELSE DO DEFAULT CONTINUE CHAR_LIT CASE BREAK AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## DO statement WHILE LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE 337>

translation_unit: LIT_EXISTS LBRACE DO SEMI WHILE XOR_EQ
##
## Ends in an error in state: 339.
##
## iteration_statement -> DO statement WHILE . LPAR expression RPAR [ WHILE SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RETURN RBRACE NOT LPAR LNOT LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT ELSE DO DEFAULT CONTINUE CHAR_LIT CASE BREAK AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## DO statement WHILE
##

<YOUR SYNTAX ERROR MESSAGE HERE 336>

translation_unit: LIT_EXISTS LBRACE DO SEMI XOR_EQ
##
## Ends in an error in state: 338.
##
## iteration_statement -> DO statement . WHILE LPAR expression RPAR [ WHILE SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RETURN RBRACE NOT LPAR LNOT LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT ELSE DO DEFAULT CONTINUE CHAR_LIT CASE BREAK AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## DO statement
##

<YOUR SYNTAX ERROR MESSAGE HERE 335>

translation_unit: LIT_EXISTS LBRACE DO XOR_EQ
##
## Ends in an error in state: 318.
##
## iteration_statement -> DO . statement WHILE LPAR expression RPAR [ WHILE SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RETURN RBRACE NOT LPAR LNOT LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT ELSE DO DEFAULT CONTINUE CHAR_LIT CASE BREAK AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## DO
##

<YOUR SYNTAX ERROR MESSAGE HERE 315>

translation_unit: LIT_EXISTS LBRACE FOR LPAR SEMI SEMI RPAR XOR_EQ
##
## Ends in an error in state: 317.
##
## iteration_statement -> FOR LPAR option(expression) SEMI option(expression) SEMI option(expression) RPAR . statement [ WHILE SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RETURN RBRACE NOT LPAR LNOT LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT ELSE DO DEFAULT CONTINUE CHAR_LIT CASE BREAK AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## FOR LPAR option(expression) SEMI option(expression) SEMI option(expression) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE 314>

translation_unit: LIT_EXISTS LBRACE FOR LPAR SEMI SEMI STRING RETURN
##
## Ends in an error in state: 316.
##
## iteration_statement -> FOR LPAR option(expression) SEMI option(expression) SEMI option(expression) . RPAR statement [ WHILE SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RETURN RBRACE NOT LPAR LNOT LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT ELSE DO DEFAULT CONTINUE CHAR_LIT CASE BREAK AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## FOR LPAR option(expression) SEMI option(expression) SEMI option(expression)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 52, spurious reduction of production unary_expression -> postfix_expression 
## In state 50, spurious reduction of production cast_expression -> unary_expression 
## In state 129, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 123, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 142, spurious reduction of production shift_expression -> additive_expression 
## In state 119, spurious reduction of production relational_expression -> shift_expression 
## In state 135, spurious reduction of production equality_expression -> relational_expression 
## In state 153, spurious reduction of production and_expression -> equality_expression 
## In state 161, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 162, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 163, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 147, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 145, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 166, spurious reduction of production assignment_expression -> conditional_expression 
## In state 183, spurious reduction of production expression -> assignment_expression 
## In state 303, spurious reduction of production option(expression) -> expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE 313>

translation_unit: LIT_EXISTS LBRACE FOR LPAR SEMI SEMI XOR_EQ
##
## Ends in an error in state: 315.
##
## iteration_statement -> FOR LPAR option(expression) SEMI option(expression) SEMI . option(expression) RPAR statement [ WHILE SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RETURN RBRACE NOT LPAR LNOT LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT ELSE DO DEFAULT CONTINUE CHAR_LIT CASE BREAK AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## FOR LPAR option(expression) SEMI option(expression) SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE 312>

translation_unit: LIT_EXISTS LBRACE FOR LPAR SEMI STRING RPAR
##
## Ends in an error in state: 314.
##
## iteration_statement -> FOR LPAR option(expression) SEMI option(expression) . SEMI option(expression) RPAR statement [ WHILE SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RETURN RBRACE NOT LPAR LNOT LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT ELSE DO DEFAULT CONTINUE CHAR_LIT CASE BREAK AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## FOR LPAR option(expression) SEMI option(expression)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 52, spurious reduction of production unary_expression -> postfix_expression 
## In state 50, spurious reduction of production cast_expression -> unary_expression 
## In state 129, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 123, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 142, spurious reduction of production shift_expression -> additive_expression 
## In state 119, spurious reduction of production relational_expression -> shift_expression 
## In state 135, spurious reduction of production equality_expression -> relational_expression 
## In state 153, spurious reduction of production and_expression -> equality_expression 
## In state 161, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 162, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 163, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 147, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 145, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 166, spurious reduction of production assignment_expression -> conditional_expression 
## In state 183, spurious reduction of production expression -> assignment_expression 
## In state 303, spurious reduction of production option(expression) -> expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE 311>

translation_unit: LIT_EXISTS LBRACE FOR LPAR SEMI XOR_EQ
##
## Ends in an error in state: 313.
##
## iteration_statement -> FOR LPAR option(expression) SEMI . option(expression) SEMI option(expression) RPAR statement [ WHILE SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RETURN RBRACE NOT LPAR LNOT LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT ELSE DO DEFAULT CONTINUE CHAR_LIT CASE BREAK AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## FOR LPAR option(expression) SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE 310>

translation_unit: LIT_EXISTS LBRACE FOR LPAR STRING RPAR
##
## Ends in an error in state: 312.
##
## iteration_statement -> FOR LPAR option(expression) . SEMI option(expression) SEMI option(expression) RPAR statement [ WHILE SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RETURN RBRACE NOT LPAR LNOT LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT ELSE DO DEFAULT CONTINUE CHAR_LIT CASE BREAK AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## FOR LPAR option(expression)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 52, spurious reduction of production unary_expression -> postfix_expression 
## In state 50, spurious reduction of production cast_expression -> unary_expression 
## In state 129, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 123, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 142, spurious reduction of production shift_expression -> additive_expression 
## In state 119, spurious reduction of production relational_expression -> shift_expression 
## In state 135, spurious reduction of production equality_expression -> relational_expression 
## In state 153, spurious reduction of production and_expression -> equality_expression 
## In state 161, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 162, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 163, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 147, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 145, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 166, spurious reduction of production assignment_expression -> conditional_expression 
## In state 183, spurious reduction of production expression -> assignment_expression 
## In state 303, spurious reduction of production option(expression) -> expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE 309>

translation_unit: LIT_EXISTS LBRACE FOR LPAR XOR_EQ
##
## Ends in an error in state: 311.
##
## iteration_statement -> FOR LPAR . option(expression) SEMI option(expression) SEMI option(expression) RPAR statement [ WHILE SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RETURN RBRACE NOT LPAR LNOT LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT ELSE DO DEFAULT CONTINUE CHAR_LIT CASE BREAK AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## FOR LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE 308>

translation_unit: LIT_EXISTS LBRACE FOR XOR_EQ
##
## Ends in an error in state: 310.
##
## iteration_statement -> FOR . LPAR option(expression) SEMI option(expression) SEMI option(expression) RPAR statement [ WHILE SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RETURN RBRACE NOT LPAR LNOT LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT ELSE DO DEFAULT CONTINUE CHAR_LIT CASE BREAK AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## FOR
##

<YOUR SYNTAX ERROR MESSAGE HERE 307>

translation_unit: LIT_EXISTS LBRACE GOTO XOR_EQ
##
## Ends in an error in state: 308.
##
## jump_statement -> GOTO . identifier [ WHILE SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RETURN RBRACE NOT LPAR LNOT LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT ELSE DO DEFAULT CONTINUE CHAR_LIT CASE BREAK AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## GOTO
##

<YOUR SYNTAX ERROR MESSAGE HERE 305>

translation_unit: LIT_EXISTS LBRACE IF LPAR STRING RPAR SEMI ELSE XOR_EQ
##
## Ends in an error in state: 345.
##
## option(preceded(ELSE,statement)) -> ELSE . statement [ WHILE SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RETURN RBRACE NOT LPAR LNOT LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT ELSE DO DEFAULT CONTINUE CHAR_LIT CASE BREAK AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE 342>

translation_unit: LIT_EXISTS LBRACE IF LPAR STRING RPAR SEMI XOR_EQ
##
## Ends in an error in state: 344.
##
## selection_statement -> IF LPAR expression RPAR statement . option(preceded(ELSE,statement)) [ WHILE SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RETURN RBRACE NOT LPAR LNOT LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT ELSE DO DEFAULT CONTINUE CHAR_LIT CASE BREAK AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## IF LPAR expression RPAR statement
##

<YOUR SYNTAX ERROR MESSAGE HERE 341>

translation_unit: LIT_EXISTS LBRACE IF LPAR STRING RPAR XOR_EQ
##
## Ends in an error in state: 307.
##
## selection_statement -> IF LPAR expression RPAR . statement option(preceded(ELSE,statement)) [ WHILE SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RETURN RBRACE NOT LPAR LNOT LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT ELSE DO DEFAULT CONTINUE CHAR_LIT CASE BREAK AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## IF LPAR expression RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE 304>

translation_unit: LIT_EXISTS LBRACE IF LPAR STRING WHILE
##
## Ends in an error in state: 306.
##
## expression -> expression . COMMA assignment_expression [ RPAR COMMA ]
## selection_statement -> IF LPAR expression . RPAR statement option(preceded(ELSE,statement)) [ WHILE SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RETURN RBRACE NOT LPAR LNOT LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT ELSE DO DEFAULT CONTINUE CHAR_LIT CASE BREAK AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## IF LPAR expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 52, spurious reduction of production unary_expression -> postfix_expression 
## In state 50, spurious reduction of production cast_expression -> unary_expression 
## In state 129, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 123, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 142, spurious reduction of production shift_expression -> additive_expression 
## In state 119, spurious reduction of production relational_expression -> shift_expression 
## In state 135, spurious reduction of production equality_expression -> relational_expression 
## In state 153, spurious reduction of production and_expression -> equality_expression 
## In state 161, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 162, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 163, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 147, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 145, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 166, spurious reduction of production assignment_expression -> conditional_expression 
## In state 183, spurious reduction of production expression -> assignment_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE 305>

translation_unit: LIT_EXISTS LBRACE IF LPAR XOR_EQ
##
## Ends in an error in state: 305.
##
## selection_statement -> IF LPAR . expression RPAR statement option(preceded(ELSE,statement)) [ WHILE SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RETURN RBRACE NOT LPAR LNOT LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT ELSE DO DEFAULT CONTINUE CHAR_LIT CASE BREAK AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## IF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE 302>

translation_unit: LIT_EXISTS LBRACE IF XOR_EQ
##
## Ends in an error in state: 304.
##
## selection_statement -> IF . LPAR expression RPAR statement option(preceded(ELSE,statement)) [ WHILE SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RETURN RBRACE NOT LPAR LNOT LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT ELSE DO DEFAULT CONTINUE CHAR_LIT CASE BREAK AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE 301>

translation_unit: LIT_EXISTS LBRACE LIT_EXISTS COLON XOR_EQ
##
## Ends in an error in state: 333.
##
## labelled_statement -> identifier COLON . statement [ WHILE SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RETURN RBRACE NOT LPAR LNOT LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT ELSE DO DEFAULT CONTINUE CHAR_LIT CASE BREAK AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## identifier COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE 301>

translation_unit: LIT_EXISTS LBRACE LIT_EXISTS WHILE
##
## Ends in an error in state: 332.
##
## labelled_statement -> identifier . COLON statement [ WHILE SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RETURN RBRACE NOT LPAR LNOT LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT ELSE DO DEFAULT CONTINUE CHAR_LIT CASE BREAK AND ADDADD ADD ]
## primary_expression -> identifier . [ XOR_EQ XOR SUB_EQ SUBSUB SUB STRING STAR_EQ STAR SIZEOF SHR_EQ SHR SHL_EQ SHL SEMI QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LNOT LIT_EXISTS LE LAND INT_LIT IDENTIFIER GT GE FLOAT_LIT EQ_OP EQ DOT DIV_EQ DIV COMMA CHAR_LIT ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## identifier
##

<YOUR SYNTAX ERROR MESSAGE HERE 329>

translation_unit: LIT_EXISTS LBRACE RETURN XOR_EQ
##
## Ends in an error in state: 301.
##
## jump_statement -> RETURN . option(expression) [ WHILE SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RETURN RBRACE NOT LPAR LNOT LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT ELSE DO DEFAULT CONTINUE CHAR_LIT CASE BREAK AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## RETURN
##

<YOUR SYNTAX ERROR MESSAGE HERE 298>

translation_unit: LIT_EXISTS LBRACE SEMI XOR_EQ
##
## Ends in an error in state: 350.
##
## list(statement) -> statement . list(statement) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## statement
##

<YOUR SYNTAX ERROR MESSAGE HERE 347>

translation_unit: LIT_EXISTS LBRACE STRING COMMA XOR_EQ
##
## Ends in an error in state: 165.
##
## expression -> expression COMMA . assignment_expression [ XOR_EQ XOR WHILE SWITCH SUB_EQ SUBSUB SUB STRING STAR_EQ STAR SIZEOF SHR_EQ SHR SHL_EQ SHL SEMI RPAR RETURN RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LNOT LIT_EXISTS LE LBRACE LAND INT_LIT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT EQ_OP EQ ELSE DOT DO DIV_EQ DIV DEFAULT CONTINUE COMMA COLON CHAR_LIT CASE BREAK ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## expression COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE 114>

translation_unit: LIT_EXISTS LBRACE STRING RBRACK
##
## Ends in an error in state: 303.
##
## expression -> expression . COMMA assignment_expression [ WHILE SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RPAR RETURN RBRACE NOT LPAR LNOT LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT ELSE DO DEFAULT CONTINUE COMMA CHAR_LIT CASE BREAK AND ADDADD ADD ]
## option(expression) -> expression . [ WHILE SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RPAR RETURN RBRACE NOT LPAR LNOT LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT ELSE DO DEFAULT CONTINUE CHAR_LIT CASE BREAK AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 52, spurious reduction of production unary_expression -> postfix_expression 
## In state 50, spurious reduction of production cast_expression -> unary_expression 
## In state 129, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 123, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 142, spurious reduction of production shift_expression -> additive_expression 
## In state 119, spurious reduction of production relational_expression -> shift_expression 
## In state 135, spurious reduction of production equality_expression -> relational_expression 
## In state 153, spurious reduction of production and_expression -> equality_expression 
## In state 161, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 162, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 163, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 147, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 145, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 166, spurious reduction of production assignment_expression -> conditional_expression 
## In state 183, spurious reduction of production expression -> assignment_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE 300>

translation_unit: LIT_EXISTS LBRACE STRING RPAR
##
## Ends in an error in state: 327.
##
## expression_statement -> option(expression) . SEMI [ WHILE SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RETURN RBRACE NOT LPAR LNOT LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT ELSE DO DEFAULT CONTINUE CHAR_LIT CASE BREAK AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## option(expression)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 52, spurious reduction of production unary_expression -> postfix_expression 
## In state 50, spurious reduction of production cast_expression -> unary_expression 
## In state 129, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 123, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 142, spurious reduction of production shift_expression -> additive_expression 
## In state 119, spurious reduction of production relational_expression -> shift_expression 
## In state 135, spurious reduction of production equality_expression -> relational_expression 
## In state 153, spurious reduction of production and_expression -> equality_expression 
## In state 161, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 162, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 163, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 147, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 145, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 166, spurious reduction of production assignment_expression -> conditional_expression 
## In state 183, spurious reduction of production expression -> assignment_expression 
## In state 303, spurious reduction of production option(expression) -> expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE 324>

translation_unit: LIT_EXISTS LBRACE STRING XOR_EQ XOR_EQ
##
## Ends in an error in state: 178.
##
## assignment_expression -> conditional_expression assignment_operator . assignment_expression [ XOR_EQ XOR WHILE SWITCH SUB_EQ SUBSUB SUB STRING STAR_EQ STAR SIZEOF SHR_EQ SHR SHL_EQ SHL SEMI RPAR RETURN RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LNOT LIT_EXISTS LE LBRACE LAND INT_LIT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT EQ_OP EQ ELSE DOT DO DIV_EQ DIV DEFAULT CONTINUE COMMA COLON CHAR_LIT CASE BREAK ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## conditional_expression assignment_operator
##

<YOUR SYNTAX ERROR MESSAGE HERE 66>

translation_unit: LIT_EXISTS LBRACE SWITCH LPAR STRING RPAR XOR_EQ
##
## Ends in an error in state: 300.
##
## selection_statement -> SWITCH LPAR expression RPAR . statement [ WHILE SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RETURN RBRACE NOT LPAR LNOT LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT ELSE DO DEFAULT CONTINUE CHAR_LIT CASE BREAK AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## SWITCH LPAR expression RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE 297>

translation_unit: LIT_EXISTS LBRACE SWITCH LPAR STRING WHILE
##
## Ends in an error in state: 299.
##
## expression -> expression . COMMA assignment_expression [ RPAR COMMA ]
## selection_statement -> SWITCH LPAR expression . RPAR statement [ WHILE SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RETURN RBRACE NOT LPAR LNOT LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT ELSE DO DEFAULT CONTINUE CHAR_LIT CASE BREAK AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## SWITCH LPAR expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 52, spurious reduction of production unary_expression -> postfix_expression 
## In state 50, spurious reduction of production cast_expression -> unary_expression 
## In state 129, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 123, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 142, spurious reduction of production shift_expression -> additive_expression 
## In state 119, spurious reduction of production relational_expression -> shift_expression 
## In state 135, spurious reduction of production equality_expression -> relational_expression 
## In state 153, spurious reduction of production and_expression -> equality_expression 
## In state 161, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 162, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 163, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 147, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 145, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 166, spurious reduction of production assignment_expression -> conditional_expression 
## In state 183, spurious reduction of production expression -> assignment_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE 296>

translation_unit: LIT_EXISTS LBRACE SWITCH LPAR XOR_EQ
##
## Ends in an error in state: 298.
##
## selection_statement -> SWITCH LPAR . expression RPAR statement [ WHILE SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RETURN RBRACE NOT LPAR LNOT LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT ELSE DO DEFAULT CONTINUE CHAR_LIT CASE BREAK AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## SWITCH LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE 295>

translation_unit: LIT_EXISTS LBRACE SWITCH XOR_EQ
##
## Ends in an error in state: 297.
##
## selection_statement -> SWITCH . LPAR expression RPAR statement [ WHILE SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RETURN RBRACE NOT LPAR LNOT LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT ELSE DO DEFAULT CONTINUE CHAR_LIT CASE BREAK AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## SWITCH
##

<YOUR SYNTAX ERROR MESSAGE HERE 294>

translation_unit: LIT_EXISTS LBRACE WHILE LPAR STRING RPAR XOR_EQ
##
## Ends in an error in state: 296.
##
## iteration_statement -> WHILE LPAR expression RPAR . statement [ WHILE SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RETURN RBRACE NOT LPAR LNOT LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT ELSE DO DEFAULT CONTINUE CHAR_LIT CASE BREAK AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## WHILE LPAR expression RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE 293>

translation_unit: LIT_EXISTS LBRACE WHILE LPAR STRING WHILE
##
## Ends in an error in state: 295.
##
## expression -> expression . COMMA assignment_expression [ RPAR COMMA ]
## iteration_statement -> WHILE LPAR expression . RPAR statement [ WHILE SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RETURN RBRACE NOT LPAR LNOT LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT ELSE DO DEFAULT CONTINUE CHAR_LIT CASE BREAK AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## WHILE LPAR expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 52, spurious reduction of production unary_expression -> postfix_expression 
## In state 50, spurious reduction of production cast_expression -> unary_expression 
## In state 129, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 123, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 142, spurious reduction of production shift_expression -> additive_expression 
## In state 119, spurious reduction of production relational_expression -> shift_expression 
## In state 135, spurious reduction of production equality_expression -> relational_expression 
## In state 153, spurious reduction of production and_expression -> equality_expression 
## In state 161, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 162, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 163, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 147, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 145, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 166, spurious reduction of production assignment_expression -> conditional_expression 
## In state 183, spurious reduction of production expression -> assignment_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE 292>

translation_unit: LIT_EXISTS LBRACE WHILE LPAR XOR_EQ
##
## Ends in an error in state: 294.
##
## iteration_statement -> WHILE LPAR . expression RPAR statement [ WHILE SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RETURN RBRACE NOT LPAR LNOT LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT ELSE DO DEFAULT CONTINUE CHAR_LIT CASE BREAK AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## WHILE LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE 291>

translation_unit: LIT_EXISTS LBRACE WHILE XOR_EQ
##
## Ends in an error in state: 293.
##
## iteration_statement -> WHILE . LPAR expression RPAR statement [ WHILE SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RETURN RBRACE NOT LPAR LNOT LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT ELSE DO DEFAULT CONTINUE CHAR_LIT CASE BREAK AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## WHILE
##

<YOUR SYNTAX ERROR MESSAGE HERE 290>

translation_unit: LIT_EXISTS LBRACE XOR_EQ
##
## Ends in an error in state: 291.
##
## compound_statement -> LBRACE . list(declaration) list(statement) RBRACE [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN EOF ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE 288>

translation_unit: LIT_EXISTS LBRACK LPAR STRING WHILE
##
## Ends in an error in state: 213.
##
## expression -> expression . COMMA assignment_expression [ RPAR COMMA ]
## primary_expression -> LPAR expression . RPAR [ XOR_EQ XOR WHILE SWITCH SUB_EQ SUBSUB SUB STRING STAR_EQ STAR SIZEOF SHR_EQ SHR SHL_EQ SHL SEMI RPAR RETURN RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LNOT LIT_EXISTS LE LBRACE LAND INT_LIT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT EQ_OP EQ ELSE DOT DO DIV_EQ DIV DEFAULT CONTINUE COMMA COLON CHAR_LIT CASE BREAK ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## LPAR expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 52, spurious reduction of production unary_expression -> postfix_expression 
## In state 50, spurious reduction of production cast_expression -> unary_expression 
## In state 129, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 123, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 142, spurious reduction of production shift_expression -> additive_expression 
## In state 119, spurious reduction of production relational_expression -> shift_expression 
## In state 135, spurious reduction of production equality_expression -> relational_expression 
## In state 153, spurious reduction of production and_expression -> equality_expression 
## In state 161, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 162, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 163, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 147, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 145, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 166, spurious reduction of production assignment_expression -> conditional_expression 
## In state 183, spurious reduction of production expression -> assignment_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE 214>

translation_unit: LIT_EXISTS LBRACK LPAR VOLATILE LIT_EXISTS
##
## Ends in an error in state: 209.
##
## type_name -> nonempty_list(specifier_qualifier) . option(abstract_declarator) [ RPAR ]
##
## The known suffix of the stack is as follows:
## nonempty_list(specifier_qualifier)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 67, spurious reduction of production nonempty_list(specifier_qualifier) -> specifier_qualifier 
##

<YOUR SYNTAX ERROR MESSAGE HERE 210>

translation_unit: LIT_EXISTS LBRACK LPAR VOLATILE LPAR XOR_EQ
##
## Ends in an error in state: 211.
##
## direct_abstract_declarator -> LPAR . abstract_declarator RPAR [ RPAR LPAR LBRACK ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE 212>

translation_unit: LIT_EXISTS LBRACK LPAR VOLATILE RPAR XOR_EQ
##
## Ends in an error in state: 57.
##
## cast_expression -> LPAR type_name RPAR . cast_expression [ XOR_EQ XOR WHILE SWITCH SUB_EQ SUBSUB SUB STRING STAR_EQ STAR SIZEOF SHR_EQ SHR SHL_EQ SHL SEMI RPAR RETURN RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LNOT LIT_EXISTS LE LBRACE LAND INT_LIT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT EQ_OP EQ ELSE DOT DO DIV_EQ DIV DEFAULT CONTINUE COMMA COLON CHAR_LIT CASE BREAK ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## LPAR type_name RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE 126>

translation_unit: LIT_EXISTS LBRACK LPAR VOLATILE STAR COMMA
##
## Ends in an error in state: 56.
##
## cast_expression -> LPAR type_name . RPAR cast_expression [ XOR_EQ XOR WHILE SWITCH SUB_EQ SUBSUB SUB STRING STAR_EQ STAR SIZEOF SHR_EQ SHR SHL_EQ SHL SEMI RPAR RETURN RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LNOT LIT_EXISTS LE LBRACE LAND INT_LIT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT EQ_OP EQ ELSE DOT DO DIV_EQ DIV DEFAULT CONTINUE COMMA COLON CHAR_LIT CASE BREAK ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## LPAR type_name
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 72, spurious reduction of production list(type_qualifier) -> 
## In state 75, spurious reduction of production nonempty_list(preceded(STAR,list(type_qualifier))) -> STAR list(type_qualifier) 
## In state 83, spurious reduction of production pointer -> nonempty_list(preceded(STAR,list(type_qualifier))) 
## In state 105, spurious reduction of production abstract_declarator -> pointer 
## In state 191, spurious reduction of production option(abstract_declarator) -> abstract_declarator 
## In state 212, spurious reduction of production type_name -> nonempty_list(specifier_qualifier) option(abstract_declarator) 
##

<YOUR SYNTAX ERROR MESSAGE HERE 125>

translation_unit: LIT_EXISTS LBRACK LPAR VOLATILE STAR IDENTIFIER
##
## Ends in an error in state: 210.
##
## abstract_declarator -> option(pointer) . direct_abstract_declarator [ RPAR ]
##
## The known suffix of the stack is as follows:
## option(pointer)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 72, spurious reduction of production list(type_qualifier) -> 
## In state 75, spurious reduction of production nonempty_list(preceded(STAR,list(type_qualifier))) -> STAR list(type_qualifier) 
## In state 83, spurious reduction of production pointer -> nonempty_list(preceded(STAR,list(type_qualifier))) 
## In state 105, spurious reduction of production option(pointer) -> pointer 
##

<YOUR SYNTAX ERROR MESSAGE HERE 211>

translation_unit: LIT_EXISTS LBRACK LPAR XOR_EQ
##
## Ends in an error in state: 36.
##
## cast_expression -> LPAR . type_name RPAR cast_expression [ XOR_EQ XOR WHILE SWITCH SUB_EQ SUBSUB SUB STRING STAR_EQ STAR SIZEOF SHR_EQ SHR SHL_EQ SHL SEMI RPAR RETURN RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LNOT LIT_EXISTS LE LBRACE LAND INT_LIT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT EQ_OP EQ ELSE DOT DO DIV_EQ DIV DEFAULT CONTINUE COMMA COLON CHAR_LIT CASE BREAK ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
## primary_expression -> LPAR . expression RPAR [ XOR_EQ XOR WHILE SWITCH SUB_EQ SUBSUB SUB STRING STAR_EQ STAR SIZEOF SHR_EQ SHR SHL_EQ SHL SEMI RPAR RETURN RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LNOT LIT_EXISTS LE LBRACE LAND INT_LIT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT EQ_OP EQ ELSE DOT DO DIV_EQ DIV DEFAULT CONTINUE COMMA COLON CHAR_LIT CASE BREAK ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE 36>

translation_unit: LIT_EXISTS LBRACK SIZEOF LPAR CHAR RPAR AND XOR_EQ
##
## Ends in an error in state: 159.
##
## and_expression -> and_expression AND . equality_expression [ XOR_EQ XOR WHILE SWITCH SUB_EQ SUBSUB SUB STRING STAR_EQ STAR SIZEOF SHR_EQ SHR SHL_EQ SHL SEMI RPAR RETURN RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LNOT LIT_EXISTS LE LBRACE LAND INT_LIT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT EQ_OP EQ ELSE DOT DO DIV_EQ DIV DEFAULT CONTINUE COMMA COLON CHAR_LIT CASE BREAK ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## and_expression AND
##

<YOUR SYNTAX ERROR MESSAGE HERE 108>

translation_unit: LIT_EXISTS LBRACK SIZEOF LPAR CHAR RPAR SUB XOR_EQ
##
## Ends in an error in state: 133.
##
## additive_expression -> additive_expression additive_operator . multiplicative_expression [ XOR_EQ XOR WHILE SWITCH SUB_EQ SUBSUB SUB STRING STAR_EQ STAR SIZEOF SHR_EQ SHR SHL_EQ SHL SEMI RPAR RETURN RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LNOT LIT_EXISTS LE LBRACE LAND INT_LIT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT EQ_OP EQ ELSE DOT DO DIV_EQ DIV DEFAULT CONTINUE COMMA COLON CHAR_LIT CASE BREAK ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## additive_expression additive_operator
##

<YOUR SYNTAX ERROR MESSAGE HERE 84>

translation_unit: LIT_EXISTS LBRACK SIZEOF LPAR VOLATILE STAR COMMA
##
## Ends in an error in state: 235.
##
## unary_expression -> SIZEOF LPAR type_name . RPAR [ XOR_EQ XOR WHILE SWITCH SUB_EQ SUBSUB SUB STRING STAR_EQ STAR SIZEOF SHR_EQ SHR SHL_EQ SHL SEMI RPAR RETURN RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LNOT LIT_EXISTS LE LBRACE LAND INT_LIT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT EQ_OP EQ ELSE DOT DO DIV_EQ DIV DEFAULT CONTINUE COMMA COLON CHAR_LIT CASE BREAK ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## SIZEOF LPAR type_name
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 72, spurious reduction of production list(type_qualifier) -> 
## In state 75, spurious reduction of production nonempty_list(preceded(STAR,list(type_qualifier))) -> STAR list(type_qualifier) 
## In state 83, spurious reduction of production pointer -> nonempty_list(preceded(STAR,list(type_qualifier))) 
## In state 105, spurious reduction of production abstract_declarator -> pointer 
## In state 191, spurious reduction of production option(abstract_declarator) -> abstract_declarator 
## In state 212, spurious reduction of production type_name -> nonempty_list(specifier_qualifier) option(abstract_declarator) 
##

<YOUR SYNTAX ERROR MESSAGE HERE 236>

translation_unit: LIT_EXISTS LBRACK SIZEOF LPAR XOR_EQ
##
## Ends in an error in state: 22.
##
## unary_expression -> SIZEOF LPAR . type_name RPAR [ XOR_EQ XOR WHILE SWITCH SUB_EQ SUBSUB SUB STRING STAR_EQ STAR SIZEOF SHR_EQ SHR SHL_EQ SHL SEMI RPAR RETURN RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LNOT LIT_EXISTS LE LBRACE LAND INT_LIT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT EQ_OP EQ ELSE DOT DO DIV_EQ DIV DEFAULT CONTINUE COMMA COLON CHAR_LIT CASE BREAK ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## SIZEOF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE 22>

translation_unit: LIT_EXISTS LBRACK SIZEOF XOR_EQ
##
## Ends in an error in state: 21.
##
## unary_expression -> SIZEOF . LPAR type_name RPAR [ XOR_EQ XOR WHILE SWITCH SUB_EQ SUBSUB SUB STRING STAR_EQ STAR SIZEOF SHR_EQ SHR SHL_EQ SHL SEMI RPAR RETURN RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LNOT LIT_EXISTS LE LBRACE LAND INT_LIT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT EQ_OP EQ ELSE DOT DO DIV_EQ DIV DEFAULT CONTINUE COMMA COLON CHAR_LIT CASE BREAK ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
## unary_operator_unary -> SIZEOF . [ SUBSUB SUB STRING STAR SIZEOF NOT LPAR LNOT LIT_EXISTS INT_LIT IDENTIFIER FLOAT_LIT CHAR_LIT AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## SIZEOF
##

<YOUR SYNTAX ERROR MESSAGE HERE 21>

translation_unit: LIT_EXISTS LBRACK STRING DOT XOR_EQ
##
## Ends in an error in state: 224.
##
## postfix_expression -> postfix_expression field_access . identifier [ XOR_EQ XOR WHILE SWITCH SUB_EQ SUBSUB SUB STRING STAR_EQ STAR SIZEOF SHR_EQ SHR SHL_EQ SHL SEMI RPAR RETURN RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LNOT LIT_EXISTS LE LBRACE LAND INT_LIT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT EQ_OP EQ ELSE DOT DO DIV_EQ DIV DEFAULT CONTINUE COMMA COLON CHAR_LIT CASE BREAK ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## postfix_expression field_access
##

<YOUR SYNTAX ERROR MESSAGE HERE 225>

translation_unit: LIT_EXISTS LBRACK STRING LAND XOR_EQ
##
## Ends in an error in state: 148.
##
## logical_and_expression -> logical_and_expression LAND . inclusive_or_expression [ XOR_EQ XOR WHILE SWITCH SUB_EQ SUBSUB SUB STRING STAR_EQ STAR SIZEOF SHR_EQ SHR SHL_EQ SHL SEMI RPAR RETURN RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LNOT LIT_EXISTS LE LBRACE LAND INT_LIT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT EQ_OP EQ ELSE DOT DO DIV_EQ DIV DEFAULT CONTINUE COMMA COLON CHAR_LIT CASE BREAK ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## logical_and_expression LAND
##

<YOUR SYNTAX ERROR MESSAGE HERE 97>

translation_unit: LIT_EXISTS LBRACK STRING LOR XOR_EQ
##
## Ends in an error in state: 184.
##
## logical_or_expression -> logical_or_expression LOR . logical_and_expression [ XOR_EQ XOR WHILE SWITCH SUB_EQ SUBSUB SUB STRING STAR_EQ STAR SIZEOF SHR_EQ SHR SHL_EQ SHL SEMI RPAR RETURN RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LNOT LIT_EXISTS LE LBRACE LAND INT_LIT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT EQ_OP EQ ELSE DOT DO DIV_EQ DIV DEFAULT CONTINUE COMMA COLON CHAR_LIT CASE BREAK ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## logical_or_expression LOR
##

<YOUR SYNTAX ERROR MESSAGE HERE 120>

translation_unit: LIT_EXISTS LBRACK STRING LPAR STRING COMMA STRING WHILE
##
## Ends in an error in state: 217.
##
## argument_expression_list -> assignment_expression . [ RPAR ]
## argument_expression_list -> assignment_expression . COMMA argument_expression_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## assignment_expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 52, spurious reduction of production unary_expression -> postfix_expression 
## In state 50, spurious reduction of production cast_expression -> unary_expression 
## In state 129, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 123, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 142, spurious reduction of production shift_expression -> additive_expression 
## In state 119, spurious reduction of production relational_expression -> shift_expression 
## In state 135, spurious reduction of production equality_expression -> relational_expression 
## In state 153, spurious reduction of production and_expression -> equality_expression 
## In state 161, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 162, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 163, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 147, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 145, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 166, spurious reduction of production assignment_expression -> conditional_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE 218>

translation_unit: LIT_EXISTS LBRACK STRING LPAR STRING COMMA XOR_EQ
##
## Ends in an error in state: 216.
##
## argument_expression_list -> assignment_expression COMMA . argument_expression_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## assignment_expression COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE 217>

translation_unit: LIT_EXISTS LBRACK STRING LPAR STRING WHILE
##
## Ends in an error in state: 215.
##
## argument_expression_list -> assignment_expression . [ RPAR ]
## argument_expression_list -> assignment_expression . COMMA argument_expression_list [ RPAR ]
## expression -> assignment_expression . [ RPAR COMMA ]
##
## The known suffix of the stack is as follows:
## assignment_expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 52, spurious reduction of production unary_expression -> postfix_expression 
## In state 50, spurious reduction of production cast_expression -> unary_expression 
## In state 129, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 123, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 142, spurious reduction of production shift_expression -> additive_expression 
## In state 119, spurious reduction of production relational_expression -> shift_expression 
## In state 135, spurious reduction of production equality_expression -> relational_expression 
## In state 153, spurious reduction of production and_expression -> equality_expression 
## In state 161, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 162, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 163, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 147, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 145, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 166, spurious reduction of production assignment_expression -> conditional_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE 216>

translation_unit: LIT_EXISTS LBRACK STRING LPAR XOR_EQ
##
## Ends in an error in state: 53.
##
## cast_expression -> LPAR . type_name RPAR cast_expression [ XOR_EQ XOR WHILE SWITCH SUB_EQ SUBSUB SUB STRING STAR_EQ STAR SIZEOF SHR_EQ SHR SHL_EQ SHL SEMI RPAR RETURN RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LNOT LIT_EXISTS LE LBRACE LAND INT_LIT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT EQ_OP EQ ELSE DOT DO DIV_EQ DIV DEFAULT CONTINUE COMMA COLON CHAR_LIT CASE BREAK ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
## postfix_expression -> postfix_expression LPAR . argument_expression_list RPAR [ XOR_EQ XOR WHILE SWITCH SUB_EQ SUBSUB SUB STRING STAR_EQ STAR SIZEOF SHR_EQ SHR SHL_EQ SHL SEMI RPAR RETURN RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LNOT LIT_EXISTS LE LBRACE LAND INT_LIT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT EQ_OP EQ ELSE DOT DO DIV_EQ DIV DEFAULT CONTINUE COMMA COLON CHAR_LIT CASE BREAK ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
## primary_expression -> LPAR . expression RPAR [ XOR_EQ XOR WHILE SWITCH SUB_EQ SUBSUB SUB STRING STAR_EQ STAR SIZEOF SHR_EQ SHR SHL_EQ SHL SEMI RPAR RETURN RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LNOT LIT_EXISTS LE LBRACE LAND INT_LIT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT EQ_OP EQ ELSE DOT DO DIV_EQ DIV DEFAULT CONTINUE COMMA COLON CHAR_LIT CASE BREAK ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## postfix_expression LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE 53>

translation_unit: LIT_EXISTS LBRACK STRING LT XOR_EQ
##
## Ends in an error in state: 140.
##
## relational_expression -> relational_expression relational_operator . shift_expression [ XOR_EQ XOR WHILE SWITCH SUB_EQ SUBSUB SUB STRING STAR_EQ STAR SIZEOF SHR_EQ SHR SHL_EQ SHL SEMI RPAR RETURN RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LNOT LIT_EXISTS LE LBRACE LAND INT_LIT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT EQ_OP EQ ELSE DOT DO DIV_EQ DIV DEFAULT CONTINUE COMMA COLON CHAR_LIT CASE BREAK ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## relational_expression relational_operator
##

<YOUR SYNTAX ERROR MESSAGE HERE 91>

translation_unit: LIT_EXISTS LBRACK STRING MOD XOR_EQ
##
## Ends in an error in state: 127.
##
## multiplicative_expression -> multiplicative_expression multiplicative_operator . cast_expression [ XOR_EQ XOR WHILE SWITCH SUB_EQ SUBSUB SUB STRING STAR_EQ STAR SIZEOF SHR_EQ SHR SHL_EQ SHL SEMI RPAR RETURN RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LNOT LIT_EXISTS LE LBRACE LAND INT_LIT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT EQ_OP EQ ELSE DOT DO DIV_EQ DIV DEFAULT CONTINUE COMMA COLON CHAR_LIT CASE BREAK ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## multiplicative_expression multiplicative_operator
##

<YOUR SYNTAX ERROR MESSAGE HERE 75>

translation_unit: LIT_EXISTS LBRACK STRING NEQ_OP XOR_EQ
##
## Ends in an error in state: 156.
##
## equality_expression -> equality_expression equality_operator . relational_expression [ XOR_EQ XOR WHILE SWITCH SUB_EQ SUBSUB SUB STRING STAR_EQ STAR SIZEOF SHR_EQ SHR SHL_EQ SHL SEMI RPAR RETURN RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LNOT LIT_EXISTS LE LBRACE LAND INT_LIT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT EQ_OP EQ ELSE DOT DO DIV_EQ DIV DEFAULT CONTINUE COMMA COLON CHAR_LIT CASE BREAK ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## equality_expression equality_operator
##

<YOUR SYNTAX ERROR MESSAGE HERE 105>

translation_unit: LIT_EXISTS LBRACK STRING PIPE XOR_EQ
##
## Ends in an error in state: 150.
##
## inclusive_or_expression -> inclusive_or_expression PIPE . exclusive_or_expression [ XOR_EQ XOR WHILE SWITCH SUB_EQ SUBSUB SUB STRING STAR_EQ STAR SIZEOF SHR_EQ SHR SHL_EQ SHL SEMI RPAR RETURN RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LNOT LIT_EXISTS LE LBRACE LAND INT_LIT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT EQ_OP EQ ELSE DOT DO DIV_EQ DIV DEFAULT CONTINUE COMMA COLON CHAR_LIT CASE BREAK ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## inclusive_or_expression PIPE
##

<YOUR SYNTAX ERROR MESSAGE HERE 99>

translation_unit: LIT_EXISTS LBRACK STRING QUESTION STRING COLON XOR_EQ
##
## Ends in an error in state: 181.
##
## conditional_expression -> logical_or_expression QUESTION expression COLON . expression [ XOR_EQ XOR WHILE SWITCH SUB_EQ SUBSUB SUB STRING STAR_EQ STAR SIZEOF SHR_EQ SHR SHL_EQ SHL SEMI RPAR RETURN RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LNOT LIT_EXISTS LE LBRACE LAND INT_LIT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT EQ_OP EQ ELSE DOT DO DIV_EQ DIV DEFAULT CONTINUE COMMA COLON CHAR_LIT CASE BREAK ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## logical_or_expression QUESTION expression COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE 117>

translation_unit: LIT_EXISTS LBRACK STRING QUESTION STRING WHILE
##
## Ends in an error in state: 164.
##
## conditional_expression -> logical_or_expression QUESTION expression . COLON expression [ XOR_EQ XOR WHILE SWITCH SUB_EQ SUBSUB SUB STRING STAR_EQ STAR SIZEOF SHR_EQ SHR SHL_EQ SHL SEMI RPAR RETURN RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LNOT LIT_EXISTS LE LBRACE LAND INT_LIT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT EQ_OP EQ ELSE DOT DO DIV_EQ DIV DEFAULT CONTINUE COMMA COLON CHAR_LIT CASE BREAK ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
## expression -> expression . COMMA assignment_expression [ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## logical_or_expression QUESTION expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 52, spurious reduction of production unary_expression -> postfix_expression 
## In state 50, spurious reduction of production cast_expression -> unary_expression 
## In state 129, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 123, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 142, spurious reduction of production shift_expression -> additive_expression 
## In state 119, spurious reduction of production relational_expression -> shift_expression 
## In state 135, spurious reduction of production equality_expression -> relational_expression 
## In state 153, spurious reduction of production and_expression -> equality_expression 
## In state 161, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 162, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 163, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 147, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 145, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 166, spurious reduction of production assignment_expression -> conditional_expression 
## In state 183, spurious reduction of production expression -> assignment_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE 113>

translation_unit: LIT_EXISTS LBRACK STRING QUESTION XOR_EQ
##
## Ends in an error in state: 146.
##
## conditional_expression -> logical_or_expression QUESTION . expression COLON expression [ XOR_EQ XOR WHILE SWITCH SUB_EQ SUBSUB SUB STRING STAR_EQ STAR SIZEOF SHR_EQ SHR SHL_EQ SHL SEMI RPAR RETURN RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LNOT LIT_EXISTS LE LBRACE LAND INT_LIT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT EQ_OP EQ ELSE DOT DO DIV_EQ DIV DEFAULT CONTINUE COMMA COLON CHAR_LIT CASE BREAK ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## logical_or_expression QUESTION
##

<YOUR SYNTAX ERROR MESSAGE HERE 95>

translation_unit: LIT_EXISTS LBRACK STRING SHR XOR_EQ
##
## Ends in an error in state: 122.
##
## shift_expression -> shift_expression shift_operator . additive_expression [ XOR_EQ XOR WHILE SWITCH SUB_EQ SUBSUB SUB STRING STAR_EQ STAR SIZEOF SHR_EQ SHR SHL_EQ SHL SEMI RPAR RETURN RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LNOT LIT_EXISTS LE LBRACE LAND INT_LIT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT EQ_OP EQ ELSE DOT DO DIV_EQ DIV DEFAULT CONTINUE COMMA COLON CHAR_LIT CASE BREAK ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## shift_expression shift_operator
##

<YOUR SYNTAX ERROR MESSAGE HERE 70>

translation_unit: LIT_EXISTS LBRACK STRING VOLATILE
##
## Ends in an error in state: 52.
##
## postfix_expression -> postfix_expression . expression [ XOR_EQ XOR WHILE SWITCH SUB_EQ SUBSUB SUB STRING STAR_EQ STAR SIZEOF SHR_EQ SHR SHL_EQ SHL SEMI RPAR RETURN RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LNOT LIT_EXISTS LE LBRACE LAND INT_LIT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT EQ_OP EQ ELSE DOT DO DIV_EQ DIV DEFAULT CONTINUE COMMA COLON CHAR_LIT CASE BREAK ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
## postfix_expression -> postfix_expression . LPAR argument_expression_list RPAR [ XOR_EQ XOR WHILE SWITCH SUB_EQ SUBSUB SUB STRING STAR_EQ STAR SIZEOF SHR_EQ SHR SHL_EQ SHL SEMI RPAR RETURN RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LNOT LIT_EXISTS LE LBRACE LAND INT_LIT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT EQ_OP EQ ELSE DOT DO DIV_EQ DIV DEFAULT CONTINUE COMMA COLON CHAR_LIT CASE BREAK ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
## postfix_expression -> postfix_expression . field_access identifier [ XOR_EQ XOR WHILE SWITCH SUB_EQ SUBSUB SUB STRING STAR_EQ STAR SIZEOF SHR_EQ SHR SHL_EQ SHL SEMI RPAR RETURN RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LNOT LIT_EXISTS LE LBRACE LAND INT_LIT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT EQ_OP EQ ELSE DOT DO DIV_EQ DIV DEFAULT CONTINUE COMMA COLON CHAR_LIT CASE BREAK ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
## postfix_expression -> postfix_expression . inc_or_dec_operator [ XOR_EQ XOR WHILE SWITCH SUB_EQ SUBSUB SUB STRING STAR_EQ STAR SIZEOF SHR_EQ SHR SHL_EQ SHL SEMI RPAR RETURN RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LNOT LIT_EXISTS LE LBRACE LAND INT_LIT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT EQ_OP EQ ELSE DOT DO DIV_EQ DIV DEFAULT CONTINUE COMMA COLON CHAR_LIT CASE BREAK ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
## unary_expression -> postfix_expression . [ XOR_EQ XOR WHILE SWITCH SUB_EQ SUBSUB SUB STRING STAR_EQ STAR SIZEOF SHR_EQ SHR SHL_EQ SHL SEMI RPAR RETURN RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LNOT LIT_EXISTS LE LBRACE LAND INT_LIT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT EQ_OP EQ ELSE DOT DO DIV_EQ DIV DEFAULT CONTINUE COMMA COLON CHAR_LIT CASE BREAK ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## postfix_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE 52>

translation_unit: LIT_EXISTS LBRACK STRING XOR XOR_EQ
##
## Ends in an error in state: 152.
##
## exclusive_or_expression -> exclusive_or_expression XOR . and_expression [ XOR_EQ XOR WHILE SWITCH SUB_EQ SUBSUB SUB STRING STAR_EQ STAR SIZEOF SHR_EQ SHR SHL_EQ SHL SEMI RPAR RETURN RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LNOT LIT_EXISTS LE LBRACE LAND INT_LIT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT EQ_OP EQ ELSE DOT DO DIV_EQ DIV DEFAULT CONTINUE COMMA COLON CHAR_LIT CASE BREAK ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## exclusive_or_expression XOR
##

<YOUR SYNTAX ERROR MESSAGE HERE 101>

translation_unit: LIT_EXISTS LBRACK SUB XOR_EQ
##
## Ends in an error in state: 49.
##
## unary_expression -> unary_operator_cast . cast_expression [ XOR_EQ XOR WHILE SWITCH SUB_EQ SUBSUB SUB STRING STAR_EQ STAR SIZEOF SHR_EQ SHR SHL_EQ SHL SEMI RPAR RETURN RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LNOT LIT_EXISTS LE LBRACE LAND INT_LIT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT EQ_OP EQ ELSE DOT DO DIV_EQ DIV DEFAULT CONTINUE COMMA COLON CHAR_LIT CASE BREAK ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## unary_operator_cast
##

<YOUR SYNTAX ERROR MESSAGE HERE 49>

translation_unit: LIT_EXISTS LBRACK SUBSUB LPAR XOR_EQ
##
## Ends in an error in state: 48.
##
## primary_expression -> LPAR . expression RPAR [ XOR_EQ XOR WHILE SWITCH SUB_EQ SUBSUB SUB STRING STAR_EQ STAR SIZEOF SHR_EQ SHR SHL_EQ SHL SEMI RPAR RETURN RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LNOT LIT_EXISTS LE LBRACE LAND INT_LIT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT EQ_OP EQ ELSE DOT DO DIV_EQ DIV DEFAULT CONTINUE COMMA COLON CHAR_LIT CASE BREAK ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE 48>

translation_unit: LIT_EXISTS LBRACK SUBSUB XOR_EQ
##
## Ends in an error in state: 47.
##
## unary_expression -> unary_operator_unary . unary_expression [ XOR_EQ XOR WHILE SWITCH SUB_EQ SUBSUB SUB STRING STAR_EQ STAR SIZEOF SHR_EQ SHR SHL_EQ SHL SEMI RPAR RETURN RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LNOT LIT_EXISTS LE LBRACE LAND INT_LIT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT EQ_OP EQ ELSE DOT DO DIV_EQ DIV DEFAULT CONTINUE COMMA COLON CHAR_LIT CASE BREAK ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## unary_operator_unary
##

<YOUR SYNTAX ERROR MESSAGE HERE 47>

translation_unit: LIT_EXISTS LBRACK XOR_EQ
##
## Ends in an error in state: 197.
##
## direct_declarator -> direct_declarator LBRACK . option(constant_expression) RBRACK [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LBRACK LBRACE INT FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## direct_declarator LBRACK
##

<YOUR SYNTAX ERROR MESSAGE HERE 198>

translation_unit: LIT_EXISTS LPAR LIT_EXISTS COMMA XOR_EQ
##
## Ends in an error in state: 195.
##
## separated_nonempty_list(COMMA,identifier) -> identifier COMMA . separated_nonempty_list(COMMA,identifier) [ RPAR ]
##
## The known suffix of the stack is as follows:
## identifier COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE 196>

translation_unit: LIT_EXISTS LPAR LIT_EXISTS XOR_EQ
##
## Ends in an error in state: 194.
##
## separated_nonempty_list(COMMA,identifier) -> identifier . [ RPAR ]
## separated_nonempty_list(COMMA,identifier) -> identifier . COMMA separated_nonempty_list(COMMA,identifier) [ RPAR ]
##
## The known suffix of the stack is as follows:
## identifier
##

<YOUR SYNTAX ERROR MESSAGE HERE 195>

translation_unit: LIT_EXISTS LPAR VOLATILE COMMA XOR_EQ
##
## Ends in an error in state: 102.
##
## separated_nonempty_list(COMMA,parameter_declaration) -> parameter_declaration COMMA . separated_nonempty_list(COMMA,parameter_declaration) [ RPAR COMMA ]
##
## The known suffix of the stack is as follows:
## parameter_declaration COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE 168>

translation_unit: LIT_EXISTS LPAR VOLATILE IDENTIFIER VOLATILE
##
## Ends in an error in state: 101.
##
## separated_nonempty_list(COMMA,parameter_declaration) -> parameter_declaration . [ RPAR COMMA ]
## separated_nonempty_list(COMMA,parameter_declaration) -> parameter_declaration . COMMA separated_nonempty_list(COMMA,parameter_declaration) [ RPAR COMMA ]
##
## The known suffix of the stack is as follows:
## parameter_declaration
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 87, spurious reduction of production declarator -> option(pointer) direct_declarator 
## In state 190, spurious reduction of production parameter_declarator -> declarator 
## In state 106, spurious reduction of production parameter_declaration -> nonempty_list(declaration_specifier) parameter_declarator 
##

<YOUR SYNTAX ERROR MESSAGE HERE 167>

translation_unit: LIT_EXISTS LPAR VOLATILE LBRACK RBRACK LPAR XOR_EQ
##
## Ends in an error in state: 112.
##
## direct_abstract_declarator -> option(direct_abstract_declarator) LPAR . option(parameter_type_list) RPAR [ RPAR LPAR LBRACK COMMA ]
##
## The known suffix of the stack is as follows:
## option(direct_abstract_declarator) LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE 178>

translation_unit: LIT_EXISTS LPAR VOLATILE LBRACK RBRACK XOR_EQ
##
## Ends in an error in state: 188.
##
## abstract_declarator -> option(pointer) direct_abstract_declarator . [ RPAR COMMA ]
## option(direct_abstract_declarator) -> direct_abstract_declarator . [ LPAR LBRACK ]
##
## The known suffix of the stack is as follows:
## option(pointer) direct_abstract_declarator
##

<YOUR SYNTAX ERROR MESSAGE HERE 189>

translation_unit: LIT_EXISTS LPAR VOLATILE LBRACK STRING RBRACE
##
## Ends in an error in state: 143.
##
## direct_abstract_declarator -> option(direct_abstract_declarator) LBRACK option(constant_expression) . RBRACK [ RPAR LPAR LBRACK COMMA ]
##
## The known suffix of the stack is as follows:
## option(direct_abstract_declarator) LBRACK option(constant_expression)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 52, spurious reduction of production unary_expression -> postfix_expression 
## In state 50, spurious reduction of production cast_expression -> unary_expression 
## In state 129, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 123, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 142, spurious reduction of production shift_expression -> additive_expression 
## In state 119, spurious reduction of production relational_expression -> shift_expression 
## In state 135, spurious reduction of production equality_expression -> relational_expression 
## In state 153, spurious reduction of production and_expression -> equality_expression 
## In state 161, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 162, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 163, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 147, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 145, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 187, spurious reduction of production constant_expression -> conditional_expression 
## In state 186, spurious reduction of production option(constant_expression) -> constant_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE 185>

translation_unit: LIT_EXISTS LPAR VOLATILE LBRACK XOR_EQ
##
## Ends in an error in state: 118.
##
## direct_abstract_declarator -> option(direct_abstract_declarator) LBRACK . option(constant_expression) RBRACK [ RPAR LPAR LBRACK COMMA ]
##
## The known suffix of the stack is as follows:
## option(direct_abstract_declarator) LBRACK
##

<YOUR SYNTAX ERROR MESSAGE HERE 184>

translation_unit: LIT_EXISTS LPAR VOLATILE LPAR STAR COMMA
##
## Ends in an error in state: 109.
##
## direct_abstract_declarator -> LPAR abstract_declarator . RPAR [ RPAR LPAR LBRACK COMMA ]
##
## The known suffix of the stack is as follows:
## LPAR abstract_declarator
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 72, spurious reduction of production list(type_qualifier) -> 
## In state 75, spurious reduction of production nonempty_list(preceded(STAR,list(type_qualifier))) -> STAR list(type_qualifier) 
## In state 83, spurious reduction of production pointer -> nonempty_list(preceded(STAR,list(type_qualifier))) 
## In state 105, spurious reduction of production abstract_declarator -> pointer 
##

<YOUR SYNTAX ERROR MESSAGE HERE 175>

translation_unit: LIT_EXISTS LPAR VOLATILE LPAR XOR_EQ
##
## Ends in an error in state: 108.
##
## direct_abstract_declarator -> LPAR . abstract_declarator RPAR [ RPAR LPAR LBRACK COMMA ]
## direct_declarator -> LPAR . declarator RPAR [ RPAR LPAR LBRACK COMMA ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE 174>

translation_unit: LIT_EXISTS LPAR VOLATILE SEMI
##
## Ends in an error in state: 104.
##
## parameter_declaration -> nonempty_list(declaration_specifier) . parameter_declarator [ RPAR COMMA ]
##
## The known suffix of the stack is as follows:
## nonempty_list(declaration_specifier)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 116, spurious reduction of production nonempty_list(declaration_specifier) -> declaration_specifier 
##

<YOUR SYNTAX ERROR MESSAGE HERE 170>

translation_unit: LIT_EXISTS LPAR XOR_EQ
##
## Ends in an error in state: 88.
##
## direct_declarator -> direct_declarator LPAR . parameter_type_list RPAR [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LBRACK LBRACE INT FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## direct_declarator -> direct_declarator LPAR . loption(separated_nonempty_list(COMMA,identifier)) RPAR [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LBRACK LBRACE INT FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## direct_declarator LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE 154>

translation_unit: LIT_EXISTS SEMI
##
## Ends in an error in state: 289.
##
## function_definition -> list(declaration_specifier) declarator . list(declaration) compound_statement [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAR LONG LIT_EXISTS LBRACE INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## list(declaration_specifier) declarator
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 87, spurious reduction of production declarator -> option(pointer) direct_declarator 
##

<YOUR SYNTAX ERROR MESSAGE HERE 286>

translation_unit: LIT_EXISTS VOLATILE LIT_EXISTS COMMA XOR_EQ
##
## Ends in an error in state: 249.
##
## separated_nonempty_list(COMMA,init_declarator) -> init_declarator COMMA . separated_nonempty_list(COMMA,init_declarator) [ SEMI ]
##
## The known suffix of the stack is as follows:
## init_declarator COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE 250>

translation_unit: LIT_EXISTS VOLATILE LIT_EXISTS EQ LBRACE STRING COMMA XOR_EQ
##
## Ends in an error in state: 259.
##
## separated_nonempty_list(COMMA,initialiser) -> initialiser COMMA . separated_nonempty_list(COMMA,initialiser) [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## initialiser COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE 260>

translation_unit: LIT_EXISTS VOLATILE LIT_EXISTS EQ LBRACE STRING WHILE
##
## Ends in an error in state: 258.
##
## separated_nonempty_list(COMMA,initialiser) -> initialiser . [ RBRACE COMMA ]
## separated_nonempty_list(COMMA,initialiser) -> initialiser . COMMA separated_nonempty_list(COMMA,initialiser) [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## initialiser
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 52, spurious reduction of production unary_expression -> postfix_expression 
## In state 50, spurious reduction of production cast_expression -> unary_expression 
## In state 129, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 123, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 142, spurious reduction of production shift_expression -> additive_expression 
## In state 119, spurious reduction of production relational_expression -> shift_expression 
## In state 135, spurious reduction of production equality_expression -> relational_expression 
## In state 153, spurious reduction of production and_expression -> equality_expression 
## In state 161, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 162, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 163, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 147, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 145, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 166, spurious reduction of production assignment_expression -> conditional_expression 
## In state 261, spurious reduction of production initialiser -> assignment_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE 259>

translation_unit: LIT_EXISTS VOLATILE LIT_EXISTS EQ LBRACE XOR_EQ
##
## Ends in an error in state: 253.
##
## initialiser -> LBRACE . separated_nonempty_list(COMMA,initialiser) option(COMMA) RBRACE [ SEMI RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE 254>

translation_unit: LIT_EXISTS VOLATILE LIT_EXISTS EQ STRING WHILE
##
## Ends in an error in state: 248.
##
## separated_nonempty_list(COMMA,init_declarator) -> init_declarator . [ SEMI ]
## separated_nonempty_list(COMMA,init_declarator) -> init_declarator . COMMA separated_nonempty_list(COMMA,init_declarator) [ SEMI ]
##
## The known suffix of the stack is as follows:
## init_declarator
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 52, spurious reduction of production unary_expression -> postfix_expression 
## In state 50, spurious reduction of production cast_expression -> unary_expression 
## In state 129, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 123, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 142, spurious reduction of production shift_expression -> additive_expression 
## In state 119, spurious reduction of production relational_expression -> shift_expression 
## In state 135, spurious reduction of production equality_expression -> relational_expression 
## In state 153, spurious reduction of production and_expression -> equality_expression 
## In state 161, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 162, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 163, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 147, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 145, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 166, spurious reduction of production assignment_expression -> conditional_expression 
## In state 261, spurious reduction of production initialiser -> assignment_expression 
## In state 262, spurious reduction of production option(preceded(EQ,initialiser)) -> EQ initialiser 
## In state 263, spurious reduction of production init_declarator -> declarator option(preceded(EQ,initialiser)) 
##

<YOUR SYNTAX ERROR MESSAGE HERE 249>

translation_unit: LIT_EXISTS VOLATILE LIT_EXISTS EQ XOR_EQ
##
## Ends in an error in state: 252.
##
## option(preceded(EQ,initialiser)) -> EQ . initialiser [ SEMI COMMA ]
##
## The known suffix of the stack is as follows:
## EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE 253>

translation_unit: LIT_EXISTS VOLATILE LIT_EXISTS VOLATILE
##
## Ends in an error in state: 251.
##
## init_declarator -> declarator . option(preceded(EQ,initialiser)) [ SEMI COMMA ]
##
## The known suffix of the stack is as follows:
## declarator
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 87, spurious reduction of production declarator -> option(pointer) direct_declarator 
##

<YOUR SYNTAX ERROR MESSAGE HERE 252>

translation_unit: LIT_EXISTS VOLATILE RPAR
##
## Ends in an error in state: 244.
##
## declaration -> nonempty_list(declaration_specifier) . loption(separated_nonempty_list(COMMA,init_declarator)) SEMI [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN EOF ENUM DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## nonempty_list(declaration_specifier)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 116, spurious reduction of production nonempty_list(declaration_specifier) -> declaration_specifier 
##

<YOUR SYNTAX ERROR MESSAGE HERE 245>

translation_unit: LIT_EXISTS VOLATILE SEMI XOR_EQ
##
## Ends in an error in state: 354.
##
## list(declaration) -> declaration . list(declaration) [ WHILE SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RETURN RBRACE NOT LPAR LNOT LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT DO DEFAULT CONTINUE CHAR_LIT CASE BREAK AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## declaration
##

<YOUR SYNTAX ERROR MESSAGE HERE 351>

translation_unit: LIT_EXISTS VOLATILE XOR_EQ
##
## Ends in an error in state: 116.
##
## nonempty_list(declaration_specifier) -> declaration_specifier . [ STAR SEMI RPAR LPAR LIT_EXISTS LBRACK IDENTIFIER COMMA ]
## nonempty_list(declaration_specifier) -> declaration_specifier . nonempty_list(declaration_specifier) [ STAR SEMI RPAR LPAR LIT_EXISTS LBRACK IDENTIFIER COMMA ]
##
## The known suffix of the stack is as follows:
## declaration_specifier
##

<YOUR SYNTAX ERROR MESSAGE HERE 182>

translation_unit: LIT_EXISTS XOR_EQ
##
## Ends in an error in state: 87.
##
## declarator -> option(pointer) direct_declarator . [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMI RPAR REGISTER LONG LBRACE INT FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## direct_declarator -> direct_declarator . LBRACK option(constant_expression) RBRACK [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LBRACK LBRACE INT FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## direct_declarator -> direct_declarator . LPAR parameter_type_list RPAR [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LBRACK LBRACE INT FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## direct_declarator -> direct_declarator . LPAR loption(separated_nonempty_list(COMMA,identifier)) RPAR [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LBRACK LBRACE INT FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## option(pointer) direct_declarator
##

<YOUR SYNTAX ERROR MESSAGE HERE 153>

translation_unit: LPAR LIT_EXISTS VOLATILE
##
## Ends in an error in state: 84.
##
## direct_declarator -> LPAR declarator . RPAR [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LBRACK LBRACE INT FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## LPAR declarator
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 87, spurious reduction of production declarator -> option(pointer) direct_declarator 
##

<YOUR SYNTAX ERROR MESSAGE HERE 150>

translation_unit: LPAR XOR_EQ
##
## Ends in an error in state: 82.
##
## direct_declarator -> LPAR . declarator RPAR [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LBRACK LBRACE INT FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE 148>

translation_unit: STAR COMMA
##
## Ends in an error in state: 81.
##
## declarator -> option(pointer) . direct_declarator [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMI RPAR REGISTER LONG LBRACE INT FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## option(pointer)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 72, spurious reduction of production list(type_qualifier) -> 
## In state 75, spurious reduction of production nonempty_list(preceded(STAR,list(type_qualifier))) -> STAR list(type_qualifier) 
## In state 83, spurious reduction of production pointer -> nonempty_list(preceded(STAR,list(type_qualifier))) 
## In state 80, spurious reduction of production option(pointer) -> pointer 
##

<YOUR SYNTAX ERROR MESSAGE HERE 147>

translation_unit: STAR VOLATILE XOR_EQ
##
## Ends in an error in state: 73.
##
## list(type_qualifier) -> type_qualifier . list(type_qualifier) [ STAR RPAR LPAR LIT_EXISTS LBRACK IDENTIFIER COMMA ]
##
## The known suffix of the stack is as follows:
## type_qualifier
##

<YOUR SYNTAX ERROR MESSAGE HERE 139>

translation_unit: STAR XOR_EQ
##
## Ends in an error in state: 72.
##
## nonempty_list(preceded(STAR,list(type_qualifier))) -> STAR . list(type_qualifier) [ RPAR LPAR LIT_EXISTS LBRACK IDENTIFIER COMMA ]
## nonempty_list(preceded(STAR,list(type_qualifier))) -> STAR . list(type_qualifier) nonempty_list(preceded(STAR,list(type_qualifier))) [ RPAR LPAR LIT_EXISTS LBRACK IDENTIFIER COMMA ]
##
## The known suffix of the stack is as follows:
## STAR
##

<YOUR SYNTAX ERROR MESSAGE HERE 138>

translation_unit: UNION LBRACE VOLATILE COLON STRING WHILE
##
## Ends in an error in state: 202.
##
## expression -> expression . COMMA assignment_expression [ SEMI COMMA ]
## struct_declarator -> option(declarator) COLON expression . [ SEMI COMMA ]
##
## The known suffix of the stack is as follows:
## option(declarator) COLON expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 52, spurious reduction of production unary_expression -> postfix_expression 
## In state 50, spurious reduction of production cast_expression -> unary_expression 
## In state 129, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 123, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 142, spurious reduction of production shift_expression -> additive_expression 
## In state 119, spurious reduction of production relational_expression -> shift_expression 
## In state 135, spurious reduction of production equality_expression -> relational_expression 
## In state 153, spurious reduction of production and_expression -> equality_expression 
## In state 161, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 162, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 163, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 147, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 145, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 166, spurious reduction of production assignment_expression -> conditional_expression 
## In state 183, spurious reduction of production expression -> assignment_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE 203>

translation_unit: UNION LBRACE VOLATILE COLON XOR_EQ
##
## Ends in an error in state: 201.
##
## struct_declarator -> option(declarator) COLON . expression [ SEMI COMMA ]
##
## The known suffix of the stack is as follows:
## option(declarator) COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE 202>

translation_unit: UNION LBRACE VOLATILE IDENTIFIER SEMI XOR_EQ
##
## Ends in an error in state: 66.
##
## nonempty_list(struct_declaration) -> struct_declaration . [ RBRACE ]
## nonempty_list(struct_declaration) -> struct_declaration . nonempty_list(struct_declaration) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## struct_declaration
##

<YOUR SYNTAX ERROR MESSAGE HERE 132>

translation_unit: UNION LBRACE VOLATILE LIT_EXISTS COMMA XOR_EQ
##
## Ends in an error in state: 78.
##
## separated_nonempty_list(COMMA,struct_declarator) -> struct_declarator COMMA . separated_nonempty_list(COMMA,struct_declarator) [ SEMI ]
##
## The known suffix of the stack is as follows:
## struct_declarator COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE 144>

translation_unit: UNION LBRACE VOLATILE LIT_EXISTS VOLATILE
##
## Ends in an error in state: 203.
##
## option(declarator) -> declarator . [ COLON ]
## struct_declarator -> declarator . [ SEMI COMMA ]
##
## The known suffix of the stack is as follows:
## declarator
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 87, spurious reduction of production declarator -> option(pointer) direct_declarator 
##

<YOUR SYNTAX ERROR MESSAGE HERE 204>

translation_unit: UNION LBRACE VOLATILE RPAR
##
## Ends in an error in state: 71.
##
## struct_declaration -> nonempty_list(specifier_qualifier) . separated_nonempty_list(COMMA,struct_declarator) SEMI [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME STRUCT SIGNED SHORT RBRACE LONG INT FLOAT ENUM DOUBLE CONST CHAR ]
##
## The known suffix of the stack is as follows:
## nonempty_list(specifier_qualifier)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 67, spurious reduction of production nonempty_list(specifier_qualifier) -> specifier_qualifier 
##

<YOUR SYNTAX ERROR MESSAGE HERE 137>

translation_unit: UNION LBRACE VOLATILE XOR_EQ
##
## Ends in an error in state: 67.
##
## nonempty_list(specifier_qualifier) -> specifier_qualifier . [ STAR RPAR LPAR LIT_EXISTS LBRACK IDENTIFIER COLON ]
## nonempty_list(specifier_qualifier) -> specifier_qualifier . nonempty_list(specifier_qualifier) [ STAR RPAR LPAR LIT_EXISTS LBRACK IDENTIFIER COLON ]
##
## The known suffix of the stack is as follows:
## specifier_qualifier
##

<YOUR SYNTAX ERROR MESSAGE HERE 133>

translation_unit: UNION LBRACE XOR_EQ
##
## Ends in an error in state: 65.
##
## struct_or_union_specifier -> struct_or_union option(identifier) LBRACE . nonempty_list(struct_declaration) RBRACE [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LIT_EXISTS LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## struct_or_union option(identifier) LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE 131>

translation_unit: UNION LIT_EXISTS XOR_EQ
##
## Ends in an error in state: 208.
##
## option(identifier) -> identifier . [ LBRACE ]
## struct_or_union_specifier -> struct_or_union identifier . [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LIT_EXISTS LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## struct_or_union identifier
##

<YOUR SYNTAX ERROR MESSAGE HERE 209>

translation_unit: UNION XOR_EQ
##
## Ends in an error in state: 63.
##
## struct_or_union_specifier -> struct_or_union . option(identifier) LBRACE nonempty_list(struct_declaration) RBRACE [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LIT_EXISTS LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## struct_or_union_specifier -> struct_or_union . identifier [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LIT_EXISTS LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## struct_or_union
##

<YOUR SYNTAX ERROR MESSAGE HERE 129>

translation_unit: VOLATILE SEMI XOR_EQ
##
## Ends in an error in state: 367.
##
## nonempty_list(external_declaration) -> external_declaration . [ EOF ]
## nonempty_list(external_declaration) -> external_declaration . nonempty_list(external_declaration) [ EOF ]
##
## The known suffix of the stack is as follows:
## external_declaration
##

<YOUR SYNTAX ERROR MESSAGE HERE 364>

translation_unit: VOLATILE XOR_EQ
##
## Ends in an error in state: 359.
##
## list(declaration_specifier) -> declaration_specifier . list(declaration_specifier) [ STAR LPAR LIT_EXISTS IDENTIFIER ]
## nonempty_list(declaration_specifier) -> declaration_specifier . [ STAR SEMI LPAR LIT_EXISTS IDENTIFIER ]
## nonempty_list(declaration_specifier) -> declaration_specifier . nonempty_list(declaration_specifier) [ STAR SEMI LPAR LIT_EXISTS IDENTIFIER ]
##
## The known suffix of the stack is as follows:
## declaration_specifier
##

<YOUR SYNTAX ERROR MESSAGE HERE 356>

translation_unit: XOR_EQ
##
## Ends in an error in state: 363.
##
## translation_unit' -> . translation_unit [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE 360>

litmus: IDENTIFIER IDENTIFIER LBRACE XOR_EQ
##
## Ends in an error in state: 16.
##
## litmus_initialiser -> LBRACE . list(endsemi(assignment_expression)) RBRACE [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAR LONG LIT_EXISTS LBRACE INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE 16>

litmus: IDENTIFIER IDENTIFIER LIT_EXISTS LPAR IDENTIFIER EQ_OP CHAR_LIT LIT_AND XOR_EQ
##
## Ends in an error in state: 279.
##
## litmus_conjunct -> litmus_conjunct LIT_AND . litmus_equality [ RPAR LIT_OR LIT_AND ]
##
## The known suffix of the stack is as follows:
## litmus_conjunct LIT_AND
##

<YOUR SYNTAX ERROR MESSAGE HERE 276>

litmus: IDENTIFIER IDENTIFIER LIT_EXISTS LPAR IDENTIFIER EQ_OP CHAR_LIT LIT_OR IDENTIFIER EQ_OP CHAR_LIT XOR_EQ
##
## Ends in an error in state: 278.
##
## litmus_conjunct -> litmus_conjunct . LIT_AND litmus_equality [ RPAR LIT_OR LIT_AND ]
## litmus_disjunct -> litmus_disjunct LIT_OR litmus_conjunct . [ RPAR LIT_OR ]
##
## The known suffix of the stack is as follows:
## litmus_disjunct LIT_OR litmus_conjunct
##

<YOUR SYNTAX ERROR MESSAGE HERE 275>

litmus: IDENTIFIER IDENTIFIER LIT_EXISTS LPAR IDENTIFIER EQ_OP CHAR_LIT LIT_OR XOR_EQ
##
## Ends in an error in state: 277.
##
## litmus_disjunct -> litmus_disjunct LIT_OR . litmus_conjunct [ RPAR LIT_OR ]
##
## The known suffix of the stack is as follows:
## litmus_disjunct LIT_OR
##

<YOUR SYNTAX ERROR MESSAGE HERE 274>

litmus: IDENTIFIER IDENTIFIER LIT_EXISTS LPAR IDENTIFIER EQ_OP CHAR_LIT XOR_EQ
##
## Ends in an error in state: 281.
##
## litmus_conjunct -> litmus_conjunct . LIT_AND litmus_equality [ RPAR LIT_OR LIT_AND ]
## litmus_disjunct -> litmus_conjunct . [ RPAR LIT_OR ]
##
## The known suffix of the stack is as follows:
## litmus_conjunct
##

<YOUR SYNTAX ERROR MESSAGE HERE 278>

litmus: IDENTIFIER IDENTIFIER LIT_EXISTS LPAR IDENTIFIER EQ_OP XOR_EQ
##
## Ends in an error in state: 272.
##
## litmus_equality -> litmus_identifier EQ_OP . constant [ RPAR LIT_OR LIT_AND ]
##
## The known suffix of the stack is as follows:
## litmus_identifier EQ_OP
##

<YOUR SYNTAX ERROR MESSAGE HERE 269>

litmus: IDENTIFIER IDENTIFIER LIT_EXISTS LPAR IDENTIFIER XOR_EQ
##
## Ends in an error in state: 271.
##
## litmus_equality -> litmus_identifier . EQ_OP constant [ RPAR LIT_OR LIT_AND ]
##
## The known suffix of the stack is as follows:
## litmus_identifier
##

<YOUR SYNTAX ERROR MESSAGE HERE 268>

litmus: IDENTIFIER IDENTIFIER LIT_EXISTS LPAR INT_LIT COLON XOR_EQ
##
## Ends in an error in state: 268.
##
## litmus_identifier -> INT_LIT COLON . IDENTIFIER [ EQ_OP ]
##
## The known suffix of the stack is as follows:
## INT_LIT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE 268bis>

litmus: IDENTIFIER IDENTIFIER LIT_EXISTS LPAR INT_LIT XOR_EQ
##
## Ends in an error in state: 267.
##
## litmus_identifier -> INT_LIT . COLON IDENTIFIER [ EQ_OP ]
##
## The known suffix of the stack is as follows:
## INT_LIT
##

<YOUR SYNTAX ERROR MESSAGE HERE 267bis>


litmus: IDENTIFIER IDENTIFIER LIT_EXISTS LPAR LPAR XOR_EQ
##
## Ends in an error in state: 266.
##
## litmus_equality -> LPAR . litmus_disjunct RPAR [ RPAR LIT_OR LIT_AND ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE 267>

litmus: IDENTIFIER IDENTIFIER LIT_EXISTS LPAR XOR_EQ
##
## Ends in an error in state: 265.
##
## litmus_postcondition -> litmus_quantifier LPAR . litmus_disjunct RPAR [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAR LONG LIT_EXISTS LBRACE INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## litmus_quantifier LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE 266>

litmus: IDENTIFIER IDENTIFIER LIT_EXISTS XOR_EQ
##
## Ends in an error in state: 264.
##
## litmus_postcondition -> litmus_quantifier . LPAR litmus_disjunct RPAR [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAR LONG LIT_EXISTS LBRACE INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## litmus_quantifier
##

<YOUR SYNTAX ERROR MESSAGE HERE 265>

litmus: IDENTIFIER IDENTIFIER XOR_EQ
##
## Ends in an error in state: 2.
##
## litmus -> IDENTIFIER IDENTIFIER . nonempty_list(litmus_declaration) EOF [ # ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER IDENTIFIER
##

<YOUR SYNTAX ERROR MESSAGE HERE 2>

litmus: IDENTIFIER XOR_EQ
##
## Ends in an error in state: 1.
##
## litmus -> IDENTIFIER . IDENTIFIER nonempty_list(litmus_declaration) EOF [ # ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER
##

<YOUR SYNTAX ERROR MESSAGE HERE 1>

litmus: XOR_EQ
##
## Ends in an error in state: 0.
##
## litmus' -> . litmus [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE 0>

litmus: IDENTIFIER IDENTIFIER LBRACE LIT_EXISTS EQ CHAR_LIT XOR_EQ
##
## Ends in an error in state: 19.
##
## list(endsemi(litmus_init_stm)) -> litmus_init_stm . SEMI list(endsemi(litmus_init_stm)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## litmus_init_stm
##

<YOUR SYNTAX ERROR MESSAGE HERE A1>

litmus: IDENTIFIER IDENTIFIER LBRACE LIT_EXISTS EQ CHAR_LIT SEMI XOR_EQ
##
## Ends in an error in state: 20.
##
## list(endsemi(litmus_init_stm)) -> litmus_init_stm SEMI . list(endsemi(litmus_init_stm)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## litmus_init_stm SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE A2>

litmus: IDENTIFIER IDENTIFIER LBRACE LIT_EXISTS XOR_EQ
##
## Ends in an error in state: 22.
##
## litmus_init_stm -> identifier . EQ constant [ SEMI ]
##
## The known suffix of the stack is as follows:
## identifier
##

<YOUR SYNTAX ERROR MESSAGE HERE A3>

litmus: IDENTIFIER IDENTIFIER LBRACE LIT_EXISTS EQ XOR_EQ
##
## Ends in an error in state: 23.
##
## litmus_init_stm -> identifier EQ . constant [ SEMI ]
##
## The known suffix of the stack is as follows:
## identifier EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE A4>

litmus: IDENTIFIER IDENTIFIER LBRACE RBRACE XOR_EQ
##
## Ends in an error in state: 269.
##
## nonempty_list(litmus_declaration) -> litmus_declaration . [ EOF ]
## nonempty_list(litmus_declaration) -> litmus_declaration . nonempty_list(litmus_declaration) [ EOF ]
##
## The known suffix of the stack is as follows:
## litmus_declaration
##

<YOUR SYNTAX ERROR MESSAGE HERE A5>

litmus: IDENTIFIER IDENTIFIER VOLATILE XOR_EQ
##
## Ends in an error in state: 362.
##
## list(declaration_specifier) -> declaration_specifier . list(declaration_specifier) [ STAR LPAR LIT_EXISTS IDENTIFIER ]
##
## The known suffix of the stack is as follows:
## declaration_specifier
##

<YOUR SYNTAX ERROR MESSAGE HERE A6>

translation_unit: LIT_EXISTS LBRACK STRING LIT_OR
##
## Ends in an error in state: 121.
##
## postfix_expression -> postfix_expression . expression [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DOT DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
## postfix_expression -> postfix_expression . LPAR argument_expression_list RPAR [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DOT DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
## postfix_expression -> postfix_expression . field_access identifier [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DOT DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
## postfix_expression -> postfix_expression . inc_or_dec_operator [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DOT DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
## unary_expression -> postfix_expression . [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DOT DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## postfix_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE B1>

translation_unit: LIT_EXISTS LBRACK SIZEOF LPAR CHAR RPAR LIT_OR
##
## Ends in an error in state: 133.
##
## additive_expression -> multiplicative_expression . [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DOT DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
## multiplicative_expression -> multiplicative_expression . multiplicative_operator cast_expression [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DOT DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## multiplicative_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE B2>

translation_unit: LIT_EXISTS LBRACK SIZEOF LPAR CHAR RPAR SUB SIZEOF LPAR CHAR RPAR LIT_OR
##
## Ends in an error in state: 144.
##
## additive_expression -> additive_expression additive_operator multiplicative_expression . [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DOT DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
## multiplicative_expression -> multiplicative_expression . multiplicative_operator cast_expression [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DOT DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## additive_expression additive_operator multiplicative_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE B3>

translation_unit: LIT_EXISTS LBRACK STRING SUBSUB LIT_OR
##
## Ends in an error in state: 210.
##
## postfix_expression -> postfix_expression inc_or_dec_operator . [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DOT DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
## unary_operator_unary -> inc_or_dec_operator . [ SUBSUB SUB STRING STAR SIZEOF NOT LPAR LNOT LIT_EXISTS INT_LIT IDENTIFIER FLOAT_LIT CHAR_LIT AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## postfix_expression inc_or_dec_operator
##

<YOUR SYNTAX ERROR MESSAGE HERE B4>
