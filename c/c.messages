main: PROC LPAR ATOMIC XOR
##
## Ends in an error in state: 18.
##
## typ -> ATOMIC . base [ VOLATILE STAR RPAR IDENTIFIER ]
##
## The known suffix of the stack is as follows:
## ATOMIC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR LPAR VOID XOR
##
## Ends in an error in state: 21.
##
## base -> LPAR typ . RPAR [ VOLATILE STAR RPAR IDENTIFIER ]
## typ -> typ . STAR [ VOLATILE STAR RPAR ]
## typ -> typ . VOLATILE [ VOLATILE STAR RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR typ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR LPAR XOR
##
## Ends in an error in state: 17.
##
## base -> LPAR . typ RPAR [ VOLATILE STAR RPAR IDENTIFIER ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE CODEVAR SEMI RBRACE XOR
##
## Ends in an error in state: 359.
##
## main -> trans_unit . EOF [ # ]
## trans_unit -> trans_unit . function_def [ VOID PROC EOF ]
##
## The known suffix of the stack is as follows:
## trans_unit
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE CODEVAR SEMI XOR
##
## Ends in an error in state: 354.
##
## pseudo_seq -> block_ins . [ RBRACE ]
## pseudo_seq -> block_ins . pseudo_seq [ RBRACE ]
##
## The known suffix of the stack is as follows:
## block_ins
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE CODEVAR XOR
##
## Ends in an error in state: 329.
##
## instruction -> CODEVAR . SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## CODEVAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE FENCE LPAR MEMORDER RPAR XOR
##
## Ends in an error in state: 327.
##
## instruction -> FENCE LPAR MEMORDER RPAR . SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## FENCE LPAR MEMORDER RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE FENCE LPAR MEMORDER XOR
##
## Ends in an error in state: 326.
##
## instruction -> FENCE LPAR MEMORDER . RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## FENCE LPAR MEMORDER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE FENCE LPAR XOR
##
## Ends in an error in state: 325.
##
## instruction -> FENCE LPAR . MEMORDER RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## FENCE LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE FENCE XOR
##
## Ends in an error in state: 324.
##
## instruction -> FENCE . LPAR MEMORDER RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## FENCE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE IDENTIFIER EQ IDENTIFIER RPAR
##
## Ends in an error in state: 322.
##
## expr -> expr . STAR expr [ XOR SUB STAR SEMI PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR SEMI PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR SEMI PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR SEMI PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR SEMI PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR SEMI PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR SEMI PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR SEMI PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR SEMI PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LT expr [ XOR SUB STAR SEMI PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GT expr [ XOR SUB STAR SEMI PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LE expr [ XOR SUB STAR SEMI PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GE expr [ XOR SUB STAR SEMI PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## instruction -> IDENTIFIER EQ expr . SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER EQ expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE IDENTIFIER EQ XOR
##
## Ends in an error in state: 321.
##
## instruction -> IDENTIFIER EQ . expr SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE IDENTIFIER LPAR IDENTIFIER COMMA XOR
##
## Ends in an error in state: 155.
##
## args_ne -> expr COMMA . args_ne [ RPAR ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE IDENTIFIER LPAR IDENTIFIER SEMI
##
## Ends in an error in state: 154.
##
## args_ne -> expr . [ RPAR ]
## args_ne -> expr . COMMA args_ne [ RPAR ]
## expr -> expr . STAR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE IDENTIFIER LPAR RPAR XOR
##
## Ends in an error in state: 319.
##
## instruction -> IDENTIFIER LPAR args RPAR . SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER LPAR args RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE IDENTIFIER LPAR XOR
##
## Ends in an error in state: 317.
##
## instruction -> IDENTIFIER LPAR . args RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE IDENTIFIER XOR
##
## Ends in an error in state: 316.
##
## instruction -> IDENTIFIER . EQ expr SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
## instruction -> IDENTIFIER . LPAR args RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE IF LPAR IDENTIFIER RPAR CODEVAR SEMI ELSE XOR
##
## Ends in an error in state: 339.
##
## instruction -> IF LPAR expr RPAR block_ins ELSE . block_ins [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## IF LPAR expr RPAR block_ins ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE IF LPAR IDENTIFIER RPAR CODEVAR SEMI XOR
##
## Ends in an error in state: 338.
##
## instruction -> IF LPAR expr RPAR block_ins . [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
## instruction -> IF LPAR expr RPAR block_ins . ELSE block_ins [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## IF LPAR expr RPAR block_ins
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE IF LPAR IDENTIFIER RPAR VOID IDENTIFIER XOR
##
## Ends in an error in state: 332.
##
## initialisation -> typ IDENTIFIER . EQ expr [ SEMI ]
##
## The known suffix of the stack is as follows:
## typ IDENTIFIER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE IF LPAR IDENTIFIER RPAR VOID XOR
##
## Ends in an error in state: 331.
##
## initialisation -> typ . IDENTIFIER EQ expr [ SEMI ]
## typ -> typ . STAR [ VOLATILE STAR IDENTIFIER ]
## typ -> typ . VOLATILE [ VOLATILE STAR IDENTIFIER ]
##
## The known suffix of the stack is as follows:
## typ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE IF LPAR IDENTIFIER RPAR XOR
##
## Ends in an error in state: 315.
##
## instruction -> IF LPAR expr RPAR . block_ins [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
## instruction -> IF LPAR expr RPAR . block_ins ELSE block_ins [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## IF LPAR expr RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE IF LPAR IDENTIFIER SEMI
##
## Ends in an error in state: 314.
##
## expr -> expr . STAR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## instruction -> IF LPAR expr . RPAR block_ins [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
## instruction -> IF LPAR expr . RPAR block_ins ELSE block_ins [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## IF LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE IF LPAR XOR
##
## Ends in an error in state: 313.
##
## instruction -> IF LPAR . expr RPAR block_ins [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
## instruction -> IF LPAR . expr RPAR block_ins ELSE block_ins [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## IF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE IF XOR
##
## Ends in an error in state: 312.
##
## instruction -> IF . LPAR expr RPAR block_ins [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
## instruction -> IF . LPAR expr RPAR block_ins ELSE block_ins [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE LBRACE CODEVAR SEMI XOR
##
## Ends in an error in state: 348.
##
## ins_seq -> block_ins . [ RBRACE ]
## ins_seq -> block_ins . ins_seq [ RBRACE ]
##
## The known suffix of the stack is as follows:
## block_ins
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE LBRACE VOID IDENTIFIER SEMI XOR
##
## Ends in an error in state: 346.
##
## ins_seq -> declaration . [ RBRACE ]
## ins_seq -> declaration . ins_seq [ RBRACE ]
##
## The known suffix of the stack is as follows:
## declaration
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE LBRACE XOR
##
## Ends in an error in state: 311.
##
## block_ins -> LBRACE . ins_seq RBRACE [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE LOCK LPAR IDENTIFIER RPAR XOR
##
## Ends in an error in state: 309.
##
## instruction -> LOCK LPAR expr RPAR . SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## LOCK LPAR expr RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE LOCK LPAR IDENTIFIER SEMI
##
## Ends in an error in state: 308.
##
## expr -> expr . STAR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## instruction -> LOCK LPAR expr . RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## LOCK LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE LOCK LPAR XOR
##
## Ends in an error in state: 307.
##
## instruction -> LOCK LPAR . expr RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## LOCK LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE LOCK XOR
##
## Ends in an error in state: 306.
##
## instruction -> LOCK . LPAR expr RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## LOCK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE SPINLOCK LPAR IDENTIFIER RPAR XOR
##
## Ends in an error in state: 304.
##
## instruction -> SPINLOCK LPAR expr RPAR . SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## SPINLOCK LPAR expr RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE SPINLOCK LPAR IDENTIFIER SEMI
##
## Ends in an error in state: 303.
##
## expr -> expr . STAR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## instruction -> SPINLOCK LPAR expr . RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## SPINLOCK LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE SPINLOCK LPAR XOR
##
## Ends in an error in state: 302.
##
## instruction -> SPINLOCK LPAR . expr RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## SPINLOCK LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE SPINLOCK XOR
##
## Ends in an error in state: 301.
##
## instruction -> SPINLOCK . LPAR expr RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## SPINLOCK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE SPINUNLOCK LPAR IDENTIFIER RPAR XOR
##
## Ends in an error in state: 299.
##
## instruction -> SPINUNLOCK LPAR expr RPAR . SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## SPINUNLOCK LPAR expr RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE SPINUNLOCK LPAR IDENTIFIER SEMI
##
## Ends in an error in state: 298.
##
## expr -> expr . STAR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## instruction -> SPINUNLOCK LPAR expr . RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## SPINUNLOCK LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE SPINUNLOCK LPAR XOR
##
## Ends in an error in state: 297.
##
## instruction -> SPINUNLOCK LPAR . expr RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## SPINUNLOCK LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE SPINUNLOCK XOR
##
## Ends in an error in state: 296.
##
## instruction -> SPINUNLOCK . LPAR expr RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## SPINUNLOCK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE SRCU LBRACE UNLOCK RBRACE LPAR IDENTIFIER RPAR XOR
##
## Ends in an error in state: 294.
##
## instruction -> SRCU LBRACE annot_list RBRACE LPAR expr RPAR . SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## SRCU LBRACE annot_list RBRACE LPAR expr RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE SRCU LBRACE UNLOCK RBRACE LPAR IDENTIFIER SEMI
##
## Ends in an error in state: 293.
##
## expr -> expr . STAR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## instruction -> SRCU LBRACE annot_list RBRACE LPAR expr . RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## SRCU LBRACE annot_list RBRACE LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE SRCU LBRACE UNLOCK RBRACE LPAR XOR
##
## Ends in an error in state: 292.
##
## instruction -> SRCU LBRACE annot_list RBRACE LPAR . expr RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## SRCU LBRACE annot_list RBRACE LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE SRCU LBRACE UNLOCK RBRACE XOR
##
## Ends in an error in state: 291.
##
## instruction -> SRCU LBRACE annot_list RBRACE . LPAR expr RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## SRCU LBRACE annot_list RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE SRCU LBRACE XOR
##
## Ends in an error in state: 289.
##
## instruction -> SRCU LBRACE . annot_list RBRACE LPAR expr RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## SRCU LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE SRCU XOR
##
## Ends in an error in state: 288.
##
## instruction -> SRCU . LBRACE annot_list RBRACE LPAR expr RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## SRCU
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE STAR IDENTIFIER EQ IDENTIFIER RPAR
##
## Ends in an error in state: 286.
##
## expr -> expr . STAR expr [ XOR SUB STAR SEMI PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR SEMI PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR SEMI PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR SEMI PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR SEMI PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR SEMI PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR SEMI PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR SEMI PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR SEMI PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LT expr [ XOR SUB STAR SEMI PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GT expr [ XOR SUB STAR SEMI PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LE expr [ XOR SUB STAR SEMI PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GE expr [ XOR SUB STAR SEMI PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## instruction -> STAR location EQ expr . SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## STAR location EQ expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE STAR IDENTIFIER EQ XOR
##
## Ends in an error in state: 285.
##
## instruction -> STAR location EQ . expr SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## STAR location EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE STAR IDENTIFIER XOR
##
## Ends in an error in state: 284.
##
## instruction -> STAR location . EQ expr SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## STAR location
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE STAR LPAR IDENTIFIER SEMI
##
## Ends in an error in state: 280.
##
## expr -> expr . STAR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## location -> LPAR expr . RPAR [ EQ ]
##
## The known suffix of the stack is as follows:
## LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE STAR LPAR XOR
##
## Ends in an error in state: 279.
##
## location -> LPAR . expr RPAR [ EQ ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE STAR STAR XOR
##
## Ends in an error in state: 278.
##
## location -> STAR . location [ EQ ]
##
## The known suffix of the stack is as follows:
## STAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE STAR XOR
##
## Ends in an error in state: 277.
##
## instruction -> STAR . location EQ expr SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## STAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE STORE LBRACE UNLOCK RBRACE LPAR IDENTIFIER COMMA IDENTIFIER RPAR XOR
##
## Ends in an error in state: 275.
##
## instruction -> STORE LBRACE annot_list RBRACE LPAR expr COMMA expr RPAR . SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## STORE LBRACE annot_list RBRACE LPAR expr COMMA expr RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE STORE LBRACE UNLOCK RBRACE LPAR IDENTIFIER COMMA IDENTIFIER SEMI
##
## Ends in an error in state: 274.
##
## expr -> expr . STAR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## instruction -> STORE LBRACE annot_list RBRACE LPAR expr COMMA expr . RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## STORE LBRACE annot_list RBRACE LPAR expr COMMA expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE STORE LBRACE UNLOCK RBRACE LPAR IDENTIFIER COMMA XOR
##
## Ends in an error in state: 273.
##
## instruction -> STORE LBRACE annot_list RBRACE LPAR expr COMMA . expr RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## STORE LBRACE annot_list RBRACE LPAR expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE STORE LBRACE UNLOCK RBRACE LPAR IDENTIFIER SEMI
##
## Ends in an error in state: 272.
##
## expr -> expr . STAR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## instruction -> STORE LBRACE annot_list RBRACE LPAR expr . COMMA expr RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## STORE LBRACE annot_list RBRACE LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE STORE LBRACE UNLOCK RBRACE LPAR XOR
##
## Ends in an error in state: 271.
##
## instruction -> STORE LBRACE annot_list RBRACE LPAR . expr COMMA expr RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## STORE LBRACE annot_list RBRACE LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE STORE LBRACE UNLOCK RBRACE XOR
##
## Ends in an error in state: 270.
##
## instruction -> STORE LBRACE annot_list RBRACE . LPAR expr COMMA expr RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## STORE LBRACE annot_list RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE STORE LBRACE XOR
##
## Ends in an error in state: 268.
##
## instruction -> STORE LBRACE . annot_list RBRACE LPAR expr COMMA expr RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## STORE LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE STORE XOR
##
## Ends in an error in state: 267.
##
## instruction -> STORE . LBRACE annot_list RBRACE LPAR expr COMMA expr RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## STORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE ST_EXPLICIT LPAR IDENTIFIER COMMA IDENTIFIER COMMA MEMORDER RPAR XOR
##
## Ends in an error in state: 265.
##
## instruction -> ST_EXPLICIT LPAR expr COMMA expr COMMA MEMORDER RPAR . SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## ST_EXPLICIT LPAR expr COMMA expr COMMA MEMORDER RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE ST_EXPLICIT LPAR IDENTIFIER COMMA IDENTIFIER COMMA MEMORDER XOR
##
## Ends in an error in state: 264.
##
## instruction -> ST_EXPLICIT LPAR expr COMMA expr COMMA MEMORDER . RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## ST_EXPLICIT LPAR expr COMMA expr COMMA MEMORDER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE ST_EXPLICIT LPAR IDENTIFIER COMMA IDENTIFIER COMMA XOR
##
## Ends in an error in state: 263.
##
## instruction -> ST_EXPLICIT LPAR expr COMMA expr COMMA . MEMORDER RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## ST_EXPLICIT LPAR expr COMMA expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE ST_EXPLICIT LPAR IDENTIFIER COMMA IDENTIFIER SEMI
##
## Ends in an error in state: 262.
##
## expr -> expr . STAR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## instruction -> ST_EXPLICIT LPAR expr COMMA expr . COMMA MEMORDER RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## ST_EXPLICIT LPAR expr COMMA expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE ST_EXPLICIT LPAR IDENTIFIER COMMA XOR
##
## Ends in an error in state: 261.
##
## instruction -> ST_EXPLICIT LPAR expr COMMA . expr COMMA MEMORDER RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## ST_EXPLICIT LPAR expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE ST_EXPLICIT LPAR IDENTIFIER SEMI
##
## Ends in an error in state: 260.
##
## expr -> expr . STAR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## instruction -> ST_EXPLICIT LPAR expr . COMMA expr COMMA MEMORDER RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## ST_EXPLICIT LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE ST_EXPLICIT LPAR XOR
##
## Ends in an error in state: 259.
##
## instruction -> ST_EXPLICIT LPAR . expr COMMA expr COMMA MEMORDER RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## ST_EXPLICIT LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE ST_EXPLICIT XOR
##
## Ends in an error in state: 258.
##
## instruction -> ST_EXPLICIT . LPAR expr COMMA expr COMMA MEMORDER RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## ST_EXPLICIT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNDERATOMICOP LPAR IDENTIFIER COMMA SUB COMMA IDENTIFIER RPAR XOR
##
## Ends in an error in state: 256.
##
## instruction -> UNDERATOMICOP LPAR expr COMMA atomic_op COMMA expr RPAR . SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## UNDERATOMICOP LPAR expr COMMA atomic_op COMMA expr RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNDERATOMICOP LPAR IDENTIFIER COMMA SUB COMMA IDENTIFIER SEMI
##
## Ends in an error in state: 255.
##
## expr -> expr . STAR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## instruction -> UNDERATOMICOP LPAR expr COMMA atomic_op COMMA expr . RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## UNDERATOMICOP LPAR expr COMMA atomic_op COMMA expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNDERATOMICOP LPAR IDENTIFIER COMMA SUB COMMA XOR
##
## Ends in an error in state: 254.
##
## instruction -> UNDERATOMICOP LPAR expr COMMA atomic_op COMMA . expr RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## UNDERATOMICOP LPAR expr COMMA atomic_op COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNDERATOMICOP LPAR IDENTIFIER COMMA SUB XOR
##
## Ends in an error in state: 253.
##
## instruction -> UNDERATOMICOP LPAR expr COMMA atomic_op . COMMA expr RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## UNDERATOMICOP LPAR expr COMMA atomic_op
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNDERATOMICOP LPAR IDENTIFIER COMMA XOR
##
## Ends in an error in state: 252.
##
## instruction -> UNDERATOMICOP LPAR expr COMMA . atomic_op COMMA expr RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## UNDERATOMICOP LPAR expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNDERATOMICOP LPAR IDENTIFIER SEMI
##
## Ends in an error in state: 251.
##
## expr -> expr . STAR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## instruction -> UNDERATOMICOP LPAR expr . COMMA atomic_op COMMA expr RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## UNDERATOMICOP LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNDERATOMICOP LPAR XOR
##
## Ends in an error in state: 250.
##
## instruction -> UNDERATOMICOP LPAR . expr COMMA atomic_op COMMA expr RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## UNDERATOMICOP LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNDERATOMICOP XOR
##
## Ends in an error in state: 249.
##
## instruction -> UNDERATOMICOP . LPAR expr COMMA atomic_op COMMA expr RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## UNDERATOMICOP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNDERFENCE LBRACE UNLOCK COMMA XOR
##
## Ends in an error in state: 146.
##
## annot_list -> annot COMMA . annot_list [ RBRACE ]
##
## The known suffix of the stack is as follows:
## annot COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNDERFENCE LBRACE UNLOCK RBRACE XOR
##
## Ends in an error in state: 247.
##
## instruction -> UNDERFENCE LBRACE annot_list RBRACE . SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## UNDERFENCE LBRACE annot_list RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNDERFENCE LBRACE UNLOCK SUB XOR
##
## Ends in an error in state: 143.
##
## annot -> annot_base SUB . annot [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## annot_base SUB
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNDERFENCE LBRACE UNLOCK XOR
##
## Ends in an error in state: 142.
##
## annot -> annot_base . [ RBRACE COMMA ]
## annot -> annot_base . SUB annot [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## annot_base
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNDERFENCE LBRACE XOR
##
## Ends in an error in state: 245.
##
## instruction -> UNDERFENCE LBRACE . annot_list RBRACE SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## UNDERFENCE LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNDERFENCE XOR
##
## Ends in an error in state: 244.
##
## instruction -> UNDERFENCE . LBRACE annot_list RBRACE SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## UNDERFENCE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR ATOMICADDUNLESS LPAR IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER SEMI
##
## Ends in an error in state: 128.
##
## expr -> expr . STAR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> ATOMICADDUNLESS LPAR expr COMMA expr COMMA expr . RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## ATOMICADDUNLESS LPAR expr COMMA expr COMMA expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR ATOMICADDUNLESS LPAR IDENTIFIER COMMA IDENTIFIER COMMA XOR
##
## Ends in an error in state: 127.
##
## expr -> ATOMICADDUNLESS LPAR expr COMMA expr COMMA . expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## ATOMICADDUNLESS LPAR expr COMMA expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR ATOMICADDUNLESS LPAR IDENTIFIER COMMA IDENTIFIER SEMI
##
## Ends in an error in state: 126.
##
## expr -> expr . STAR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> ATOMICADDUNLESS LPAR expr COMMA expr . COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## ATOMICADDUNLESS LPAR expr COMMA expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR ATOMICADDUNLESS LPAR IDENTIFIER COMMA XOR
##
## Ends in an error in state: 125.
##
## expr -> ATOMICADDUNLESS LPAR expr COMMA . expr COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## ATOMICADDUNLESS LPAR expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR ATOMICADDUNLESS LPAR IDENTIFIER SEMI
##
## Ends in an error in state: 98.
##
## expr -> expr . STAR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> ATOMICADDUNLESS LPAR expr . COMMA expr COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## ATOMICADDUNLESS LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR ATOMICADDUNLESS LPAR XOR
##
## Ends in an error in state: 97.
##
## expr -> ATOMICADDUNLESS LPAR . expr COMMA expr COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## ATOMICADDUNLESS LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR ATOMICADDUNLESS XOR
##
## Ends in an error in state: 96.
##
## expr -> ATOMICADDUNLESS . LPAR expr COMMA expr COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## ATOMICADDUNLESS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR ATOMIC_FETCH_EXPLICIT LPAR IDENTIFIER COMMA IDENTIFIER COMMA MEMORDER XOR
##
## Ends in an error in state: 134.
##
## expr -> ATOMIC_FETCH_EXPLICIT LPAR expr COMMA expr COMMA MEMORDER . RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## ATOMIC_FETCH_EXPLICIT LPAR expr COMMA expr COMMA MEMORDER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR ATOMIC_FETCH_EXPLICIT LPAR IDENTIFIER COMMA IDENTIFIER COMMA XOR
##
## Ends in an error in state: 133.
##
## expr -> ATOMIC_FETCH_EXPLICIT LPAR expr COMMA expr COMMA . MEMORDER RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## ATOMIC_FETCH_EXPLICIT LPAR expr COMMA expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR ATOMIC_FETCH_EXPLICIT LPAR IDENTIFIER COMMA IDENTIFIER SEMI
##
## Ends in an error in state: 132.
##
## expr -> expr . STAR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> ATOMIC_FETCH_EXPLICIT LPAR expr COMMA expr . COMMA MEMORDER RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## ATOMIC_FETCH_EXPLICIT LPAR expr COMMA expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR ATOMIC_FETCH_EXPLICIT LPAR IDENTIFIER COMMA XOR
##
## Ends in an error in state: 131.
##
## expr -> ATOMIC_FETCH_EXPLICIT LPAR expr COMMA . expr COMMA MEMORDER RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## ATOMIC_FETCH_EXPLICIT LPAR expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR ATOMIC_FETCH_EXPLICIT LPAR IDENTIFIER SEMI
##
## Ends in an error in state: 130.
##
## expr -> expr . STAR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> ATOMIC_FETCH_EXPLICIT LPAR expr . COMMA expr COMMA MEMORDER RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## ATOMIC_FETCH_EXPLICIT LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR ATOMIC_FETCH_EXPLICIT LPAR XOR
##
## Ends in an error in state: 95.
##
## expr -> ATOMIC_FETCH_EXPLICIT LPAR . expr COMMA expr COMMA MEMORDER RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## ATOMIC_FETCH_EXPLICIT LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR ATOMIC_FETCH_EXPLICIT XOR
##
## Ends in an error in state: 94.
##
## expr -> ATOMIC_FETCH_EXPLICIT . LPAR expr COMMA expr COMMA MEMORDER RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## ATOMIC_FETCH_EXPLICIT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR CMPXCHG LBRACE UNLOCK RBRACE LPAR IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER SEMI
##
## Ends in an error in state: 140.
##
## expr -> expr . STAR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> CMPXCHG LBRACE annot_list RBRACE LPAR expr COMMA expr COMMA expr . RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## CMPXCHG LBRACE annot_list RBRACE LPAR expr COMMA expr COMMA expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR CMPXCHG LBRACE UNLOCK RBRACE LPAR IDENTIFIER COMMA IDENTIFIER COMMA XOR
##
## Ends in an error in state: 139.
##
## expr -> CMPXCHG LBRACE annot_list RBRACE LPAR expr COMMA expr COMMA . expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## CMPXCHG LBRACE annot_list RBRACE LPAR expr COMMA expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR CMPXCHG LBRACE UNLOCK RBRACE LPAR IDENTIFIER COMMA IDENTIFIER SEMI
##
## Ends in an error in state: 138.
##
## expr -> expr . STAR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> CMPXCHG LBRACE annot_list RBRACE LPAR expr COMMA expr . COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## CMPXCHG LBRACE annot_list RBRACE LPAR expr COMMA expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR CMPXCHG LBRACE UNLOCK RBRACE LPAR IDENTIFIER COMMA XOR
##
## Ends in an error in state: 137.
##
## expr -> CMPXCHG LBRACE annot_list RBRACE LPAR expr COMMA . expr COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## CMPXCHG LBRACE annot_list RBRACE LPAR expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR CMPXCHG LBRACE UNLOCK RBRACE LPAR IDENTIFIER SEMI
##
## Ends in an error in state: 136.
##
## expr -> expr . STAR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> CMPXCHG LBRACE annot_list RBRACE LPAR expr . COMMA expr COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## CMPXCHG LBRACE annot_list RBRACE LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR CMPXCHG LBRACE UNLOCK RBRACE LPAR XOR
##
## Ends in an error in state: 93.
##
## expr -> CMPXCHG LBRACE annot_list RBRACE LPAR . expr COMMA expr COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## CMPXCHG LBRACE annot_list RBRACE LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR CMPXCHG LBRACE UNLOCK RBRACE XOR
##
## Ends in an error in state: 92.
##
## expr -> CMPXCHG LBRACE annot_list RBRACE . LPAR expr COMMA expr COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## CMPXCHG LBRACE annot_list RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR CMPXCHG LBRACE XOR
##
## Ends in an error in state: 90.
##
## expr -> CMPXCHG LBRACE . annot_list RBRACE LPAR expr COMMA expr COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## CMPXCHG LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR CMPXCHG XOR
##
## Ends in an error in state: 89.
##
## expr -> CMPXCHG . LBRACE annot_list RBRACE LPAR expr COMMA expr COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## CMPXCHG
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR EXC_EXPLICIT LPAR IDENTIFIER COMMA IDENTIFIER COMMA MEMORDER XOR
##
## Ends in an error in state: 152.
##
## expr -> EXC_EXPLICIT LPAR expr COMMA expr COMMA MEMORDER . RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## EXC_EXPLICIT LPAR expr COMMA expr COMMA MEMORDER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR EXC_EXPLICIT LPAR IDENTIFIER COMMA IDENTIFIER COMMA XOR
##
## Ends in an error in state: 151.
##
## expr -> EXC_EXPLICIT LPAR expr COMMA expr COMMA . MEMORDER RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## EXC_EXPLICIT LPAR expr COMMA expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR EXC_EXPLICIT LPAR IDENTIFIER COMMA IDENTIFIER SEMI
##
## Ends in an error in state: 150.
##
## expr -> expr . STAR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> EXC_EXPLICIT LPAR expr COMMA expr . COMMA MEMORDER RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## EXC_EXPLICIT LPAR expr COMMA expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR EXC_EXPLICIT LPAR IDENTIFIER COMMA XOR
##
## Ends in an error in state: 149.
##
## expr -> EXC_EXPLICIT LPAR expr COMMA . expr COMMA MEMORDER RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## EXC_EXPLICIT LPAR expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR EXC_EXPLICIT LPAR IDENTIFIER SEMI
##
## Ends in an error in state: 148.
##
## expr -> expr . STAR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> EXC_EXPLICIT LPAR expr . COMMA expr COMMA MEMORDER RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## EXC_EXPLICIT LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR EXC_EXPLICIT LPAR XOR
##
## Ends in an error in state: 86.
##
## expr -> EXC_EXPLICIT LPAR . expr COMMA expr COMMA MEMORDER RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## EXC_EXPLICIT LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR EXC_EXPLICIT XOR
##
## Ends in an error in state: 85.
##
## expr -> EXC_EXPLICIT . LPAR expr COMMA expr COMMA MEMORDER RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## EXC_EXPLICIT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR IDENTIFIER ADD CONSTVAR XCHG
##
## Ends in an error in state: 110.
##
## expr -> expr . STAR expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr ADD expr . [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LT expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GT expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LE expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GE expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr ADD expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR IDENTIFIER ADD XOR
##
## Ends in an error in state: 109.
##
## expr -> expr ADD . expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr ADD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR IDENTIFIER DIV XOR
##
## Ends in an error in state: 105.
##
## expr -> expr DIV . expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR IDENTIFIER EQ_OP IDENTIFIER NEQ_OP
##
## Ends in an error in state: 122.
##
## expr -> expr . STAR expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr EQ_OP expr . [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LT expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GT expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LE expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GE expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr EQ_OP expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR IDENTIFIER EQ_OP XOR
##
## Ends in an error in state: 121.
##
## expr -> expr EQ_OP . expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr EQ_OP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR IDENTIFIER GE IDENTIFIER NEQ_OP
##
## Ends in an error in state: 120.
##
## expr -> expr . STAR expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LT expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GT expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LE expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GE expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr GE expr . [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr GE expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR IDENTIFIER GE XOR
##
## Ends in an error in state: 119.
##
## expr -> expr GE . expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr GE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR IDENTIFIER GT IDENTIFIER NEQ_OP
##
## Ends in an error in state: 118.
##
## expr -> expr . STAR expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LT expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GT expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr GT expr . [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LE expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GE expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr GT expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR IDENTIFIER GT XOR
##
## Ends in an error in state: 117.
##
## expr -> expr GT . expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr GT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR IDENTIFIER LAND CONSTVAR XCHG
##
## Ends in an error in state: 116.
##
## expr -> expr . STAR expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr LAND expr . [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LT expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GT expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LE expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GE expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr LAND expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR IDENTIFIER LAND XOR
##
## Ends in an error in state: 115.
##
## expr -> expr LAND . expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr LAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR IDENTIFIER LE IDENTIFIER NEQ_OP
##
## Ends in an error in state: 114.
##
## expr -> expr . STAR expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LT expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GT expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LE expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr LE expr . [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GE expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr LE expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR IDENTIFIER LE XOR
##
## Ends in an error in state: 113.
##
## expr -> expr LE . expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr LE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR IDENTIFIER LPAR XOR
##
## Ends in an error in state: 84.
##
## expr -> IDENTIFIER LPAR . args RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR IDENTIFIER LT IDENTIFIER NEQ_OP
##
## Ends in an error in state: 112.
##
## expr -> expr . STAR expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LT expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr LT expr . [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GT expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LE expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GE expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr LT expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR IDENTIFIER LT XOR
##
## Ends in an error in state: 111.
##
## expr -> expr LT . expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR IDENTIFIER NEQ_OP IDENTIFIER NEQ_OP
##
## Ends in an error in state: 108.
##
## expr -> expr . STAR expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr NEQ_OP expr . [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LT expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GT expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LE expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GE expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr NEQ_OP expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR IDENTIFIER NEQ_OP XOR
##
## Ends in an error in state: 107.
##
## expr -> expr NEQ_OP . expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr NEQ_OP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR IDENTIFIER PIPE CONSTVAR XCHG
##
## Ends in an error in state: 124.
##
## expr -> expr . STAR expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr PIPE expr . [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LT expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GT expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LE expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GE expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr PIPE expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR IDENTIFIER PIPE XOR
##
## Ends in an error in state: 123.
##
## expr -> expr PIPE . expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr PIPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR IDENTIFIER RPAR XOR
##
## Ends in an error in state: 242.
##
## instruction -> UNLOCK LPAR expr RPAR . SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## UNLOCK LPAR expr RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR IDENTIFIER SEMI
##
## Ends in an error in state: 241.
##
## expr -> expr . STAR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## instruction -> UNLOCK LPAR expr . RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## UNLOCK LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR IDENTIFIER STAR XOR
##
## Ends in an error in state: 103.
##
## expr -> expr STAR . expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr STAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR IDENTIFIER SUB CONSTVAR XCHG
##
## Ends in an error in state: 102.
##
## expr -> expr . STAR expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr SUB expr . [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LT expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GT expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LE expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GE expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr SUB expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR IDENTIFIER SUB XOR
##
## Ends in an error in state: 101.
##
## expr -> expr SUB . expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr SUB
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR IDENTIFIER XCHG
##
## Ends in an error in state: 83.
##
## expr -> IDENTIFIER . [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> IDENTIFIER . LPAR args RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR IDENTIFIER XOR CONSTVAR XCHG
##
## Ends in an error in state: 100.
##
## expr -> expr . STAR expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr XOR expr . [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LT expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GT expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LE expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GE expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr XOR expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR IDENTIFIER XOR XOR
##
## Ends in an error in state: 99.
##
## expr -> expr XOR . expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr XOR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR LD_EXPLICIT LPAR IDENTIFIER COMMA MEMORDER XOR
##
## Ends in an error in state: 162.
##
## expr -> LD_EXPLICIT LPAR expr COMMA MEMORDER . RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## LD_EXPLICIT LPAR expr COMMA MEMORDER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR LD_EXPLICIT LPAR IDENTIFIER COMMA XOR
##
## Ends in an error in state: 161.
##
## expr -> LD_EXPLICIT LPAR expr COMMA . MEMORDER RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## LD_EXPLICIT LPAR expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR LD_EXPLICIT LPAR IDENTIFIER SEMI
##
## Ends in an error in state: 160.
##
## expr -> LD_EXPLICIT LPAR expr . COMMA MEMORDER RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . STAR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## LD_EXPLICIT LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR LD_EXPLICIT LPAR XOR
##
## Ends in an error in state: 82.
##
## expr -> LD_EXPLICIT LPAR . expr COMMA MEMORDER RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## LD_EXPLICIT LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR LD_EXPLICIT XOR
##
## Ends in an error in state: 81.
##
## expr -> LD_EXPLICIT . LPAR expr COMMA MEMORDER RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## LD_EXPLICIT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR LOAD LBRACE UNLOCK RBRACE LPAR IDENTIFIER SEMI
##
## Ends in an error in state: 164.
##
## expr -> LOAD LBRACE annot_list RBRACE LPAR expr . RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . STAR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
##
## The known suffix of the stack is as follows:
## LOAD LBRACE annot_list RBRACE LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR LOAD LBRACE UNLOCK RBRACE LPAR XOR
##
## Ends in an error in state: 80.
##
## expr -> LOAD LBRACE annot_list RBRACE LPAR . expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## LOAD LBRACE annot_list RBRACE LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR LOAD LBRACE UNLOCK RBRACE XOR
##
## Ends in an error in state: 79.
##
## expr -> LOAD LBRACE annot_list RBRACE . LPAR expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## LOAD LBRACE annot_list RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR LOAD LBRACE XOR
##
## Ends in an error in state: 77.
##
## expr -> LOAD LBRACE . annot_list RBRACE LPAR expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## LOAD LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR LOAD XOR
##
## Ends in an error in state: 76.
##
## expr -> LOAD . LBRACE annot_list RBRACE LPAR expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## LOAD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR LPAR IDENTIFIER SEMI
##
## Ends in an error in state: 169.
##
## expr -> LPAR expr . RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . STAR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
##
## The known suffix of the stack is as follows:
## LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR LPAR LPAR VOID RPAR XOR
##
## Ends in an error in state: 167.
##
## base -> LPAR typ RPAR . [ VOLATILE STAR RPAR ]
## expr -> LPAR typ RPAR . expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
##
## The known suffix of the stack is as follows:
## LPAR typ RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR LPAR LPAR VOID XOR
##
## Ends in an error in state: 166.
##
## base -> LPAR typ . RPAR [ VOLATILE STAR RPAR ]
## expr -> LPAR typ . RPAR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## typ -> typ . STAR [ VOLATILE STAR RPAR ]
## typ -> typ . VOLATILE [ VOLATILE STAR RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR typ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR LPAR LPAR XOR
##
## Ends in an error in state: 75.
##
## base -> LPAR . typ RPAR [ VOLATILE STAR RPAR ]
## expr -> LPAR . expr RPAR [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> LPAR . typ RPAR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR LPAR VOID RPAR XOR
##
## Ends in an error in state: 172.
##
## expr -> LPAR typ RPAR . expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## LPAR typ RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR LPAR VOID XOR
##
## Ends in an error in state: 171.
##
## expr -> LPAR typ . RPAR expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## typ -> typ . STAR [ VOLATILE STAR RPAR ]
## typ -> typ . VOLATILE [ VOLATILE STAR RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR typ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR LPAR XOR
##
## Ends in an error in state: 74.
##
## expr -> LPAR . expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> LPAR . typ RPAR expr [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR SCAS LPAR IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER SEMI
##
## Ends in an error in state: 177.
##
## expr -> expr . STAR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> SCAS LPAR expr COMMA expr COMMA expr . RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## SCAS LPAR expr COMMA expr COMMA expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR SCAS LPAR IDENTIFIER COMMA IDENTIFIER COMMA XOR
##
## Ends in an error in state: 176.
##
## expr -> SCAS LPAR expr COMMA expr COMMA . expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## SCAS LPAR expr COMMA expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR SCAS LPAR IDENTIFIER COMMA IDENTIFIER SEMI
##
## Ends in an error in state: 175.
##
## expr -> expr . STAR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> SCAS LPAR expr COMMA expr . COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## SCAS LPAR expr COMMA expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR SCAS LPAR IDENTIFIER COMMA XOR
##
## Ends in an error in state: 174.
##
## expr -> SCAS LPAR expr COMMA . expr COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## SCAS LPAR expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR SCAS LPAR IDENTIFIER SEMI
##
## Ends in an error in state: 173.
##
## expr -> expr . STAR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> SCAS LPAR expr . COMMA expr COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## SCAS LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR SCAS LPAR XOR
##
## Ends in an error in state: 73.
##
## expr -> SCAS LPAR . expr COMMA expr COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## SCAS LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR SCAS XOR
##
## Ends in an error in state: 72.
##
## expr -> SCAS . LPAR expr COMMA expr COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## SCAS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR SCAS_EXPLICIT LPAR IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER COMMA MEMORDER COMMA MEMORDER XOR
##
## Ends in an error in state: 187.
##
## expr -> SCAS_EXPLICIT LPAR expr COMMA expr COMMA expr COMMA MEMORDER COMMA MEMORDER . RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## SCAS_EXPLICIT LPAR expr COMMA expr COMMA expr COMMA MEMORDER COMMA MEMORDER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR SCAS_EXPLICIT LPAR IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER COMMA MEMORDER COMMA XOR
##
## Ends in an error in state: 186.
##
## expr -> SCAS_EXPLICIT LPAR expr COMMA expr COMMA expr COMMA MEMORDER COMMA . MEMORDER RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## SCAS_EXPLICIT LPAR expr COMMA expr COMMA expr COMMA MEMORDER COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR SCAS_EXPLICIT LPAR IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER COMMA MEMORDER XOR
##
## Ends in an error in state: 185.
##
## expr -> SCAS_EXPLICIT LPAR expr COMMA expr COMMA expr COMMA MEMORDER . COMMA MEMORDER RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## SCAS_EXPLICIT LPAR expr COMMA expr COMMA expr COMMA MEMORDER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR SCAS_EXPLICIT LPAR IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER COMMA XOR
##
## Ends in an error in state: 184.
##
## expr -> SCAS_EXPLICIT LPAR expr COMMA expr COMMA expr COMMA . MEMORDER COMMA MEMORDER RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## SCAS_EXPLICIT LPAR expr COMMA expr COMMA expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR SCAS_EXPLICIT LPAR IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER SEMI
##
## Ends in an error in state: 183.
##
## expr -> expr . STAR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> SCAS_EXPLICIT LPAR expr COMMA expr COMMA expr . COMMA MEMORDER COMMA MEMORDER RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## SCAS_EXPLICIT LPAR expr COMMA expr COMMA expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR SCAS_EXPLICIT LPAR IDENTIFIER COMMA IDENTIFIER COMMA XOR
##
## Ends in an error in state: 182.
##
## expr -> SCAS_EXPLICIT LPAR expr COMMA expr COMMA . expr COMMA MEMORDER COMMA MEMORDER RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## SCAS_EXPLICIT LPAR expr COMMA expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR SCAS_EXPLICIT LPAR IDENTIFIER COMMA IDENTIFIER SEMI
##
## Ends in an error in state: 181.
##
## expr -> expr . STAR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> SCAS_EXPLICIT LPAR expr COMMA expr . COMMA expr COMMA MEMORDER COMMA MEMORDER RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## SCAS_EXPLICIT LPAR expr COMMA expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR SCAS_EXPLICIT LPAR IDENTIFIER COMMA XOR
##
## Ends in an error in state: 180.
##
## expr -> SCAS_EXPLICIT LPAR expr COMMA . expr COMMA expr COMMA MEMORDER COMMA MEMORDER RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## SCAS_EXPLICIT LPAR expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR SCAS_EXPLICIT LPAR IDENTIFIER SEMI
##
## Ends in an error in state: 179.
##
## expr -> expr . STAR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> SCAS_EXPLICIT LPAR expr . COMMA expr COMMA expr COMMA MEMORDER COMMA MEMORDER RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## SCAS_EXPLICIT LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR SCAS_EXPLICIT LPAR XOR
##
## Ends in an error in state: 71.
##
## expr -> SCAS_EXPLICIT LPAR . expr COMMA expr COMMA expr COMMA MEMORDER COMMA MEMORDER RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## SCAS_EXPLICIT LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR SCAS_EXPLICIT XOR
##
## Ends in an error in state: 70.
##
## expr -> SCAS_EXPLICIT . LPAR expr COMMA expr COMMA expr COMMA MEMORDER COMMA MEMORDER RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## SCAS_EXPLICIT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR SPINISLOCKED LPAR IDENTIFIER SEMI
##
## Ends in an error in state: 189.
##
## expr -> expr . STAR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> SPINISLOCKED LPAR expr . RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## SPINISLOCKED LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR SPINISLOCKED LPAR XOR
##
## Ends in an error in state: 69.
##
## expr -> SPINISLOCKED LPAR . expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## SPINISLOCKED LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR SPINISLOCKED XOR
##
## Ends in an error in state: 68.
##
## expr -> SPINISLOCKED . LPAR expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## SPINISLOCKED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR SPINTRYLOCK LPAR IDENTIFIER SEMI
##
## Ends in an error in state: 191.
##
## expr -> expr . STAR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> SPINTRYLOCK LPAR expr . RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## SPINTRYLOCK LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR SPINTRYLOCK LPAR XOR
##
## Ends in an error in state: 67.
##
## expr -> SPINTRYLOCK LPAR . expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## SPINTRYLOCK LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR SPINTRYLOCK XOR
##
## Ends in an error in state: 66.
##
## expr -> SPINTRYLOCK . LPAR expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## SPINTRYLOCK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR SRCU LBRACE UNLOCK RBRACE LPAR IDENTIFIER SEMI
##
## Ends in an error in state: 193.
##
## expr -> SRCU LBRACE annot_list RBRACE LPAR expr . RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . STAR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
##
## The known suffix of the stack is as follows:
## SRCU LBRACE annot_list RBRACE LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR SRCU LBRACE UNLOCK RBRACE LPAR XOR
##
## Ends in an error in state: 65.
##
## expr -> SRCU LBRACE annot_list RBRACE LPAR . expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## SRCU LBRACE annot_list RBRACE LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR SRCU LBRACE UNLOCK RBRACE XOR
##
## Ends in an error in state: 64.
##
## expr -> SRCU LBRACE annot_list RBRACE . LPAR expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## SRCU LBRACE annot_list RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR SRCU LBRACE XOR
##
## Ends in an error in state: 62.
##
## expr -> SRCU LBRACE . annot_list RBRACE LPAR expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## SRCU LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR SRCU XOR
##
## Ends in an error in state: 61.
##
## expr -> SRCU . LBRACE annot_list RBRACE LPAR expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## SRCU
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR STAR LPAR IDENTIFIER SEMI
##
## Ends in an error in state: 198.
##
## expr -> STAR LPAR expr . RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . STAR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
##
## The known suffix of the stack is as follows:
## STAR LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR STAR LPAR VOID RPAR XOR
##
## Ends in an error in state: 196.
##
## expr -> STAR LPAR typ RPAR . IDENTIFIER [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## STAR LPAR typ RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR STAR LPAR VOID XOR
##
## Ends in an error in state: 195.
##
## expr -> STAR LPAR typ . RPAR IDENTIFIER [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## typ -> typ . STAR [ VOLATILE STAR RPAR ]
## typ -> typ . VOLATILE [ VOLATILE STAR RPAR ]
##
## The known suffix of the stack is as follows:
## STAR LPAR typ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR STAR LPAR XOR
##
## Ends in an error in state: 60.
##
## expr -> STAR LPAR . typ RPAR IDENTIFIER [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> STAR LPAR . expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## STAR LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR STAR XOR
##
## Ends in an error in state: 59.
##
## expr -> STAR . IDENTIFIER [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> STAR . LPAR typ RPAR IDENTIFIER [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> STAR . LPAR expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## STAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR UNDERATOMICADDUNLESS LPAR IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER SEMI
##
## Ends in an error in state: 205.
##
## expr -> expr . STAR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> UNDERATOMICADDUNLESS LPAR expr COMMA expr COMMA expr . RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## UNDERATOMICADDUNLESS LPAR expr COMMA expr COMMA expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR UNDERATOMICADDUNLESS LPAR IDENTIFIER COMMA IDENTIFIER COMMA XOR
##
## Ends in an error in state: 204.
##
## expr -> UNDERATOMICADDUNLESS LPAR expr COMMA expr COMMA . expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## UNDERATOMICADDUNLESS LPAR expr COMMA expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR UNDERATOMICADDUNLESS LPAR IDENTIFIER COMMA IDENTIFIER SEMI
##
## Ends in an error in state: 203.
##
## expr -> expr . STAR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> UNDERATOMICADDUNLESS LPAR expr COMMA expr . COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## UNDERATOMICADDUNLESS LPAR expr COMMA expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR UNDERATOMICADDUNLESS LPAR IDENTIFIER COMMA XOR
##
## Ends in an error in state: 202.
##
## expr -> UNDERATOMICADDUNLESS LPAR expr COMMA . expr COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## UNDERATOMICADDUNLESS LPAR expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR UNDERATOMICADDUNLESS LPAR IDENTIFIER SEMI
##
## Ends in an error in state: 201.
##
## expr -> expr . STAR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> UNDERATOMICADDUNLESS LPAR expr . COMMA expr COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## UNDERATOMICADDUNLESS LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR UNDERATOMICADDUNLESS LPAR XOR
##
## Ends in an error in state: 58.
##
## expr -> UNDERATOMICADDUNLESS LPAR . expr COMMA expr COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## UNDERATOMICADDUNLESS LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR UNDERATOMICADDUNLESS XOR
##
## Ends in an error in state: 57.
##
## expr -> UNDERATOMICADDUNLESS . LPAR expr COMMA expr COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## UNDERATOMICADDUNLESS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR UNDERATOMICFETCHOP LBRACE UNLOCK RBRACE LPAR IDENTIFIER COMMA SUB COMMA IDENTIFIER SEMI
##
## Ends in an error in state: 213.
##
## expr -> expr . STAR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> UNDERATOMICFETCHOP LBRACE annot_list RBRACE LPAR expr COMMA atomic_op COMMA expr . RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## UNDERATOMICFETCHOP LBRACE annot_list RBRACE LPAR expr COMMA atomic_op COMMA expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR UNDERATOMICFETCHOP LBRACE UNLOCK RBRACE LPAR IDENTIFIER COMMA SUB COMMA XOR
##
## Ends in an error in state: 212.
##
## expr -> UNDERATOMICFETCHOP LBRACE annot_list RBRACE LPAR expr COMMA atomic_op COMMA . expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## UNDERATOMICFETCHOP LBRACE annot_list RBRACE LPAR expr COMMA atomic_op COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR UNDERATOMICFETCHOP LBRACE UNLOCK RBRACE LPAR IDENTIFIER COMMA SUB XOR
##
## Ends in an error in state: 211.
##
## expr -> UNDERATOMICFETCHOP LBRACE annot_list RBRACE LPAR expr COMMA atomic_op . COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## UNDERATOMICFETCHOP LBRACE annot_list RBRACE LPAR expr COMMA atomic_op
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR UNDERATOMICFETCHOP LBRACE UNLOCK RBRACE LPAR IDENTIFIER COMMA XOR
##
## Ends in an error in state: 208.
##
## expr -> UNDERATOMICFETCHOP LBRACE annot_list RBRACE LPAR expr COMMA . atomic_op COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## UNDERATOMICFETCHOP LBRACE annot_list RBRACE LPAR expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR UNDERATOMICFETCHOP LBRACE UNLOCK RBRACE LPAR IDENTIFIER SEMI
##
## Ends in an error in state: 207.
##
## expr -> expr . STAR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> UNDERATOMICFETCHOP LBRACE annot_list RBRACE LPAR expr . COMMA atomic_op COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## UNDERATOMICFETCHOP LBRACE annot_list RBRACE LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR UNDERATOMICFETCHOP LBRACE UNLOCK RBRACE LPAR XOR
##
## Ends in an error in state: 56.
##
## expr -> UNDERATOMICFETCHOP LBRACE annot_list RBRACE LPAR . expr COMMA atomic_op COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## UNDERATOMICFETCHOP LBRACE annot_list RBRACE LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR UNDERATOMICFETCHOP LBRACE UNLOCK RBRACE XOR
##
## Ends in an error in state: 55.
##
## expr -> UNDERATOMICFETCHOP LBRACE annot_list RBRACE . LPAR expr COMMA atomic_op COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## UNDERATOMICFETCHOP LBRACE annot_list RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR UNDERATOMICFETCHOP LBRACE XOR
##
## Ends in an error in state: 53.
##
## expr -> UNDERATOMICFETCHOP LBRACE . annot_list RBRACE LPAR expr COMMA atomic_op COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## UNDERATOMICFETCHOP LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR UNDERATOMICFETCHOP XOR
##
## Ends in an error in state: 52.
##
## expr -> UNDERATOMICFETCHOP . LBRACE annot_list RBRACE LPAR expr COMMA atomic_op COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## UNDERATOMICFETCHOP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR UNDERATOMICOPRETURN LBRACE UNLOCK RBRACE LPAR IDENTIFIER COMMA SUB COMMA IDENTIFIER SEMI
##
## Ends in an error in state: 219.
##
## expr -> expr . STAR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> UNDERATOMICOPRETURN LBRACE annot_list RBRACE LPAR expr COMMA atomic_op COMMA expr . RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## UNDERATOMICOPRETURN LBRACE annot_list RBRACE LPAR expr COMMA atomic_op COMMA expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR UNDERATOMICOPRETURN LBRACE UNLOCK RBRACE LPAR IDENTIFIER COMMA SUB COMMA XOR
##
## Ends in an error in state: 218.
##
## expr -> UNDERATOMICOPRETURN LBRACE annot_list RBRACE LPAR expr COMMA atomic_op COMMA . expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## UNDERATOMICOPRETURN LBRACE annot_list RBRACE LPAR expr COMMA atomic_op COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR UNDERATOMICOPRETURN LBRACE UNLOCK RBRACE LPAR IDENTIFIER COMMA SUB XOR
##
## Ends in an error in state: 217.
##
## expr -> UNDERATOMICOPRETURN LBRACE annot_list RBRACE LPAR expr COMMA atomic_op . COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## UNDERATOMICOPRETURN LBRACE annot_list RBRACE LPAR expr COMMA atomic_op
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR UNDERATOMICOPRETURN LBRACE UNLOCK RBRACE LPAR IDENTIFIER COMMA XOR
##
## Ends in an error in state: 216.
##
## expr -> UNDERATOMICOPRETURN LBRACE annot_list RBRACE LPAR expr COMMA . atomic_op COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## UNDERATOMICOPRETURN LBRACE annot_list RBRACE LPAR expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR UNDERATOMICOPRETURN LBRACE UNLOCK RBRACE LPAR IDENTIFIER SEMI
##
## Ends in an error in state: 215.
##
## expr -> expr . STAR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> UNDERATOMICOPRETURN LBRACE annot_list RBRACE LPAR expr . COMMA atomic_op COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## UNDERATOMICOPRETURN LBRACE annot_list RBRACE LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR UNDERATOMICOPRETURN LBRACE UNLOCK RBRACE LPAR XOR
##
## Ends in an error in state: 51.
##
## expr -> UNDERATOMICOPRETURN LBRACE annot_list RBRACE LPAR . expr COMMA atomic_op COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## UNDERATOMICOPRETURN LBRACE annot_list RBRACE LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR UNDERATOMICOPRETURN LBRACE UNLOCK RBRACE XOR
##
## Ends in an error in state: 50.
##
## expr -> UNDERATOMICOPRETURN LBRACE annot_list RBRACE . LPAR expr COMMA atomic_op COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## UNDERATOMICOPRETURN LBRACE annot_list RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR UNDERATOMICOPRETURN LBRACE XOR
##
## Ends in an error in state: 48.
##
## expr -> UNDERATOMICOPRETURN LBRACE . annot_list RBRACE LPAR expr COMMA atomic_op COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## UNDERATOMICOPRETURN LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR UNDERATOMICOPRETURN XOR
##
## Ends in an error in state: 47.
##
## expr -> UNDERATOMICOPRETURN . LBRACE annot_list RBRACE LPAR expr COMMA atomic_op COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## UNDERATOMICOPRETURN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR WCAS LPAR IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER SEMI
##
## Ends in an error in state: 225.
##
## expr -> expr . STAR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> WCAS LPAR expr COMMA expr COMMA expr . RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## WCAS LPAR expr COMMA expr COMMA expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR WCAS LPAR IDENTIFIER COMMA IDENTIFIER COMMA XOR
##
## Ends in an error in state: 224.
##
## expr -> WCAS LPAR expr COMMA expr COMMA . expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## WCAS LPAR expr COMMA expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR WCAS LPAR IDENTIFIER COMMA IDENTIFIER SEMI
##
## Ends in an error in state: 223.
##
## expr -> expr . STAR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> WCAS LPAR expr COMMA expr . COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## WCAS LPAR expr COMMA expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR WCAS LPAR IDENTIFIER COMMA XOR
##
## Ends in an error in state: 222.
##
## expr -> WCAS LPAR expr COMMA . expr COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## WCAS LPAR expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR WCAS LPAR IDENTIFIER SEMI
##
## Ends in an error in state: 221.
##
## expr -> expr . STAR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> WCAS LPAR expr . COMMA expr COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## WCAS LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR WCAS LPAR XOR
##
## Ends in an error in state: 46.
##
## expr -> WCAS LPAR . expr COMMA expr COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## WCAS LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR WCAS XOR
##
## Ends in an error in state: 45.
##
## expr -> WCAS . LPAR expr COMMA expr COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## WCAS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR WCAS_EXPLICIT LPAR IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER COMMA MEMORDER COMMA MEMORDER XOR
##
## Ends in an error in state: 235.
##
## expr -> WCAS_EXPLICIT LPAR expr COMMA expr COMMA expr COMMA MEMORDER COMMA MEMORDER . RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## WCAS_EXPLICIT LPAR expr COMMA expr COMMA expr COMMA MEMORDER COMMA MEMORDER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR WCAS_EXPLICIT LPAR IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER COMMA MEMORDER COMMA XOR
##
## Ends in an error in state: 234.
##
## expr -> WCAS_EXPLICIT LPAR expr COMMA expr COMMA expr COMMA MEMORDER COMMA . MEMORDER RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## WCAS_EXPLICIT LPAR expr COMMA expr COMMA expr COMMA MEMORDER COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR WCAS_EXPLICIT LPAR IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER COMMA MEMORDER XOR
##
## Ends in an error in state: 233.
##
## expr -> WCAS_EXPLICIT LPAR expr COMMA expr COMMA expr COMMA MEMORDER . COMMA MEMORDER RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## WCAS_EXPLICIT LPAR expr COMMA expr COMMA expr COMMA MEMORDER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR WCAS_EXPLICIT LPAR IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER COMMA XOR
##
## Ends in an error in state: 232.
##
## expr -> WCAS_EXPLICIT LPAR expr COMMA expr COMMA expr COMMA . MEMORDER COMMA MEMORDER RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## WCAS_EXPLICIT LPAR expr COMMA expr COMMA expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR WCAS_EXPLICIT LPAR IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER SEMI
##
## Ends in an error in state: 231.
##
## expr -> expr . STAR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> WCAS_EXPLICIT LPAR expr COMMA expr COMMA expr . COMMA MEMORDER COMMA MEMORDER RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## WCAS_EXPLICIT LPAR expr COMMA expr COMMA expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR WCAS_EXPLICIT LPAR IDENTIFIER COMMA IDENTIFIER COMMA XOR
##
## Ends in an error in state: 230.
##
## expr -> WCAS_EXPLICIT LPAR expr COMMA expr COMMA . expr COMMA MEMORDER COMMA MEMORDER RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## WCAS_EXPLICIT LPAR expr COMMA expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR WCAS_EXPLICIT LPAR IDENTIFIER COMMA IDENTIFIER SEMI
##
## Ends in an error in state: 229.
##
## expr -> expr . STAR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> WCAS_EXPLICIT LPAR expr COMMA expr . COMMA expr COMMA MEMORDER COMMA MEMORDER RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## WCAS_EXPLICIT LPAR expr COMMA expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR WCAS_EXPLICIT LPAR IDENTIFIER COMMA XOR
##
## Ends in an error in state: 228.
##
## expr -> WCAS_EXPLICIT LPAR expr COMMA . expr COMMA expr COMMA MEMORDER COMMA MEMORDER RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## WCAS_EXPLICIT LPAR expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR WCAS_EXPLICIT LPAR IDENTIFIER SEMI
##
## Ends in an error in state: 227.
##
## expr -> expr . STAR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> WCAS_EXPLICIT LPAR expr . COMMA expr COMMA expr COMMA MEMORDER COMMA MEMORDER RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## WCAS_EXPLICIT LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR WCAS_EXPLICIT LPAR XOR
##
## Ends in an error in state: 44.
##
## expr -> WCAS_EXPLICIT LPAR . expr COMMA expr COMMA expr COMMA MEMORDER COMMA MEMORDER RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## WCAS_EXPLICIT LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR WCAS_EXPLICIT XOR
##
## Ends in an error in state: 43.
##
## expr -> WCAS_EXPLICIT . LPAR expr COMMA expr COMMA expr COMMA MEMORDER COMMA MEMORDER RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## WCAS_EXPLICIT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR XCHG LBRACE UNLOCK RBRACE LPAR IDENTIFIER COMMA IDENTIFIER SEMI
##
## Ends in an error in state: 239.
##
## expr -> expr . STAR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GT expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GE expr [ XOR SUB STAR RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> XCHG LBRACE annot_list RBRACE LPAR expr COMMA expr . RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## XCHG LBRACE annot_list RBRACE LPAR expr COMMA expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR XCHG LBRACE UNLOCK RBRACE LPAR IDENTIFIER COMMA XOR
##
## Ends in an error in state: 238.
##
## expr -> XCHG LBRACE annot_list RBRACE LPAR expr COMMA . expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## XCHG LBRACE annot_list RBRACE LPAR expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR XCHG LBRACE UNLOCK RBRACE LPAR IDENTIFIER SEMI
##
## Ends in an error in state: 237.
##
## expr -> expr . STAR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GT expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . LE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> expr . GE expr [ XOR SUB STAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
## expr -> XCHG LBRACE annot_list RBRACE LPAR expr . COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## XCHG LBRACE annot_list RBRACE LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR XCHG LBRACE UNLOCK RBRACE LPAR XOR
##
## Ends in an error in state: 42.
##
## expr -> XCHG LBRACE annot_list RBRACE LPAR . expr COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## XCHG LBRACE annot_list RBRACE LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR XCHG LBRACE UNLOCK RBRACE XOR
##
## Ends in an error in state: 41.
##
## expr -> XCHG LBRACE annot_list RBRACE . LPAR expr COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## XCHG LBRACE annot_list RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR XCHG LBRACE XOR
##
## Ends in an error in state: 36.
##
## expr -> XCHG LBRACE . annot_list RBRACE LPAR expr COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## XCHG LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR XCHG XOR
##
## Ends in an error in state: 35.
##
## expr -> XCHG . LBRACE annot_list RBRACE LPAR expr COMMA expr RPAR [ XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV COMMA ADD ]
##
## The known suffix of the stack is as follows:
## XCHG
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK LPAR XOR
##
## Ends in an error in state: 34.
##
## instruction -> UNLOCK LPAR . expr RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## UNLOCK LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE UNLOCK XOR
##
## Ends in an error in state: 33.
##
## instruction -> UNLOCK . LPAR expr RPAR SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
##
## The known suffix of the stack is as follows:
## UNLOCK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE VOID IDENTIFIER EQ IDENTIFIER RPAR
##
## Ends in an error in state: 334.
##
## expr -> expr . STAR expr [ XOR SUB STAR SEMI PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . ADD expr [ XOR SUB STAR SEMI PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . SUB expr [ XOR SUB STAR SEMI PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . DIV expr [ XOR SUB STAR SEMI PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LAND expr [ XOR SUB STAR SEMI PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . PIPE expr [ XOR SUB STAR SEMI PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . XOR expr [ XOR SUB STAR SEMI PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . EQ_OP expr [ XOR SUB STAR SEMI PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . NEQ_OP expr [ XOR SUB STAR SEMI PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LT expr [ XOR SUB STAR SEMI PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GT expr [ XOR SUB STAR SEMI PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . LE expr [ XOR SUB STAR SEMI PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## expr -> expr . GE expr [ XOR SUB STAR SEMI PIPE NEQ_OP LT LE LAND GT GE EQ_OP DIV ADD ]
## initialisation -> typ IDENTIFIER EQ expr . [ SEMI ]
##
## The known suffix of the stack is as follows:
## typ IDENTIFIER EQ expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENTIFIER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE VOID IDENTIFIER EQ XOR
##
## Ends in an error in state: 333.
##
## initialisation -> typ IDENTIFIER EQ . expr [ SEMI ]
##
## The known suffix of the stack is as follows:
## typ IDENTIFIER EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE VOID IDENTIFIER SEMI XOR
##
## Ends in an error in state: 352.
##
## pseudo_seq -> declaration . [ RBRACE ]
## pseudo_seq -> declaration . pseudo_seq [ RBRACE ]
##
## The known suffix of the stack is as follows:
## declaration
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE VOID IDENTIFIER XOR
##
## Ends in an error in state: 342.
##
## declaration -> typ IDENTIFIER . SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
## initialisation -> typ IDENTIFIER . EQ expr [ SEMI ]
##
## The known suffix of the stack is as follows:
## typ IDENTIFIER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE VOID XOR
##
## Ends in an error in state: 341.
##
## declaration -> typ . IDENTIFIER SEMI [ VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STRUCT STORE STAR SRCU SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC ]
## initialisation -> typ . IDENTIFIER EQ expr [ SEMI ]
## typ -> typ . STAR [ VOLATILE STAR IDENTIFIER ]
## typ -> typ . VOLATILE [ VOLATILE STAR IDENTIFIER ]
##
## The known suffix of the stack is as follows:
## typ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR LBRACE XOR
##
## Ends in an error in state: 32.
##
## function_def -> voidopt PROC LPAR parameter_list RPAR LBRACE . pseudo_seq RBRACE [ VOID PROC EOF ]
##
## The known suffix of the stack is as follows:
## voidopt PROC LPAR parameter_list RPAR LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR RPAR XOR
##
## Ends in an error in state: 31.
##
## function_def -> voidopt PROC LPAR parameter_list RPAR . LBRACE pseudo_seq RBRACE [ VOID PROC EOF ]
##
## The known suffix of the stack is as follows:
## voidopt PROC LPAR parameter_list RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR STRUCT XOR
##
## Ends in an error in state: 7.
##
## base0 -> STRUCT . STRUCT_TYPE [ VOLATILE STAR RPAR IDENTIFIER ]
##
## The known suffix of the stack is as follows:
## STRUCT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR VOID STAR IDENTIFIER COMMA XOR
##
## Ends in an error in state: 357.
##
## parameter_list -> parameter_declaration COMMA . parameter_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## parameter_declaration COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR VOID STAR IDENTIFIER XOR
##
## Ends in an error in state: 356.
##
## parameter_list -> parameter_declaration . [ RPAR ]
## parameter_list -> parameter_declaration . COMMA parameter_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## parameter_declaration
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR VOID STAR XOR
##
## Ends in an error in state: 27.
##
## toptyp -> typ STAR . [ IDENTIFIER ]
## typ -> typ STAR . [ VOLATILE STAR ]
##
## The known suffix of the stack is as follows:
## typ STAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR VOID XOR
##
## Ends in an error in state: 26.
##
## toptyp -> typ . STAR [ IDENTIFIER ]
## typ -> typ . STAR [ VOLATILE STAR ]
## typ -> typ . VOLATILE [ VOLATILE STAR ]
##
## The known suffix of the stack is as follows:
## typ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR VOLATILE XOR
##
## Ends in an error in state: 5.
##
## typ -> VOLATILE . base0 [ VOLATILE STAR RPAR IDENTIFIER ]
##
## The known suffix of the stack is as follows:
## VOLATILE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC LPAR XOR
##
## Ends in an error in state: 4.
##
## function_def -> voidopt PROC LPAR . parameter_list RPAR LBRACE pseudo_seq RBRACE [ VOID PROC EOF ]
##
## The known suffix of the stack is as follows:
## voidopt PROC LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: PROC XOR
##
## Ends in an error in state: 3.
##
## function_def -> voidopt PROC . LPAR parameter_list RPAR LBRACE pseudo_seq RBRACE [ VOID PROC EOF ]
##
## The known suffix of the stack is as follows:
## voidopt PROC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: VOID PIPE
##
## Ends in an error in state: 2.
##
## function_def -> voidopt . PROC LPAR parameter_list RPAR LBRACE pseudo_seq RBRACE [ VOID PROC EOF ]
##
## The known suffix of the stack is as follows:
## voidopt
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: XOR
##
## Ends in an error in state: 0.
##
## main' -> . main [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

