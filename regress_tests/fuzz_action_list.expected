# Params
action.cap.lower:
  Value: 20
  Summary:
    Sets the guaranteed number of action passes that the fuzzer will run,
    before any extra actions.
action.cap.upper:
  Value: 1000
  Summary:
    Caps the number of action passes that the fuzzer will run, including any
    extra actions.
action.enable:
  Value: 1:1
  Summary:
    The fuzzer checks this flag once for each action before starting; if the
    flag is false, the action is globally and permanently disabled.
    
    If all actions are disabled, the fuzzer will not perform any
    fuzzing.
    
    Making this flag inexact, as it is by default, means that the fuzzer will
    randomly choose some subset of the available actions.
action.pick-extra:
  Value: 100:1
  Summary:
    Checked every time the fuzzer considers taking an additional action
    (between action.cap.lower and action.cap.upper. If 'true', the fuzzer
    will take the action; if false, it will abandon doing so.
    
    This should usually be an inexact flag, to induce a geometric
    distribution on the number of extra actions.
action.recommendation.accept:
  Value: 1:1
  Summary:
    When the fuzzer receives recommended actions from an action, it evaluates
    this flag for each recommendation, and pushes the recommended action into
    its recommendation queue if the flag is 'true'.
    
    Making this flag inexact, as it is by default, means that the fuzzer will
    sometimes drop recommendations.
action.recommendation.use:
  Value: 1:2
  Summary:
    If 'true', then whenever there is an action at the front of the fuzzer's
    recommended actions queue, it will pick that action instead of making a
    weighted choice from the action deck.
    
    The fuzzer will always pick from the deck if no recommendations are
    available in the queue, regardless of the value of this flag.
    
    Making this flag inexact, as it is by default, means that the fuzzer will
    sometimes pick from the queue and sometimes pick from the deck.
cap.threads:
  Value: 16
  Summary:
    Caps the maximum number of threads that the fuzzer can construct during a
    fuzz run.
    
    If the input to the fuzzer already has more threads than the cap, no more
    threads will be created, but no threads will be removed to meet the
    cap.
    
    If targeting Litmus7, consider capping to the number of logical cores in
    the target machine.
dead.early-out-loop-end.wrap:
  Value: 3:1
  Summary:
    If 'true', loop-end early-out actions wrap the early-out in a truthy if
    statement; else, they emit the early-out directly.
    
    To permit both possibilities, this should be an inexact flag.
mem.unsafe-weaken-orders:
  Value: off
  Summary:
    If 'true', lets actions that would normally strengthen memory orders
    weaken them too (possibly changing semantics in undesirable ways).
var.make.cap:
  Value: 20
  Summary:
    Caps the maximum number of variables(across all scopes) that the fuzzer
    can construct during a fuzz run.
    
    If the input to the fuzzer already has more variables than the cap, no
    more variables will be created, but no variables will be removed to meet
    the cap.
    
    If targeting particular ISA simulators, consider capping to the number of
    parameters that can be passed by register in that ISA.
var.make.global:
  Value: 1:1
  Summary:
    If 'true', variable making actions generate global variables; else, they
    generate local variables over the range of current threads.
    
    To permit both global and local variable generation, this should be an
    inexact flag.
# Weights
atomic.cmpxchg.insert.int.succeed:
  Weight: 30x
  Summary:
    Inserts a strong atomic int compare-exchange, and a new local Boolean
    variable that receives its result.
    
    This compare-exchange guarantees static success by storing the known
    value of a variable to another fresh variable, then using that as the
    'expected' value. This variable will have a known value of 'true'.
    
    This operation generates 'atomic_int's.
atomic.fetch.insert.cond.boundary:
  Weight: 15x
  Summary:
    This action inserts an if statement containing a destructive atomic fetch
    in its condition.
    
    The generated fetch adds or subtracts 1 from its target and checks
    whether the result crossed a boundary with regards to 0.
    
    This action intends to trigger optimisations that replace the fetch-add
    or fetch-sub with a flag test on an atomic add or sub's final value, as
    happens on x86 in LLVM.
    
    This operation generates 'atomic_int's.
atomic.fetch.insert.cond.negated-addend:
  Weight: 15x
  Summary:
    This action inserts an if statement containing a destructive atomic fetch
    in its condition.
    
    The generated fetch subtracts from its target the same value that is
    compared against in the conditional.
    
    This action intends to trigger optimisations that replace the fetch-add
    or fetch-sub with a flag test on an atomic add or sub's final value, as
    happens on x86 in LLVM.
    
    This operation generates 'atomic_int's.
atomic.fetch.insert.int.dead:
  Weight: 20x
  Summary:
    Generates a fetch operation on a randomly selected fuzzer-generated
    global variable.
    
    This variant can target any source and destination, but only inserts into
    dead code. As it only targets dead code, it does not add dependences or
    erase known-values.
    
    This operation generates 'atomic_int's.
atomic.fetch.insert.int.redundant:
  Weight: 15x
  Summary:
    Generates a fetch operation on a randomly selected fuzzer-generated
    global variable.
    
    This variant can insert anywhere, but only fetches the known value of a
    destination back to itself.
    
    This operation generates 'atomic_int's.
atomic.store.insert.int.dead:
  Weight: 20x
  Summary:
    Generates a store operation on a randomly selected fuzzer-generated
    global atomic variable.
    
    This variant can target any source and destination, but only inserts into
    dead code. As it only targets dead code, it does not add dependences or
    erase known-values.
    
    This operation generates 'atomic_int's.
atomic.store.insert.int.normal:
  Weight: 20x
  Summary:
    Generates a store operation on a randomly selected fuzzer-generated
    global atomic variable.
    
    This variant can insert anywhere and target any source and
    destination.
    
    This operation generates 'atomic_int's.
atomic.store.insert.int.redundant:
  Weight: 15x
  Summary:
    Generates a store operation on a randomly selected fuzzer-generated
    global atomic variable.
    
    This variant can insert anywhere, but only stores the known value of a
    destination back to itself.
    
    This operation generates 'atomic_int's.
atomic.store.transform.xchgify:
  Weight: 15x
  Summary:
    Promotes a random atomic store to an atomic exchange whose value is
    discarded.
dead.insert.early-out:
  Weight: 20x
  Summary:
    Inserts a valid 'early-out' statement (break, continue, or return) into a
    random dead-code location.
dead.insert.early-out-loop-end:
  Weight: 20x
  Summary:
    Inserts a continue (or break, if semantically appropriate) onto the end
    of a loop, and marks the area afterwards as dead code.
dead.insert.goto:
  Weight: 20x
  Summary:
    Inserts a jump to a random thread-local label inside a dead-code
    block.
    
    This action only fires in dead-code blocks for which there are available
    labels in the same thread; it does not jump outside the thread.
if.surround.duplicate:
  Weight: 15x
  Summary:
    This action removes a sublist of statements from the program, replacing
    them with if statements containing those statements.
    
    This version of the action generates an arbitrary condition, and
    initialises both branches of the `if` statement with the original
    statements. It cannot fire if the statements contain any labels, to avoid
    duplicating them.
if.surround.tautology:
  Weight: 15x
  Summary:
    This action removes a sublist of statements from the program, replacing
    them with if statements containing those statements.
    
    This version of the action generates an always-true condition, puts the
    original statements in the true block, and marks the false block as
    dead-code.
if.transform.invert:
  Weight: 10x
  Summary: Flips the conditional and branches of an if statement.
lock.surround.atomic:
  Weight: disabled
  Summary:
    This action removes a sublist of statements from the program, replacing
    them with an atomic block containing those statements.
lock.surround.sync:
  Weight: disabled
  Summary:
    This action removes a sublist of statements from the program, replacing
    them with a synchronised block containing those statements.
loop.insert.for.kv-never:
  Weight: 15x
  Summary:
    Introduces a loop that initialises its (fresh) counter to the known value
    of an existing variable and compares it in such a way as to be dead-code.
loop.insert.while.false:
  Weight: 15x
  Summary:
    Inserts an empty while loop whose condition is known to be false, and
    whose body is marked as dead-code for future actions.
loop.surround.do.dead:
  Weight: 10x
  Summary:
    This action removes a sublist of statements from the program, replacing
    them with do loops containing those statements.
    
    This action will only surround portions of dead code, but the condition
    of the `do... while` loop can be anything.
loop.surround.do.false:
  Weight: 15x
  Summary:
    This action removes a sublist of statements from the program, replacing
    them with do loops containing those statements.
    
    The condition of the `do... while` loop is statically guaranteed to be
    false, meaning the loop will iterate only once.
loop.surround.for.dead:
  Weight: 10x
  Summary:
    This action removes a sublist of statements from the program, replacing
    them with for-loops containing those statements.
    
    This action introduces arbitrary, occasionally nonsensical for loops into
    dead code.
loop.surround.for.kv-once:
  Weight: 10x
  Summary:
    This action removes a sublist of statements from the program, replacing
    them with for-loops containing those statements.
    
    The for loop initialises its (fresh) counter to the known value of an
    existing variable and compares it in such a way as to execute only once.
loop.surround.for.simple:
  Weight: 15x
  Summary:
    This action removes a sublist of statements from the program, replacing
    them with for-loops containing those statements.
    
    The for loop initialises its (fresh) counter to zero, then counts upwards
    to a random, small, constant value. This action does not surround
    non-generated or loop-unsafe statements.
loop.surround.while.dead:
  Weight: 10x
  Summary:
    This action removes a sublist of statements from the program, replacing
    them with while loops containing those statements.
    
    This action will only surround portions of dead code, but the condition
    of the `while` loop can be anything.
mem.fence:
  Weight: 15x
  Summary: Inserts a randomly generated memory fence into the test.
mem.strengthen:
  Weight: 15x
  Summary:
    Replaces the memory order of a random atomic statement (not an atomic
    expression) with another memory order.
    
    Usually, this will only perform the replacement when the new memory order
    is compatible with the atomic action and also stronger than the old one.
    If 'mem.unsafe-weaken-orders' is true, this action will permit weakening
    of memory orders, likely resulting in a loss of semantics preservation.
nop:
  Weight: 5x
  Summary:
    Does nothing, but consumes an action step.
    
    This action is automatically executed if no other actions are available
    during a step. If a weight is assigned to it in the action table, it will
    also occasionally substitute for a real action; this is one way to
    introduce variance into the action count.
program.label:
  Weight: 15x
  Summary: Inserts a new, random label into the program.
program.make.empty:
  Weight: 10x
  Summary:
    Generates a new, empty program at one end of the program list. This
    action isn't very useful on its own, but works well in combination with
    other actions that construct statements and control flows.
var.assign.insert.int.dead:
  Weight: 20x
  Summary:
    Generates an assign operation on a randomly selected fuzzer-generated
    variable.
    
    This variant can target any source and destination, but only inserts into
    dead code. As it only targets dead code, it does not add dependences or
    erase known-values.
    
    This operation generates 'int's.
var.assign.insert.int.normal:
  Weight: 20x
  Summary:
    Generates an assign operation on a randomly selected fuzzer-generated
    variable.
    
    This variant can insert anywhere and target any source and
    destination.
    
    This operation generates 'int's.
var.assign.insert.int.redundant:
  Weight: 15x
  Summary:
    Generates an assign operation on a randomly selected fuzzer-generated
    variable.
    
    This variant can insert anywhere, but only stores the known value of a
    destination back to itself.
    
    This operation generates 'int's.
var.make:
  Weight: 20x
  Summary:
    Generates a new variable, with a random name, initial value, and
    primitive type.
    
    If the 'var.make.global' flag is set, the variable will be global; else,
    it'll be a local variable assigned to a random thread.
var.volatile:
  Weight: 25x
  Summary: Adds the 'volatile' qualifier to a local variable.
