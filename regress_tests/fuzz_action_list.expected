flow.dead.early-out:
  Weight: 15x
  Summary:
    Inserts a valid 'early-out' statement (break or return) into a random
    dead-code location.
flow.if.duplicate:
  Weight: 15x
  Summary:
    Removes a sublist of statements from the program, replacing them with an
    `if` statement containing some transformation of the removed
    statements.
    
    This version of the action generates an arbitrary condition, and
    initialises both branches of the `if` statement with the original
    statements.
flow.if.tautology:
  Weight: 25x
  Summary:
    Removes a sublist of statements from the program, replacing them with an
    `if` statement containing some transformation of the removed
    statements.
    
    This version of the action generates an always-true condition, puts the
    original statements in the true block, and marks the false block as
    dead-code.
flow.invert-if:
  Weight: 10x
  Summary: Flips the conditional and branches of an if statement.
flow.loop.surround:
  Weight: 20x
  Summary:
    Removes a sublist of statements from the program, replacing them with a
    `do... while` statement containing some transformation of the removed
    statements.
    
    The condition of the `do... while` loop is statically guaranteed to be
    false.
mem.fence:
  Weight: 15x
  Summary: Inserts a randomly generated memory fence into the test.
program.label:
  Weight: 10x
  Summary: Inserts a new, random label into the program.
program.make.empty:
  Weight: 10x
  Summary:
    Generates a new, empty program at one end of the program list. This
    action isn't very useful on its own, but works well in combination with
    other actions that construct statements and control flows.
store.make.int.dead:
  Weight: 20x
  Summary:
    Generates a store operation on a randomly selected fuzzer-generated
    global variable.
    
    If 'store.forbid-already-written' is true, this action will only store to
    variables that haven't previously been selected for store actions. This
    makes calculating candidate executions easier, but limits the degree of
    entropy somewhat. (Note that if the value is stochastic, the action will
    only fire if such variables exist, but may or may not proceed to select a
    previously-stored variable. This is a limitation of the flag system.)
    
    This variant can target any source and destination, but only inserts into
    dead code. As it only targets dead code, it does not add dependences or
    erase known-values.
    
    This operation generates 'atomic_int's.
store.make.int.normal:
  Weight: 30x
  Summary:
    Generates a store operation on a randomly selected fuzzer-generated
    global variable.
    
    If 'store.forbid-already-written' is true, this action will only store to
    variables that haven't previously been selected for store actions. This
    makes calculating candidate executions easier, but limits the degree of
    entropy somewhat. (Note that if the value is stochastic, the action will
    only fire if such variables exist, but may or may not proceed to select a
    previously-stored variable. This is a limitation of the flag system.)
    
    This variant can insert anywhere and target any source and
    destination.
    
    This operation generates 'atomic_int's.
store.make.int.redundant:
  Weight: 15x
  Summary:
    Generates a store operation on a randomly selected fuzzer-generated
    global variable.
    
    If 'store.forbid-already-written' is true, this action will only store to
    variables that haven't previously been selected for store actions. This
    makes calculating candidate executions easier, but limits the degree of
    entropy somewhat. (Note that if the value is stochastic, the action will
    only fire if such variables exist, but may or may not proceed to select a
    previously-stored variable. This is a limitation of the flag system.)
    
    This variant can insert anywhere, but only stores the known value of a
    destination back to itself.
    
    This operation generates 'atomic_int's.
var.make.global:
  Weight: 20x
  Summary:
    Generates a new global variable, with a random name, initial value, and
    primitive type.
