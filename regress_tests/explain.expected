# Explainer tests

## clang_macho_o3_xchg.s

```
-- program 0
_P0:  # <-- label {unused label, program boundary}
pushl %EBP # <-- stack {manipulates stack}
movl %ESP, %EBP # <-- move {manipulates stack}
movl $2, %EAX # <-- move
xchgl %EAX, _x # <-- RMW
movl $1, %EAX # <-- move
xchgl %EAX, _y # <-- RMW
popl %EBP # <-- stack {manipulates stack}
retl # <-- return
-- program 1
_P1:  # <-- label {unused label, program boundary}
pushl %EBP # <-- stack {manipulates stack}
movl %ESP, %EBP # <-- move {manipulates stack}
movl $2, %EAX # <-- move
xchgl %EAX, _y # <-- RMW
movl $1, %EAX # <-- move
xchgl %EAX, _x # <-- RMW
popl %EBP # <-- stack {manipulates stack}
retl # <-- return
```
## gcc_elf_o0_stackchk.s

```
-- program 0
P0:  # <-- label {unused label, program boundary}
pushl %EBP # <-- stack {manipulates stack}
movl %ESP, %EBP # <-- move {manipulates stack}
subl $24, %ESP # <-- arith {manipulates stack}
movl %GS:20, %EAX # <-- move
movl %EAX, -12(%EBP) # <-- move
xorl %EAX, %EAX # <-- logical
movl $2, -20(%EBP) # <-- move
movl -20(%EBP), %EAX # <-- move
movl %EAX, y # <-- move
mfence # <-- fence
movl x, %EAX # <-- move
movl %EAX, -16(%EBP) # <-- move
movl -16(%EBP), %EAX # <-- move
movl %EAX, t0r0 # <-- move
movl -12(%EBP), %EAX # <-- move
xorl %GS:20, %EAX # <-- logical
je .L2 # <-- jump
call __stack_chk_fail # <-- call
.L2:  # <-- label
leave # <-- call
ret # <-- return
-- program 1
P1:  # <-- label {unused label, program boundary}
pushl %EBP # <-- stack {manipulates stack}
movl %ESP, %EBP # <-- move {manipulates stack}
subl $24, %ESP # <-- arith {manipulates stack}
movl %GS:20, %EAX # <-- move
movl %EAX, -12(%EBP) # <-- move
xorl %EAX, %EAX # <-- logical
movl $1, -20(%EBP) # <-- move
movl -20(%EBP), %EAX # <-- move
movl %EAX, x # <-- move
mfence # <-- fence
movl $1, -16(%EBP) # <-- move
movl -16(%EBP), %EAX # <-- move
movl %EAX, y # <-- move
mfence # <-- fence
movl -12(%EBP), %EAX # <-- move
xorl %GS:20, %EAX # <-- logical
je .L4 # <-- jump
call __stack_chk_fail # <-- call
.L4:  # <-- label
leave # <-- call
ret # <-- return
```
## gcc_macho_o0_deref_cmpxchg.s

```
-- program 0
_P0:  # <-- label {unused label, program boundary}
pushl %EBP # <-- stack {manipulates stack}
movl %ESP, %EBP # <-- move {manipulates stack}
subl $16, %ESP # <-- arith {manipulates stack}
movl $0, _t0r0 # <-- move
movl $_x, -4(%EBP) # <-- move
movl $2, -8(%EBP) # <-- move
movl -8(%EBP), %EAX # <-- move
movl %EAX, %EDX # <-- move
movl -4(%EBP), %ECX # <-- move
movl _t0r0, %EAX # <-- move
lock cmpxchgl %EDX, (%ECX) # <-- RMW
movl %EAX, %EDX # <-- move
sete %AL # <-- ??
testb %AL, %AL # <-- ??
jne L3 # <-- jump
movl %EDX, _t0r0 # <-- move
L3:  # <-- label
leave # <-- call
ret # <-- return
-- program 1
_P1:  # <-- label {unused label, program boundary}
pushl %EBP # <-- stack {manipulates stack}
movl %ESP, %EBP # <-- move {manipulates stack}
subl $16, %ESP # <-- arith {manipulates stack}
movl $_x, -4(%EBP) # <-- move
movl $1, -8(%EBP) # <-- move
movl -8(%EBP), %EAX # <-- move
movl %EAX, %EDX # <-- move
movl -4(%EBP), %EAX # <-- move
movl %EDX, (%EAX) # <-- move
leave # <-- call
ret # <-- return
```
## gcc_macho_o0_deref_write.s

```
-- program 0
_P0:  # <-- label {unused label, program boundary}
pushl %EBP # <-- stack {manipulates stack}
movl %ESP, %EBP # <-- move {manipulates stack}
subl $16, %ESP # <-- arith {manipulates stack}
movl $_y, -4(%EBP) # <-- move
movl -4(%EBP), %EAX # <-- move
movl (%EAX), %EAX # <-- move
movl %EAX, -8(%EBP) # <-- move
movl -8(%EBP), %EAX # <-- move
movl %EAX, _t0r0 # <-- move
movl _t0r0, %EAX # <-- move
cmpl $1, %EAX # <-- compare
jne L3 # <-- jump
movl $1, _x # <-- move
L3:  # <-- label
leave # <-- call
ret # <-- return
-- program 1
_P1:  # <-- label {unused label, program boundary}
pushl %EBP # <-- stack {manipulates stack}
movl %ESP, %EBP # <-- move {manipulates stack}
subl $16, %ESP # <-- arith {manipulates stack}
movl _x, %EAX # <-- move
movl %EAX, _t1r0 # <-- move
movl _t1r0, %EAX # <-- move
cmpl $1, %EAX # <-- compare
jne L6 # <-- jump
movl $_y, -4(%EBP) # <-- move
movl $1, -8(%EBP) # <-- move
movl -8(%EBP), %EAX # <-- move
movl %EAX, %EDX # <-- move
movl -4(%EBP), %EAX # <-- move
movl %EDX, (%EAX) # <-- move
L6:  # <-- label
leave # <-- call
ret # <-- return
```
## gcc_macho_o0_immediate_heap.s

```
-- program 0
_P0:  # <-- label {unused label, program boundary}
pushl %EBP # <-- stack {manipulates stack}
movl %ESP, %EBP # <-- move {manipulates stack}
subl $16, %ESP # <-- arith {manipulates stack}
movl $_x, -4(%EBP) # <-- move
movl -4(%EBP), %EAX # <-- move
movl (%EAX), %EAX # <-- move
movl %EAX, -12(%EBP) # <-- move
movl -12(%EBP), %EAX # <-- move
movl %EAX, _t0r0 # <-- move
movl $_y, -8(%EBP) # <-- move
movl $1, -16(%EBP) # <-- move
movl -16(%EBP), %EAX # <-- move
movl %EAX, %EDX # <-- move
movl -8(%EBP), %EAX # <-- move
movl %EDX, (%EAX) # <-- move
leave # <-- call
ret # <-- return
-- program 1
_P1:  # <-- label {unused label, program boundary}
pushl %EBP # <-- stack {manipulates stack}
movl %ESP, %EBP # <-- move {manipulates stack}
subl $16, %ESP # <-- arith {manipulates stack}
movl $_y, -4(%EBP) # <-- move
movl $2, -12(%EBP) # <-- move
movl -12(%EBP), %EAX # <-- move
movl %EAX, %EDX # <-- move
movl -4(%EBP), %EAX # <-- move
movl %EDX, (%EAX) # <-- move
movl $_x, -8(%EBP) # <-- move
movl $1, -16(%EBP) # <-- move
movl -16(%EBP), %EAX # <-- move
movl %EAX, %EDX # <-- move
movl -8(%EBP), %EAX # <-- move
movl %EDX, (%EAX) # <-- move
leave # <-- call
ret # <-- return
```
## gcc_macho_o0_moves.s

```
-- program 0
_P0:  # <-- label {unused label, program boundary}
pushl %EBP # <-- stack {manipulates stack}
movl %ESP, %EBP # <-- move {manipulates stack}
subl $16, %ESP # <-- arith {manipulates stack}
movl _y, %EAX # <-- move
movl %EAX, -4(%EBP) # <-- move
movl -4(%EBP), %EAX # <-- move
movl %EAX, _t0r0 # <-- move
movl _t0r0, %EAX # <-- move
cmpl $1, %EAX # <-- compare
jne L3 # <-- jump
movl $1, _x # <-- move
L3:  # <-- label
leave # <-- call
ret # <-- return
-- program 1
_P1:  # <-- label {unused label, program boundary}
pushl %EBP # <-- stack {manipulates stack}
movl %ESP, %EBP # <-- move {manipulates stack}
subl $16, %ESP # <-- arith {manipulates stack}
movl _x, %EAX # <-- move
movl %EAX, _t1r0 # <-- move
movl _t1r0, %EAX # <-- move
cmpl $1, %EAX # <-- compare
jne L6 # <-- jump
movl $1, -4(%EBP) # <-- move
movl -4(%EBP), %EAX # <-- move
movl %EAX, _y # <-- move
mfence # <-- fence
L6:  # <-- label
leave # <-- call
ret # <-- return
```

Ran 6 test(s).
