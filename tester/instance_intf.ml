(* This file is part of 'act'.

   Copyright (c) 2018, 2019 by Matt Windsor

   Permission is hereby granted, free of charge, to any person
   obtaining a copy of this software and associated documentation
   files (the "Software"), to deal in the Software without
   restriction, including without limitation the rights to use, copy,
   modify, merge, publish, distribute, sublicense, and/or sell copies
   of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be
   included in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
   NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
   BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
   ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
   CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE. *)

open Base
open Lib
open Utils

(** [Basic_common] is the signature common to all [Basic]
   signatures. *)
module type Basic_common = sig
  module T : Timing.S
  (** The module to use for timing the various tester passes. *)

  val o : Output.t
  (** [o] tells the tester how to output warnings, errors, and
      other information. *)

  val herd_cfg : Herd.Config.t option
  (** [herd_cfg], if present, tells the tester how to run Herd. *)

  val sanitiser_passes : Sanitiser_pass.Set.t
  (** [sanitiser_passes] is the set of sanitiser passes the tester
      should use. *)
end

(** [Basic_compiler] contains all the various modules and components
    needed to run tests on one compiler. *)
module type Basic_compiler = sig
  include Basic_common

  module C : Compiler.S
  (** The compiler interface for this compiler. *)

  module R : Asm_job.Runner
  (** A runner for performing tasks on the assembly generated by
     [C]. *)

  val ps : Pathset.t
  (** [ps] tells the tester where it can find input files, and where
      it should put output files, for this compiler. *)

  val c_litmus_mode : Run_config.C_litmus_mode.t

  include Compiler.With_spec
    (** [Basic_compiler] instances must provide a compiler spec and ID. *)
end

(** User-facing interface for running compiler tests
    on a single compiler. *)
module type Compiler = sig
  val run : string list -> Analysis.Compiler.t Or_error.t
  (** [run c_fnames] runs tests on each filename in [c_fnames],
      returning a compiler-level analysis. *)
end


(** [Basic_machine] contains all the various modules and components
    needed to run tests on one machine. *)
module type Basic_machine = sig
  include Basic_common

  val compilers : Compiler.Spec.Set.t
  (** [compilers] is the set of all enabled compilers for this
     machine. *)

  module Resolve_compiler
    : Compiler.S_resolver
      with type spec = Compiler.Spec.With_id.t
       and type 'a chain_input = 'a Compiler.Chain_input.t
  (** Module used to resolve compiler specs to compiler modules. *)

  val asm_runner_from_spec
    :  Compiler.Spec.With_id.t
    -> (module Asm_job.Runner) Or_error.t
  (** [asm_runner_from_spec cspec] tries to get an [Asm_job.Runner]
      corresponding to [cspec]'s target architecture. *)
end

module type Machine = sig
  val run : Run_config.t -> Analysis.Machine.t Or_error.t
    (** [run cfg] runs tests on each filename listed in [cfg], using
       every machine-local compiler in [specs] also listed in [cfg],
       to belong to the same machine), reading from directories in
       [cfg]'s [in_root] and writing to directories in its [out_root],
       and returning a machine-level analysis. *)
end

module type Basic = sig
  include Basic_machine
end

module type S = sig
  val run : Run_config.t -> Analysis.t Or_error.t
end
