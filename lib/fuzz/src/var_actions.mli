(* The Automagic Compiler Tormentor

   Copyright (c) 2018--2019 Matt Windsor and contributors

   ACT itself is licensed under the MIT License. See the LICENSE file in the
   project root for more information.

   ACT is based in part on code from the Herdtools7 project
   (https://github.com/herd/herdtools7) : see the LICENSE.herd file in the
   project root for more information. *)

(** Fuzzer actions for manipulating variables. *)

val make_global_flag_key : Act_common.Id.t
(** [make_global_flag_key] is the flag key used to look up whether or not the
    {!Make} action should make globals (conversely, locals). *)

(** Random state required for {!Make}. *)
module Make_payload : sig
  type t =
    { basic_type: Act_fir.Type.Basic.t
    ; initial_value: Act_fir.Constant.t
    ; var: Act_common.Litmus_id.t }
  [@@deriving compare, sexp]

  val quickcheck_observer : t Base_quickcheck.Observer.t
  (** [quickcheck_observer] is an observer for make-payloads. *)

  val quickcheck_shrinker : t Base_quickcheck.Shrinker.t
  (** [quickcheck_shrinker] is an shrinker for make-payloads. *)

  val generator :
       Var.Map.t
    -> gen_scope:Act_common.Scope.t Base_quickcheck.Generator.t
    -> t Base_quickcheck.Generator.t
  (** [generator vars gen_scope] constructs a Quickcheck generator for
      payloads over the variable map [map] with scopes generated by [scope]. *)
end

(** Fuzzer action that generates a new variable. *)
module Make : Action_types.S with type Payload.t = Make_payload.t

(** Fuzzer action that makes existing local variables volatile. *)
module Volatile : Action_types.S with type Payload.t = Act_common.Litmus_id.t
