translation_unit: ENUM LBRACE LIT_TRUE COMMA XOR_EQ
##
## Ends in an error in state: 54.
##
## separated_nonempty_list(COMMA,enumerator) -> enumerator COMMA . separated_nonempty_list(COMMA,enumerator) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## enumerator COMMA
##

<54 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: ENUM LBRACE LIT_TRUE EQ STRING XOR_EQ
##
## Ends in an error in state: 53.
##
## separated_nonempty_list(COMMA,enumerator) -> enumerator . [ RBRACE ]
## separated_nonempty_list(COMMA,enumerator) -> enumerator . COMMA separated_nonempty_list(COMMA,enumerator) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## enumerator
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 138, spurious reduction of production unary_expression -> postfix_expression 
## In state 136, spurious reduction of production cast_expression -> unary_expression 
## In state 153, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 144, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 167, spurious reduction of production shift_expression -> additive_expression 
## In state 140, spurious reduction of production relational_expression -> shift_expression 
## In state 160, spurious reduction of production equality_expression -> relational_expression 
## In state 178, spurious reduction of production and_expression -> equality_expression 
## In state 186, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 187, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 188, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 172, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 170, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 238, spurious reduction of production constant_expression -> conditional_expression 
## In state 258, spurious reduction of production option(preceded(EQ,constant_expression)) -> EQ constant_expression 
## In state 259, spurious reduction of production enumerator -> c_identifier option(preceded(EQ,constant_expression)) 
##

<53 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: ENUM LBRACE LIT_TRUE EQ XOR_EQ
##
## Ends in an error in state: 57.
##
## option(preceded(EQ,constant_expression)) -> EQ . constant_expression [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## EQ
##

<57 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: ENUM LBRACE LIT_TRUE XOR_EQ
##
## Ends in an error in state: 56.
##
## enumerator -> c_identifier . option(preceded(EQ,constant_expression)) [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## c_identifier
##

<56 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: ENUM LBRACE XOR_EQ
##
## Ends in an error in state: 49.
##
## enum_specifier -> ENUM option(c_identifier) LBRACE . loption(separated_nonempty_list(COMMA,enumerator)) RBRACE [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME STRUCT STATIC STAR SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## ENUM option(c_identifier) LBRACE
##

<49 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: ENUM LIT_TRUE XOR_EQ
##
## Ends in an error in state: 260.
##
## enum_specifier -> ENUM c_identifier . [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME STRUCT STATIC STAR SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## option(c_identifier) -> c_identifier . [ LBRACE ]
##
## The known suffix of the stack is as follows:
## ENUM c_identifier
##

<260 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: ENUM XOR_EQ
##
## Ends in an error in state: 47.
##
## enum_specifier -> ENUM . option(c_identifier) LBRACE loption(separated_nonempty_list(COMMA,enumerator)) RBRACE [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME STRUCT STATIC STAR SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## enum_specifier -> ENUM . c_identifier [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME STRUCT STATIC STAR SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## ENUM
##

<47 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACE ATOMIC XOR_EQ
##
## Ends in an error in state: 347.
##
## tx_statement -> ATOMIC . compound_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## ATOMIC
##

Keyword `atomic` must be followed by a block

translation_unit: IDENTIFIER LBRACE CASE XOR_EQ
##
## Ends in an error in state: 344.
##
## label -> CASE . constant_expression [ COLON ]
##
## The known suffix of the stack is as follows:
## CASE
##

<344 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACE DEFAULT XOR_EQ
##
## Ends in an error in state: 361.
##
## labelled_statement(closed_statement) -> label . COLON closed_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
## labelled_statement(open_statement) -> label . COLON open_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## label
##

<361 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACE DO IF LPAR CHAR_LIT RPAR SEMI VOLATILE
##
## Ends in an error in state: 353.
##
## iteration_statement(open_statement) -> DO open_statement . WHILE LPAR expression RPAR [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## DO open_statement
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 372, spurious reduction of production statement -> closed_statement 
## In state 368, spurious reduction of production one_selection_statement -> if_clause statement 
## In state 358, spurious reduction of production open_statement -> one_selection_statement 
##

<353 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACE DO IF LPAR CHAR_LIT RPAR SEMI WHILE LPAR STRING WHILE
##
## Ends in an error in state: 356.
##
## expression -> expression . COMMA assignment_expression [ RPAR COMMA ]
## iteration_statement(open_statement) -> DO open_statement WHILE LPAR expression . RPAR [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## DO open_statement WHILE LPAR expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 138, spurious reduction of production unary_expression -> postfix_expression 
## In state 136, spurious reduction of production cast_expression -> unary_expression 
## In state 153, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 144, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 167, spurious reduction of production shift_expression -> additive_expression 
## In state 140, spurious reduction of production relational_expression -> shift_expression 
## In state 160, spurious reduction of production equality_expression -> relational_expression 
## In state 178, spurious reduction of production and_expression -> equality_expression 
## In state 186, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 187, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 188, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 172, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 170, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 191, spurious reduction of production assignment_expression -> conditional_expression 
## In state 208, spurious reduction of production expression -> assignment_expression 
##

<356 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACE DO IF LPAR CHAR_LIT RPAR SEMI WHILE LPAR XOR_EQ
##
## Ends in an error in state: 355.
##
## iteration_statement(open_statement) -> DO open_statement WHILE LPAR . expression RPAR [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## DO open_statement WHILE LPAR
##

<355 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACE DO IF LPAR CHAR_LIT RPAR SEMI WHILE XOR_EQ
##
## Ends in an error in state: 354.
##
## iteration_statement(open_statement) -> DO open_statement WHILE . LPAR expression RPAR [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## DO open_statement WHILE
##

<354 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACE DO SEMI WHILE LPAR STRING WHILE
##
## Ends in an error in state: 381.
##
## expression -> expression . COMMA assignment_expression [ RPAR COMMA ]
## iteration_statement(closed_statement) -> DO closed_statement WHILE LPAR expression . RPAR [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## DO closed_statement WHILE LPAR expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 138, spurious reduction of production unary_expression -> postfix_expression 
## In state 136, spurious reduction of production cast_expression -> unary_expression 
## In state 153, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 144, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 167, spurious reduction of production shift_expression -> additive_expression 
## In state 140, spurious reduction of production relational_expression -> shift_expression 
## In state 160, spurious reduction of production equality_expression -> relational_expression 
## In state 178, spurious reduction of production and_expression -> equality_expression 
## In state 186, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 187, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 188, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 172, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 170, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 191, spurious reduction of production assignment_expression -> conditional_expression 
## In state 208, spurious reduction of production expression -> assignment_expression 
##

<381 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACE DO SEMI WHILE LPAR XOR_EQ
##
## Ends in an error in state: 380.
##
## iteration_statement(closed_statement) -> DO closed_statement WHILE LPAR . expression RPAR [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## DO closed_statement WHILE LPAR
##

<380 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACE DO SEMI WHILE XOR_EQ
##
## Ends in an error in state: 379.
##
## iteration_statement(closed_statement) -> DO closed_statement WHILE . LPAR expression RPAR [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## DO closed_statement WHILE
##

<379 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACE DO SEMI XOR_EQ
##
## Ends in an error in state: 378.
##
## iteration_statement(closed_statement) -> DO closed_statement . WHILE LPAR expression RPAR [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## DO closed_statement
##

<378 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACE DO XOR_EQ
##
## Ends in an error in state: 341.
##
## iteration_statement(closed_statement) -> DO . closed_statement WHILE LPAR expression RPAR [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
## iteration_statement(open_statement) -> DO . open_statement WHILE LPAR expression RPAR [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## DO
##

Expected a valid statement as the body of this 'do...while' loop

translation_unit: IDENTIFIER LBRACE FOR LPAR SEMI SEMI RPAR XOR_EQ
##
## Ends in an error in state: 340.
##
## iteration_statement(closed_statement) -> FOR LPAR option(expression) SEMI option(expression) SEMI option(expression) RPAR . closed_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
## iteration_statement(open_statement) -> FOR LPAR option(expression) SEMI option(expression) SEMI option(expression) RPAR . open_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## FOR LPAR option(expression) SEMI option(expression) SEMI option(expression) RPAR
##

Expected a valid statement as the body of this 'for' loop

translation_unit: IDENTIFIER LBRACE FOR LPAR SEMI SEMI STRING RETURN
##
## Ends in an error in state: 339.
##
## iteration_statement(closed_statement) -> FOR LPAR option(expression) SEMI option(expression) SEMI option(expression) . RPAR closed_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
## iteration_statement(open_statement) -> FOR LPAR option(expression) SEMI option(expression) SEMI option(expression) . RPAR open_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## FOR LPAR option(expression) SEMI option(expression) SEMI option(expression)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 138, spurious reduction of production unary_expression -> postfix_expression 
## In state 136, spurious reduction of production cast_expression -> unary_expression 
## In state 153, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 144, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 167, spurious reduction of production shift_expression -> additive_expression 
## In state 140, spurious reduction of production relational_expression -> shift_expression 
## In state 160, spurious reduction of production equality_expression -> relational_expression 
## In state 178, spurious reduction of production and_expression -> equality_expression 
## In state 186, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 187, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 188, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 172, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 170, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 191, spurious reduction of production assignment_expression -> conditional_expression 
## In state 208, spurious reduction of production expression -> assignment_expression 
## In state 326, spurious reduction of production option(expression) -> expression 
##

Expected a right parenthesis after the update section of this 'for' loop

translation_unit: IDENTIFIER LBRACE FOR LPAR SEMI SEMI XOR_EQ
##
## Ends in an error in state: 338.
##
## iteration_statement(closed_statement) -> FOR LPAR option(expression) SEMI option(expression) SEMI . option(expression) RPAR closed_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
## iteration_statement(open_statement) -> FOR LPAR option(expression) SEMI option(expression) SEMI . option(expression) RPAR open_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## FOR LPAR option(expression) SEMI option(expression) SEMI
##

Expected a valid expression (or blank) in the update section of this 'for' loop

translation_unit: IDENTIFIER LBRACE FOR LPAR SEMI STRING RPAR
##
## Ends in an error in state: 337.
##
## iteration_statement(closed_statement) -> FOR LPAR option(expression) SEMI option(expression) . SEMI option(expression) RPAR closed_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
## iteration_statement(open_statement) -> FOR LPAR option(expression) SEMI option(expression) . SEMI option(expression) RPAR open_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## FOR LPAR option(expression) SEMI option(expression)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 138, spurious reduction of production unary_expression -> postfix_expression 
## In state 136, spurious reduction of production cast_expression -> unary_expression 
## In state 153, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 144, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 167, spurious reduction of production shift_expression -> additive_expression 
## In state 140, spurious reduction of production relational_expression -> shift_expression 
## In state 160, spurious reduction of production equality_expression -> relational_expression 
## In state 178, spurious reduction of production and_expression -> equality_expression 
## In state 186, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 187, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 188, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 172, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 170, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 191, spurious reduction of production assignment_expression -> conditional_expression 
## In state 208, spurious reduction of production expression -> assignment_expression 
## In state 326, spurious reduction of production option(expression) -> expression 
##

Expected a semicolon after the condition section of this 'for' loop
(followed by an update section)

translation_unit: IDENTIFIER LBRACE FOR LPAR SEMI XOR_EQ
##
## Ends in an error in state: 336.
##
## iteration_statement(closed_statement) -> FOR LPAR option(expression) SEMI . option(expression) SEMI option(expression) RPAR closed_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
## iteration_statement(open_statement) -> FOR LPAR option(expression) SEMI . option(expression) SEMI option(expression) RPAR open_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## FOR LPAR option(expression) SEMI
##

Expected a valid expression (or blank) in the condition section of this 'for' loop

translation_unit: IDENTIFIER LBRACE FOR LPAR STRING RPAR
##
## Ends in an error in state: 335.
##
## iteration_statement(closed_statement) -> FOR LPAR option(expression) . SEMI option(expression) SEMI option(expression) RPAR closed_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
## iteration_statement(open_statement) -> FOR LPAR option(expression) . SEMI option(expression) SEMI option(expression) RPAR open_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## FOR LPAR option(expression)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 138, spurious reduction of production unary_expression -> postfix_expression 
## In state 136, spurious reduction of production cast_expression -> unary_expression 
## In state 153, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 144, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 167, spurious reduction of production shift_expression -> additive_expression 
## In state 140, spurious reduction of production relational_expression -> shift_expression 
## In state 160, spurious reduction of production equality_expression -> relational_expression 
## In state 178, spurious reduction of production and_expression -> equality_expression 
## In state 186, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 187, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 188, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 172, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 170, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 191, spurious reduction of production assignment_expression -> conditional_expression 
## In state 208, spurious reduction of production expression -> assignment_expression 
## In state 326, spurious reduction of production option(expression) -> expression 
##

Expected a semicolon after the initialiser section of this 'for' loop
(followed by condition and update sections)

translation_unit: IDENTIFIER LBRACE FOR LPAR XOR_EQ
##
## Ends in an error in state: 334.
##
## iteration_statement(closed_statement) -> FOR LPAR . option(expression) SEMI option(expression) SEMI option(expression) RPAR closed_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
## iteration_statement(open_statement) -> FOR LPAR . option(expression) SEMI option(expression) SEMI option(expression) RPAR open_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## FOR LPAR
##

Expected a valid expression (or blank) in the initialiser section of this 'for' loop
(note that C99-style arbitrary initialisers are not yet supported)

translation_unit: IDENTIFIER LBRACE FOR XOR_EQ
##
## Ends in an error in state: 333.
##
## iteration_statement(closed_statement) -> FOR . LPAR option(expression) SEMI option(expression) SEMI option(expression) RPAR closed_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
## iteration_statement(open_statement) -> FOR . LPAR option(expression) SEMI option(expression) SEMI option(expression) RPAR open_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## FOR
##

Expected an opening parenthesis after 'for'

translation_unit: IDENTIFIER LBRACE GOTO XOR_EQ
##
## Ends in an error in state: 331.
##
## jump_statement -> GOTO . c_identifier [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## GOTO
##

<331 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACE IF LPAR CHAR_LIT RPAR SEMI ELSE XOR_EQ
##
## Ends in an error in state: 373.
##
## closed_statement -> if_clause closed_statement ELSE . closed_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
## open_statement -> if_clause closed_statement ELSE . open_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## if_clause closed_statement ELSE
##

<373 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACE IF LPAR CHAR_LIT RPAR SEMI XOR_EQ
##
## Ends in an error in state: 372.
##
## closed_statement -> if_clause closed_statement . ELSE closed_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
## open_statement -> if_clause closed_statement . ELSE open_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
## statement -> closed_statement . [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## if_clause closed_statement
##

<372 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACE IF LPAR CHAR_LIT RPAR XOR_EQ
##
## Ends in an error in state: 367.
##
## closed_statement -> if_clause . closed_statement ELSE closed_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
## one_selection_statement -> if_clause . statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
## open_statement -> if_clause . closed_statement ELSE open_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## if_clause
##

<367 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACE IF LPAR STRING WHILE
##
## Ends in an error in state: 329.
##
## expression -> expression . COMMA assignment_expression [ RPAR COMMA ]
## if_clause -> IF LPAR expression . RPAR [ WHILE SYNCHRONIZED SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RETURN NOT LPAR LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT DO DEFAULT CONTINUE CHAR_LIT CASE BREAK ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## IF LPAR expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 138, spurious reduction of production unary_expression -> postfix_expression 
## In state 136, spurious reduction of production cast_expression -> unary_expression 
## In state 153, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 144, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 167, spurious reduction of production shift_expression -> additive_expression 
## In state 140, spurious reduction of production relational_expression -> shift_expression 
## In state 160, spurious reduction of production equality_expression -> relational_expression 
## In state 178, spurious reduction of production and_expression -> equality_expression 
## In state 186, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 187, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 188, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 172, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 170, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 191, spurious reduction of production assignment_expression -> conditional_expression 
## In state 208, spurious reduction of production expression -> assignment_expression 
##

<329 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACE IF LPAR XOR_EQ
##
## Ends in an error in state: 328.
##
## if_clause -> IF LPAR . expression RPAR [ WHILE SYNCHRONIZED SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RETURN NOT LPAR LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT DO DEFAULT CONTINUE CHAR_LIT CASE BREAK ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## IF LPAR
##

<328 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACE IF XOR_EQ
##
## Ends in an error in state: 327.
##
## if_clause -> IF . LPAR expression RPAR [ WHILE SYNCHRONIZED SWITCH SUBSUB SUB STRING STAR SIZEOF SEMI RETURN NOT LPAR LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT IF IDENTIFIER GOTO FOR FLOAT_LIT DO DEFAULT CONTINUE CHAR_LIT CASE BREAK ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## IF
##

<327 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACE LIT_TRUE COLON XOR_EQ
##
## Ends in an error in state: 362.
##
## labelled_statement(closed_statement) -> label COLON . closed_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
## labelled_statement(open_statement) -> label COLON . open_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## label COLON
##

<362 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACE LIT_TRUE WHILE
##
## Ends in an error in state: 376.
##
## label -> c_identifier . [ COLON ]
## primary_expression -> c_identifier . [ XOR_EQ XOR SUB_EQ SUBSUB SUB STAR_EQ STAR SHR_EQ SHR SHL_EQ SHL SEMI QUESTION PIPE_EQ PIPE NEQ_OP MOD_EQ MOD LT LPAR LOR LE LBRACK LAND GT GE EQ_OP EQ DOT DIV_EQ DIV COMMA ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## c_identifier
##

Expected an operator, or a ':' to introduce a label

translation_unit: IDENTIFIER LBRACE RETURN XOR_EQ
##
## Ends in an error in state: 324.
##
## jump_statement -> RETURN . option(expression) [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## RETURN
##

<324 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACE SEMI XOR_EQ
##
## Ends in an error in state: 394.
##
## list(block_item) -> block_item . list(block_item) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## block_item
##

<394 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACE STRING COMMA XOR_EQ
##
## Ends in an error in state: 190.
##
## expression -> expression COMMA . assignment_expression [ XOR_EQ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHORT SHL_EQ SEMI RPAR RETURN REGISTER RBRACK RBRACE PIPE_EQ NOT MOD_EQ LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN EQ ENUM ELSE DOUBLE DO DIV_EQ DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## expression COMMA
##

<190 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACE STRING RBRACK
##
## Ends in an error in state: 326.
##
## expression -> expression . COMMA assignment_expression [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RPAR RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST COMMA CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
## option(expression) -> expression . [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RPAR RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 138, spurious reduction of production unary_expression -> postfix_expression 
## In state 136, spurious reduction of production cast_expression -> unary_expression 
## In state 153, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 144, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 167, spurious reduction of production shift_expression -> additive_expression 
## In state 140, spurious reduction of production relational_expression -> shift_expression 
## In state 160, spurious reduction of production equality_expression -> relational_expression 
## In state 178, spurious reduction of production and_expression -> equality_expression 
## In state 186, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 187, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 188, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 172, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 170, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 191, spurious reduction of production assignment_expression -> conditional_expression 
## In state 208, spurious reduction of production expression -> assignment_expression 
##

<326 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACE STRING RPAR
##
## Ends in an error in state: 351.
##
## expression_statement -> option(expression) . SEMI [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## option(expression)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 138, spurious reduction of production unary_expression -> postfix_expression 
## In state 136, spurious reduction of production cast_expression -> unary_expression 
## In state 153, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 144, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 167, spurious reduction of production shift_expression -> additive_expression 
## In state 140, spurious reduction of production relational_expression -> shift_expression 
## In state 160, spurious reduction of production equality_expression -> relational_expression 
## In state 178, spurious reduction of production and_expression -> equality_expression 
## In state 186, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 187, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 188, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 172, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 170, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 191, spurious reduction of production assignment_expression -> conditional_expression 
## In state 208, spurious reduction of production expression -> assignment_expression 
## In state 326, spurious reduction of production option(expression) -> expression 
##

<351 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACE STRING XOR_EQ XOR_EQ
##
## Ends in an error in state: 203.
##
## assignment_expression -> conditional_expression assignment_operator . assignment_expression [ XOR_EQ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHORT SHL_EQ SEMI RPAR RETURN REGISTER RBRACK RBRACE PIPE_EQ NOT MOD_EQ LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN EQ ENUM ELSE DOUBLE DO DIV_EQ DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## conditional_expression assignment_operator
##

<203 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACE SWITCH LPAR STRING RPAR XOR_EQ
##
## Ends in an error in state: 323.
##
## closed_statement -> SWITCH LPAR expression RPAR . closed_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
## open_statement -> SWITCH LPAR expression RPAR . open_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## SWITCH LPAR expression RPAR
##

<323 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACE SWITCH LPAR STRING WHILE
##
## Ends in an error in state: 322.
##
## closed_statement -> SWITCH LPAR expression . RPAR closed_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
## expression -> expression . COMMA assignment_expression [ RPAR COMMA ]
## open_statement -> SWITCH LPAR expression . RPAR open_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## SWITCH LPAR expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 138, spurious reduction of production unary_expression -> postfix_expression 
## In state 136, spurious reduction of production cast_expression -> unary_expression 
## In state 153, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 144, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 167, spurious reduction of production shift_expression -> additive_expression 
## In state 140, spurious reduction of production relational_expression -> shift_expression 
## In state 160, spurious reduction of production equality_expression -> relational_expression 
## In state 178, spurious reduction of production and_expression -> equality_expression 
## In state 186, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 187, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 188, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 172, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 170, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 191, spurious reduction of production assignment_expression -> conditional_expression 
## In state 208, spurious reduction of production expression -> assignment_expression 
##

<322 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACE SWITCH LPAR XOR_EQ
##
## Ends in an error in state: 321.
##
## closed_statement -> SWITCH LPAR . expression RPAR closed_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
## open_statement -> SWITCH LPAR . expression RPAR open_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## SWITCH LPAR
##

<321 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACE SWITCH XOR_EQ
##
## Ends in an error in state: 320.
##
## closed_statement -> SWITCH . LPAR expression RPAR closed_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
## open_statement -> SWITCH . LPAR expression RPAR open_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## SWITCH
##

<320 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACE SYNCHRONIZED XOR_EQ
##
## Ends in an error in state: 318.
##
## tx_statement -> SYNCHRONIZED . compound_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## SYNCHRONIZED
##

Keyword `synchronized` must be followed by a block

translation_unit: IDENTIFIER LBRACE WHILE LPAR STRING RPAR XOR_EQ
##
## Ends in an error in state: 317.
##
## iteration_statement(closed_statement) -> WHILE LPAR expression RPAR . closed_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
## iteration_statement(open_statement) -> WHILE LPAR expression RPAR . open_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## WHILE LPAR expression RPAR
##

<317 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACE WHILE LPAR STRING WHILE
##
## Ends in an error in state: 316.
##
## expression -> expression . COMMA assignment_expression [ RPAR COMMA ]
## iteration_statement(closed_statement) -> WHILE LPAR expression . RPAR closed_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
## iteration_statement(open_statement) -> WHILE LPAR expression . RPAR open_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## WHILE LPAR expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 138, spurious reduction of production unary_expression -> postfix_expression 
## In state 136, spurious reduction of production cast_expression -> unary_expression 
## In state 153, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 144, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 167, spurious reduction of production shift_expression -> additive_expression 
## In state 140, spurious reduction of production relational_expression -> shift_expression 
## In state 160, spurious reduction of production equality_expression -> relational_expression 
## In state 178, spurious reduction of production and_expression -> equality_expression 
## In state 186, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 187, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 188, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 172, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 170, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 191, spurious reduction of production assignment_expression -> conditional_expression 
## In state 208, spurious reduction of production expression -> assignment_expression 
##

<316 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACE WHILE LPAR XOR_EQ
##
## Ends in an error in state: 315.
##
## iteration_statement(closed_statement) -> WHILE LPAR . expression RPAR closed_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
## iteration_statement(open_statement) -> WHILE LPAR . expression RPAR open_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## WHILE LPAR
##

<315 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACE WHILE XOR_EQ
##
## Ends in an error in state: 314.
##
## iteration_statement(closed_statement) -> WHILE . LPAR expression RPAR closed_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
## iteration_statement(open_statement) -> WHILE . LPAR expression RPAR open_statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## WHILE
##

<314 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACE XOR_EQ
##
## Ends in an error in state: 313.
##
## compound_statement -> LBRACE . list(block_item) RBRACE [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN EOF ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<313 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACK LPAR STRING WHILE
##
## Ends in an error in state: 223.
##
## expression -> expression . COMMA assignment_expression [ RPAR COMMA ]
## primary_expression -> LPAR expression . RPAR [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACK LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DOT DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ATOMIC ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## LPAR expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 138, spurious reduction of production unary_expression -> postfix_expression 
## In state 136, spurious reduction of production cast_expression -> unary_expression 
## In state 153, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 144, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 167, spurious reduction of production shift_expression -> additive_expression 
## In state 140, spurious reduction of production relational_expression -> shift_expression 
## In state 160, spurious reduction of production equality_expression -> relational_expression 
## In state 178, spurious reduction of production and_expression -> equality_expression 
## In state 186, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 187, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 188, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 172, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 170, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 191, spurious reduction of production assignment_expression -> conditional_expression 
## In state 208, spurious reduction of production expression -> assignment_expression 
##

<223 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACK LPAR VOLATILE IDENTIFIER
##
## Ends in an error in state: 229.
##
## type_name -> nonempty_list(specifier_qualifier) . option(abstract_declarator) [ RPAR ]
##
## The known suffix of the stack is as follows:
## nonempty_list(specifier_qualifier)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 76, spurious reduction of production nonempty_list(specifier_qualifier) -> specifier_qualifier 
##

<229 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACK LPAR VOLATILE LPAR XOR_EQ
##
## Ends in an error in state: 231.
##
## direct_abstract_declarator -> LPAR . abstract_declarator RPAR [ RPAR LPAR LBRACK ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<231 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACK LPAR VOLATILE RPAR XOR_EQ
##
## Ends in an error in state: 227.
##
## cast_expression -> LPAR type_name RPAR . cast_expression [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## LPAR type_name RPAR
##

<227 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACK LPAR VOLATILE STAR COMMA
##
## Ends in an error in state: 226.
##
## cast_expression -> LPAR type_name . RPAR cast_expression [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## LPAR type_name
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 81, spurious reduction of production list(type_qualifier) -> 
## In state 84, spurious reduction of production nonempty_list(preceded(STAR,list(type_qualifier))) -> STAR list(type_qualifier) 
## In state 92, spurious reduction of production pointer -> nonempty_list(preceded(STAR,list(type_qualifier))) 
## In state 113, spurious reduction of production abstract_declarator -> pointer 
## In state 234, spurious reduction of production option(abstract_declarator) -> abstract_declarator 
## In state 233, spurious reduction of production type_name -> nonempty_list(specifier_qualifier) option(abstract_declarator) 
##

<226 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACK LPAR VOLATILE STAR IDENTIFIER
##
## Ends in an error in state: 230.
##
## abstract_declarator -> option(pointer) . direct_abstract_declarator [ RPAR ]
##
## The known suffix of the stack is as follows:
## option(pointer)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 81, spurious reduction of production list(type_qualifier) -> 
## In state 84, spurious reduction of production nonempty_list(preceded(STAR,list(type_qualifier))) -> STAR list(type_qualifier) 
## In state 92, spurious reduction of production pointer -> nonempty_list(preceded(STAR,list(type_qualifier))) 
## In state 113, spurious reduction of production option(pointer) -> pointer 
##

<230 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACK LPAR XOR_EQ
##
## Ends in an error in state: 128.
##
## cast_expression -> LPAR . type_name RPAR cast_expression [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND_EQ AND ADD_EQ ADDADD ADD ]
## primary_expression -> LPAR . expression RPAR [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACK LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DOT DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ATOMIC ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<128 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACK SIZEOF LPAR CHAR RPAR LIT_OR
##
## Ends in an error in state: 144.
##
## additive_expression -> multiplicative_expression . [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DO DIV_EQ DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND_EQ AND ADD_EQ ADDADD ADD ]
## multiplicative_expression -> multiplicative_expression . multiplicative_operator cast_expression [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## multiplicative_expression
##

<144 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACK SIZEOF LPAR VOLATILE STAR COMMA
##
## Ends in an error in state: 69.
##
## unary_expression -> SIZEOF LPAR type_name . RPAR [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## SIZEOF LPAR type_name
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 81, spurious reduction of production list(type_qualifier) -> 
## In state 84, spurious reduction of production nonempty_list(preceded(STAR,list(type_qualifier))) -> STAR list(type_qualifier) 
## In state 92, spurious reduction of production pointer -> nonempty_list(preceded(STAR,list(type_qualifier))) 
## In state 113, spurious reduction of production abstract_declarator -> pointer 
## In state 234, spurious reduction of production option(abstract_declarator) -> abstract_declarator 
## In state 233, spurious reduction of production type_name -> nonempty_list(specifier_qualifier) option(abstract_declarator) 
##

<69 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACK SIZEOF LPAR XOR_EQ
##
## Ends in an error in state: 63.
##
## unary_expression -> SIZEOF LPAR . type_name RPAR [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## SIZEOF LPAR
##

<63 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACK SIZEOF XOR_EQ
##
## Ends in an error in state: 62.
##
## unary_expression -> SIZEOF . LPAR type_name RPAR [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND_EQ AND ADD_EQ ADDADD ADD ]
## unary_operator_unary -> SIZEOF . [ SUBSUB SUB STRING STAR SIZEOF NOT LPAR LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS INT_LIT IDENTIFIER FLOAT_LIT CHAR_LIT AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## SIZEOF
##

<62 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACK STRING AND XOR_EQ
##
## Ends in an error in state: 184.
##
## and_expression -> and_expression AND . equality_expression [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHORT SHL_EQ SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT MOD_EQ LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE LAND INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN EQ ENUM ELSE DOUBLE DO DIV_EQ DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## and_expression AND
##

<184 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACK STRING DOT XOR_EQ
##
## Ends in an error in state: 220.
##
## postfix_expression -> postfix_expression field_access . c_identifier [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACK LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DOT DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ATOMIC ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## postfix_expression field_access
##

<220 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACK STRING LAND XOR_EQ
##
## Ends in an error in state: 173.
##
## logical_and_expression -> logical_and_expression LAND . inclusive_or_expression [ XOR_EQ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHORT SHL_EQ SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ NOT MOD_EQ LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE LAND INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN EQ ENUM ELSE DOUBLE DO DIV_EQ DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## logical_and_expression LAND
##

<173 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACK STRING LBRACK STRING WHILE
##
## Ends in an error in state: 215.
##
## expression -> expression . COMMA assignment_expression [ RBRACK COMMA ]
## postfix_expression -> postfix_expression LBRACK expression . RBRACK [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACK LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DOT DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ATOMIC ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## postfix_expression LBRACK expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 138, spurious reduction of production unary_expression -> postfix_expression 
## In state 136, spurious reduction of production cast_expression -> unary_expression 
## In state 153, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 144, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 167, spurious reduction of production shift_expression -> additive_expression 
## In state 140, spurious reduction of production relational_expression -> shift_expression 
## In state 160, spurious reduction of production equality_expression -> relational_expression 
## In state 178, spurious reduction of production and_expression -> equality_expression 
## In state 186, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 187, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 188, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 172, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 170, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 191, spurious reduction of production assignment_expression -> conditional_expression 
## In state 208, spurious reduction of production expression -> assignment_expression 
##

<215 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACK STRING LBRACK XOR_EQ
##
## Ends in an error in state: 214.
##
## postfix_expression -> postfix_expression LBRACK . expression RBRACK [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACK LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DOT DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ATOMIC ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## postfix_expression LBRACK
##

<214 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACK STRING LIT_OR
##
## Ends in an error in state: 138.
##
## postfix_expression -> postfix_expression . LBRACK expression RBRACK [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACK LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DOT DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ATOMIC ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
## postfix_expression -> postfix_expression . LPAR loption(separated_nonempty_list(COMMA,assignment_expression)) RPAR [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACK LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DOT DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ATOMIC ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
## postfix_expression -> postfix_expression . field_access c_identifier [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACK LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DOT DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ATOMIC ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
## postfix_expression -> postfix_expression . inc_or_dec_operator [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACK LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DOT DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ATOMIC ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
## unary_expression -> postfix_expression . [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## postfix_expression
##

<138 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACK STRING LOR XOR_EQ
##
## Ends in an error in state: 209.
##
## logical_or_expression -> logical_or_expression LOR . logical_and_expression [ XOR_EQ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHORT SHL_EQ SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ NOT MOD_EQ LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN EQ ENUM ELSE DOUBLE DO DIV_EQ DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## logical_or_expression LOR
##

<209 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACK STRING LPAR STRING COMMA XOR_EQ
##
## Ends in an error in state: 212.
##
## separated_nonempty_list(COMMA,assignment_expression) -> assignment_expression COMMA . separated_nonempty_list(COMMA,assignment_expression) [ RPAR ]
##
## The known suffix of the stack is as follows:
## assignment_expression COMMA
##

<212 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACK STRING LPAR STRING WHILE
##
## Ends in an error in state: 211.
##
## separated_nonempty_list(COMMA,assignment_expression) -> assignment_expression . [ RPAR ]
## separated_nonempty_list(COMMA,assignment_expression) -> assignment_expression . COMMA separated_nonempty_list(COMMA,assignment_expression) [ RPAR ]
##
## The known suffix of the stack is as follows:
## assignment_expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 138, spurious reduction of production unary_expression -> postfix_expression 
## In state 136, spurious reduction of production cast_expression -> unary_expression 
## In state 153, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 144, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 167, spurious reduction of production shift_expression -> additive_expression 
## In state 140, spurious reduction of production relational_expression -> shift_expression 
## In state 160, spurious reduction of production equality_expression -> relational_expression 
## In state 178, spurious reduction of production and_expression -> equality_expression 
## In state 186, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 187, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 188, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 172, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 170, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 191, spurious reduction of production assignment_expression -> conditional_expression 
##

Expected parenthesis, comma, or a valid continuation of this argument expression

translation_unit: IDENTIFIER LBRACK STRING LPAR XOR_EQ
##
## Ends in an error in state: 139.
##
## postfix_expression -> postfix_expression LPAR . loption(separated_nonempty_list(COMMA,assignment_expression)) RPAR [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACK LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DOT DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ATOMIC ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## postfix_expression LPAR
##

<139 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACK STRING LT XOR_EQ
##
## Ends in an error in state: 165.
##
## relational_expression -> relational_expression relational_operator . shift_expression [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHORT SHL_EQ SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DO DIV_EQ DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## relational_expression relational_operator
##

<165 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACK STRING NEQ_OP XOR_EQ
##
## Ends in an error in state: 181.
##
## equality_expression -> equality_expression equality_operator . relational_expression [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHORT SHL_EQ SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE LAND INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DO DIV_EQ DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## equality_expression equality_operator
##

<181 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACK STRING PIPE XOR_EQ
##
## Ends in an error in state: 175.
##
## inclusive_or_expression -> inclusive_or_expression PIPE . exclusive_or_expression [ XOR_EQ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHORT SHL_EQ SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT MOD_EQ LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE LAND INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN EQ ENUM ELSE DOUBLE DO DIV_EQ DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## inclusive_or_expression PIPE
##

<175 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACK STRING QUESTION STRING COLON XOR_EQ
##
## Ends in an error in state: 206.
##
## conditional_expression -> logical_or_expression QUESTION expression COLON . expression [ XOR_EQ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHORT SHL_EQ SEMI RPAR RETURN REGISTER RBRACK RBRACE PIPE_EQ NOT MOD_EQ LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN EQ ENUM ELSE DOUBLE DO DIV_EQ DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## logical_or_expression QUESTION expression COLON
##

<206 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACK STRING QUESTION STRING WHILE
##
## Ends in an error in state: 189.
##
## conditional_expression -> logical_or_expression QUESTION expression . COLON expression [ XOR_EQ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHORT SHL_EQ SEMI RPAR RETURN REGISTER RBRACK RBRACE PIPE_EQ NOT MOD_EQ LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN EQ ENUM ELSE DOUBLE DO DIV_EQ DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND_EQ AND ADD_EQ ADDADD ADD ]
## expression -> expression . COMMA assignment_expression [ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## logical_or_expression QUESTION expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 138, spurious reduction of production unary_expression -> postfix_expression 
## In state 136, spurious reduction of production cast_expression -> unary_expression 
## In state 153, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 144, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 167, spurious reduction of production shift_expression -> additive_expression 
## In state 140, spurious reduction of production relational_expression -> shift_expression 
## In state 160, spurious reduction of production equality_expression -> relational_expression 
## In state 178, spurious reduction of production and_expression -> equality_expression 
## In state 186, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 187, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 188, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 172, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 170, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 191, spurious reduction of production assignment_expression -> conditional_expression 
## In state 208, spurious reduction of production expression -> assignment_expression 
##

<189 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACK STRING QUESTION XOR_EQ
##
## Ends in an error in state: 171.
##
## conditional_expression -> logical_or_expression QUESTION . expression COLON expression [ XOR_EQ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHORT SHL_EQ SEMI RPAR RETURN REGISTER RBRACK RBRACE PIPE_EQ NOT MOD_EQ LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN EQ ENUM ELSE DOUBLE DO DIV_EQ DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## logical_or_expression QUESTION
##

<171 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACK STRING RBRACE
##
## Ends in an error in state: 247.
##
## direct_declarator -> direct_declarator LBRACK option(constant_expression) . RBRACK [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME STRUCT STATIC SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LBRACK LBRACE INT FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## direct_declarator LBRACK option(constant_expression)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 138, spurious reduction of production unary_expression -> postfix_expression 
## In state 136, spurious reduction of production cast_expression -> unary_expression 
## In state 153, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 144, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 167, spurious reduction of production shift_expression -> additive_expression 
## In state 140, spurious reduction of production relational_expression -> shift_expression 
## In state 160, spurious reduction of production equality_expression -> relational_expression 
## In state 178, spurious reduction of production and_expression -> equality_expression 
## In state 186, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 187, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 188, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 172, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 170, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 238, spurious reduction of production constant_expression -> conditional_expression 
## In state 237, spurious reduction of production option(constant_expression) -> constant_expression 
##

<247 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACK STRING SHR XOR_EQ
##
## Ends in an error in state: 143.
##
## shift_expression -> shift_expression shift_operator . additive_expression [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DO DIV_EQ DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## shift_expression shift_operator
##
translation_unit: IDENTIFIER LBRACK STRING STAR XOR_EQ
##
## Ends in an error in state: 148.
##
## multiplicative_expression -> multiplicative_expression multiplicative_operator . cast_expression [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## multiplicative_expression multiplicative_operator
##
translation_unit: IDENTIFIER LBRACK STRING SUB XOR_EQ
##
## Ends in an error in state: 157.
##
## additive_expression -> additive_expression additive_operator . multiplicative_expression [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DO DIV_EQ DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## additive_expression additive_operator
##
translation_unit: IDENTIFIER LBRACK STRING XOR XOR_EQ
##
## Ends in an error in state: 177.
##
## exclusive_or_expression -> exclusive_or_expression XOR . and_expression [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHORT SHL_EQ SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT MOD_EQ LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE LAND INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN EQ ENUM ELSE DOUBLE DO DIV_EQ DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## exclusive_or_expression XOR
##

Expected another expression after this operator

translation_unit: IDENTIFIER LBRACK STRING SUB SIZEOF LPAR CHAR RPAR LIT_OR
##
## Ends in an error in state: 158.
##
## additive_expression -> additive_expression additive_operator multiplicative_expression . [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DO DIV_EQ DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND_EQ AND ADD_EQ ADDADD ADD ]
## multiplicative_expression -> multiplicative_expression . multiplicative_operator cast_expression [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## additive_expression additive_operator multiplicative_expression
##

<158 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACK SUB XOR_EQ
##
## Ends in an error in state: 135.
##
## unary_expression -> unary_operator_cast . cast_expression [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## unary_operator_cast
##

<135 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACK SUBSUB LPAR XOR_EQ
##
## Ends in an error in state: 134.
##
## primary_expression -> LPAR . expression RPAR [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACK LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DOT DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ATOMIC ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Expected a valid expression after parenthesis

translation_unit: IDENTIFIER LBRACK SUBSUB XOR_EQ
##
## Ends in an error in state: 133.
##
## unary_expression -> unary_operator_unary . unary_expression [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## unary_operator_unary
##

<133 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LBRACK XOR_EQ
##
## Ends in an error in state: 246.
##
## direct_declarator -> direct_declarator LBRACK . option(constant_expression) RBRACK [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME STRUCT STATIC SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LBRACK LBRACE INT FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## direct_declarator LBRACK
##

<246 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LPAR LIT_TRUE COMMA XOR_EQ
##
## Ends in an error in state: 244.
##
## separated_nonempty_list(COMMA,c_identifier) -> c_identifier COMMA . separated_nonempty_list(COMMA,c_identifier) [ RPAR ]
##
## The known suffix of the stack is as follows:
## c_identifier COMMA
##

<244 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LPAR LIT_TRUE XOR_EQ
##
## Ends in an error in state: 243.
##
## separated_nonempty_list(COMMA,c_identifier) -> c_identifier . [ RPAR ]
## separated_nonempty_list(COMMA,c_identifier) -> c_identifier . COMMA separated_nonempty_list(COMMA,c_identifier) [ RPAR ]
##
## The known suffix of the stack is as follows:
## c_identifier
##

<243 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LPAR VOLATILE COMMA XOR_EQ
##
## Ends in an error in state: 110.
##
## separated_nonempty_list(COMMA,parameter_declaration) -> parameter_declaration COMMA . separated_nonempty_list(COMMA,parameter_declaration) [ RPAR COMMA ]
##
## The known suffix of the stack is as follows:
## parameter_declaration COMMA
##

<110 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LPAR VOLATILE IDENTIFIER VOLATILE
##
## Ends in an error in state: 109.
##
## separated_nonempty_list(COMMA,parameter_declaration) -> parameter_declaration . [ RPAR COMMA ]
## separated_nonempty_list(COMMA,parameter_declaration) -> parameter_declaration . COMMA separated_nonempty_list(COMMA,parameter_declaration) [ RPAR COMMA ]
##
## The known suffix of the stack is as follows:
## parameter_declaration
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 96, spurious reduction of production declarator -> option(pointer) direct_declarator 
## In state 240, spurious reduction of production parameter_declarator -> declarator 
## In state 114, spurious reduction of production parameter_declaration -> nonempty_list(declaration_specifier) parameter_declarator 
##

<109 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LPAR VOLATILE LBRACK RBRACK LPAR XOR_EQ
##
## Ends in an error in state: 120.
##
## direct_abstract_declarator -> option(direct_abstract_declarator) LPAR . option(parameter_type_list) RPAR [ RPAR LPAR LBRACK COMMA ]
##
## The known suffix of the stack is as follows:
## option(direct_abstract_declarator) LPAR
##

<120 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LPAR VOLATILE LBRACK RBRACK XOR_EQ
##
## Ends in an error in state: 232.
##
## abstract_declarator -> option(pointer) direct_abstract_declarator . [ RPAR COMMA ]
## option(direct_abstract_declarator) -> direct_abstract_declarator . [ LPAR LBRACK ]
##
## The known suffix of the stack is as follows:
## option(pointer) direct_abstract_declarator
##

<232 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LPAR VOLATILE LBRACK STRING RBRACE
##
## Ends in an error in state: 235.
##
## direct_abstract_declarator -> option(direct_abstract_declarator) LBRACK option(constant_expression) . RBRACK [ RPAR LPAR LBRACK COMMA ]
##
## The known suffix of the stack is as follows:
## option(direct_abstract_declarator) LBRACK option(constant_expression)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 138, spurious reduction of production unary_expression -> postfix_expression 
## In state 136, spurious reduction of production cast_expression -> unary_expression 
## In state 153, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 144, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 167, spurious reduction of production shift_expression -> additive_expression 
## In state 140, spurious reduction of production relational_expression -> shift_expression 
## In state 160, spurious reduction of production equality_expression -> relational_expression 
## In state 178, spurious reduction of production and_expression -> equality_expression 
## In state 186, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 187, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 188, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 172, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 170, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 238, spurious reduction of production constant_expression -> conditional_expression 
## In state 237, spurious reduction of production option(constant_expression) -> constant_expression 
##

<235 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LPAR VOLATILE LBRACK XOR_EQ
##
## Ends in an error in state: 126.
##
## direct_abstract_declarator -> option(direct_abstract_declarator) LBRACK . option(constant_expression) RBRACK [ RPAR LPAR LBRACK COMMA ]
##
## The known suffix of the stack is as follows:
## option(direct_abstract_declarator) LBRACK
##

<126 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LPAR VOLATILE LPAR STAR COMMA
##
## Ends in an error in state: 117.
##
## direct_abstract_declarator -> LPAR abstract_declarator . RPAR [ RPAR LPAR LBRACK COMMA ]
##
## The known suffix of the stack is as follows:
## LPAR abstract_declarator
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 81, spurious reduction of production list(type_qualifier) -> 
## In state 84, spurious reduction of production nonempty_list(preceded(STAR,list(type_qualifier))) -> STAR list(type_qualifier) 
## In state 92, spurious reduction of production pointer -> nonempty_list(preceded(STAR,list(type_qualifier))) 
## In state 113, spurious reduction of production abstract_declarator -> pointer 
##

<117 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LPAR VOLATILE LPAR XOR_EQ
##
## Ends in an error in state: 116.
##
## direct_abstract_declarator -> LPAR . abstract_declarator RPAR [ RPAR LPAR LBRACK COMMA ]
## direct_declarator -> LPAR . declarator RPAR [ RPAR LPAR LBRACK COMMA ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<116 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LPAR VOLATILE SEMI
##
## Ends in an error in state: 112.
##
## parameter_declaration -> nonempty_list(declaration_specifier) . parameter_declarator [ RPAR COMMA ]
##
## The known suffix of the stack is as follows:
## nonempty_list(declaration_specifier)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 124, spurious reduction of production nonempty_list(declaration_specifier) -> declaration_specifier 
##

<112 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER LPAR XOR_EQ
##
## Ends in an error in state: 97.
##
## direct_declarator -> direct_declarator LPAR . parameter_type_list RPAR [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME STRUCT STATIC SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LBRACK LBRACE INT FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## direct_declarator -> direct_declarator LPAR . loption(separated_nonempty_list(COMMA,c_identifier)) RPAR [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME STRUCT STATIC SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LBRACK LBRACE INT FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## direct_declarator LPAR
##

<97 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER SEMI
##
## Ends in an error in state: 291.
##
## function_definition -> list(declaration_specifier) declarator . list(declaration) compound_statement [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME STRUCT STATIC STAR SIGNED SHORT REGISTER LPAR LONG LIT_LOCATIONS LIT_FORALL LIT_EXISTS LBRACE INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## list(declaration_specifier) declarator
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 96, spurious reduction of production declarator -> option(pointer) direct_declarator 
##

<291 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER VOLATILE IDENTIFIER COMMA XOR_EQ
##
## Ends in an error in state: 297.
##
## separated_nonempty_list(COMMA,init_declarator) -> init_declarator COMMA . separated_nonempty_list(COMMA,init_declarator) [ SEMI ]
##
## The known suffix of the stack is as follows:
## init_declarator COMMA
##

<297 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER VOLATILE IDENTIFIER EQ LBRACE STRING COMMA XOR_EQ
##
## Ends in an error in state: 307.
##
## separated_nonempty_list(COMMA,initialiser) -> initialiser COMMA . separated_nonempty_list(COMMA,initialiser) [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## initialiser COMMA
##

<307 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER VOLATILE IDENTIFIER EQ LBRACE STRING WHILE
##
## Ends in an error in state: 306.
##
## separated_nonempty_list(COMMA,initialiser) -> initialiser . [ RBRACE COMMA ]
## separated_nonempty_list(COMMA,initialiser) -> initialiser . COMMA separated_nonempty_list(COMMA,initialiser) [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## initialiser
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 138, spurious reduction of production unary_expression -> postfix_expression 
## In state 136, spurious reduction of production cast_expression -> unary_expression 
## In state 153, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 144, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 167, spurious reduction of production shift_expression -> additive_expression 
## In state 140, spurious reduction of production relational_expression -> shift_expression 
## In state 160, spurious reduction of production equality_expression -> relational_expression 
## In state 178, spurious reduction of production and_expression -> equality_expression 
## In state 186, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 187, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 188, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 172, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 170, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 191, spurious reduction of production assignment_expression -> conditional_expression 
## In state 309, spurious reduction of production initialiser -> assignment_expression 
##

<306 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER VOLATILE IDENTIFIER EQ LBRACE XOR_EQ
##
## Ends in an error in state: 301.
##
## initialiser -> LBRACE . separated_nonempty_list(COMMA,initialiser) option(COMMA) RBRACE [ SEMI RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<301 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER VOLATILE IDENTIFIER EQ STRING WHILE
##
## Ends in an error in state: 296.
##
## separated_nonempty_list(COMMA,init_declarator) -> init_declarator . [ SEMI ]
## separated_nonempty_list(COMMA,init_declarator) -> init_declarator . COMMA separated_nonempty_list(COMMA,init_declarator) [ SEMI ]
##
## The known suffix of the stack is as follows:
## init_declarator
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 138, spurious reduction of production unary_expression -> postfix_expression 
## In state 136, spurious reduction of production cast_expression -> unary_expression 
## In state 153, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 144, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 167, spurious reduction of production shift_expression -> additive_expression 
## In state 140, spurious reduction of production relational_expression -> shift_expression 
## In state 160, spurious reduction of production equality_expression -> relational_expression 
## In state 178, spurious reduction of production and_expression -> equality_expression 
## In state 186, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 187, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 188, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 172, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 170, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 191, spurious reduction of production assignment_expression -> conditional_expression 
## In state 309, spurious reduction of production initialiser -> assignment_expression 
## In state 310, spurious reduction of production option(preceded(EQ,initialiser)) -> EQ initialiser 
## In state 311, spurious reduction of production init_declarator -> declarator option(preceded(EQ,initialiser)) 
##

<296 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER VOLATILE IDENTIFIER EQ XOR_EQ
##
## Ends in an error in state: 300.
##
## option(preceded(EQ,initialiser)) -> EQ . initialiser [ SEMI COMMA ]
##
## The known suffix of the stack is as follows:
## EQ
##

Expected a valid initialiser after '='

translation_unit: IDENTIFIER VOLATILE IDENTIFIER VOLATILE
##
## Ends in an error in state: 299.
##
## init_declarator -> declarator . option(preceded(EQ,initialiser)) [ SEMI COMMA ]
##
## The known suffix of the stack is as follows:
## declarator
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 96, spurious reduction of production declarator -> option(pointer) direct_declarator 
##

<299 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER VOLATILE RPAR
##
## Ends in an error in state: 292.
##
## declaration -> nonempty_list(declaration_specifier) . loption(separated_nonempty_list(COMMA,init_declarator)) SEMI [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME SYNCHRONIZED SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN EOF ENUM DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO ATOMIC AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## nonempty_list(declaration_specifier)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 124, spurious reduction of production nonempty_list(declaration_specifier) -> declaration_specifier 
##

<292 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER VOLATILE SEMI XOR_EQ
##
## Ends in an error in state: 397.
##
## list(declaration) -> declaration . list(declaration) [ LBRACE ]
##
## The known suffix of the stack is as follows:
## declaration
##

<397 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER VOLATILE XOR_EQ
##
## Ends in an error in state: 124.
##
## nonempty_list(declaration_specifier) -> declaration_specifier . [ STAR SEMI RPAR LPAR LBRACK IDENTIFIER COMMA ]
## nonempty_list(declaration_specifier) -> declaration_specifier . nonempty_list(declaration_specifier) [ STAR SEMI RPAR LPAR LBRACK IDENTIFIER COMMA ]
##
## The known suffix of the stack is as follows:
## declaration_specifier
##

<124 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: IDENTIFIER XOR_EQ
##
## Ends in an error in state: 96.
##
## declarator -> option(pointer) direct_declarator . [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME STRUCT STATIC SIGNED SHORT SEMI RPAR REGISTER LONG LBRACE INT FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## direct_declarator -> direct_declarator . LBRACK option(constant_expression) RBRACK [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME STRUCT STATIC SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LBRACK LBRACE INT FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## direct_declarator -> direct_declarator . LPAR parameter_type_list RPAR [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME STRUCT STATIC SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LBRACK LBRACE INT FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## direct_declarator -> direct_declarator . LPAR loption(separated_nonempty_list(COMMA,c_identifier)) RPAR [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME STRUCT STATIC SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LBRACK LBRACE INT FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## option(pointer) direct_declarator
##

<96 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LPAR IDENTIFIER VOLATILE
##
## Ends in an error in state: 93.
##
## direct_declarator -> LPAR declarator . RPAR [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME STRUCT STATIC SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LBRACK LBRACE INT FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## LPAR declarator
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 96, spurious reduction of production declarator -> option(pointer) direct_declarator 
##

<93 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LPAR XOR_EQ
##
## Ends in an error in state: 91.
##
## direct_declarator -> LPAR . declarator RPAR [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME STRUCT STATIC SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LBRACK LBRACE INT FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<91 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: STAR COMMA
##
## Ends in an error in state: 90.
##
## declarator -> option(pointer) . direct_declarator [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME STRUCT STATIC SIGNED SHORT SEMI RPAR REGISTER LONG LBRACE INT FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## option(pointer)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 81, spurious reduction of production list(type_qualifier) -> 
## In state 84, spurious reduction of production nonempty_list(preceded(STAR,list(type_qualifier))) -> STAR list(type_qualifier) 
## In state 92, spurious reduction of production pointer -> nonempty_list(preceded(STAR,list(type_qualifier))) 
## In state 89, spurious reduction of production option(pointer) -> pointer 
##

<90 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: STAR VOLATILE XOR_EQ
##
## Ends in an error in state: 82.
##
## list(type_qualifier) -> type_qualifier . list(type_qualifier) [ STAR RPAR LPAR LBRACK IDENTIFIER COMMA ]
##
## The known suffix of the stack is as follows:
## type_qualifier
##

<82 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: STAR XOR_EQ
##
## Ends in an error in state: 81.
##
## nonempty_list(preceded(STAR,list(type_qualifier))) -> STAR . list(type_qualifier) [ RPAR LPAR LBRACK IDENTIFIER COMMA ]
## nonempty_list(preceded(STAR,list(type_qualifier))) -> STAR . list(type_qualifier) nonempty_list(preceded(STAR,list(type_qualifier))) [ RPAR LPAR LBRACK IDENTIFIER COMMA ]
##
## The known suffix of the stack is as follows:
## STAR
##

<81 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: UNION LBRACE VOLATILE COLON STRING WHILE
##
## Ends in an error in state: 251.
##
## expression -> expression . COMMA assignment_expression [ SEMI COMMA ]
## struct_declarator -> option(declarator) COLON expression . [ SEMI COMMA ]
##
## The known suffix of the stack is as follows:
## option(declarator) COLON expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 138, spurious reduction of production unary_expression -> postfix_expression 
## In state 136, spurious reduction of production cast_expression -> unary_expression 
## In state 153, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 144, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 167, spurious reduction of production shift_expression -> additive_expression 
## In state 140, spurious reduction of production relational_expression -> shift_expression 
## In state 160, spurious reduction of production equality_expression -> relational_expression 
## In state 178, spurious reduction of production and_expression -> equality_expression 
## In state 186, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 187, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 188, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 172, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 170, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 191, spurious reduction of production assignment_expression -> conditional_expression 
## In state 208, spurious reduction of production expression -> assignment_expression 
##

<251 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: UNION LBRACE VOLATILE COLON XOR_EQ
##
## Ends in an error in state: 250.
##
## struct_declarator -> option(declarator) COLON . expression [ SEMI COMMA ]
##
## The known suffix of the stack is as follows:
## option(declarator) COLON
##

<250 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: UNION LBRACE VOLATILE IDENTIFIER COMMA XOR_EQ
##
## Ends in an error in state: 87.
##
## separated_nonempty_list(COMMA,struct_declarator) -> struct_declarator COMMA . separated_nonempty_list(COMMA,struct_declarator) [ SEMI ]
##
## The known suffix of the stack is as follows:
## struct_declarator COMMA
##

<87 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: UNION LBRACE VOLATILE IDENTIFIER SEMI XOR_EQ
##
## Ends in an error in state: 75.
##
## nonempty_list(struct_declaration) -> struct_declaration . [ RBRACE ]
## nonempty_list(struct_declaration) -> struct_declaration . nonempty_list(struct_declaration) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## struct_declaration
##

<75 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: UNION LBRACE VOLATILE IDENTIFIER VOLATILE
##
## Ends in an error in state: 252.
##
## option(declarator) -> declarator . [ COLON ]
## struct_declarator -> declarator . [ SEMI COMMA ]
##
## The known suffix of the stack is as follows:
## declarator
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 96, spurious reduction of production declarator -> option(pointer) direct_declarator 
##

<252 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: UNION LBRACE VOLATILE RPAR
##
## Ends in an error in state: 80.
##
## struct_declaration -> nonempty_list(specifier_qualifier) . separated_nonempty_list(COMMA,struct_declarator) SEMI [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME STRUCT SIGNED SHORT RBRACE LONG INT FLOAT ENUM DOUBLE CONST CHAR ]
##
## The known suffix of the stack is as follows:
## nonempty_list(specifier_qualifier)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 76, spurious reduction of production nonempty_list(specifier_qualifier) -> specifier_qualifier 
##

<80 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: UNION LBRACE VOLATILE XOR_EQ
##
## Ends in an error in state: 76.
##
## nonempty_list(specifier_qualifier) -> specifier_qualifier . [ STAR RPAR LPAR LBRACK IDENTIFIER COLON ]
## nonempty_list(specifier_qualifier) -> specifier_qualifier . nonempty_list(specifier_qualifier) [ STAR RPAR LPAR LBRACK IDENTIFIER COLON ]
##
## The known suffix of the stack is as follows:
## specifier_qualifier
##

<76 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: UNION LBRACE XOR_EQ
##
## Ends in an error in state: 74.
##
## struct_or_union_specifier -> struct_or_union option(c_identifier) LBRACE . nonempty_list(struct_declaration) RBRACE [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME STRUCT STATIC STAR SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## struct_or_union option(c_identifier) LBRACE
##

<74 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: UNION LIT_TRUE XOR_EQ
##
## Ends in an error in state: 257.
##
## option(c_identifier) -> c_identifier . [ LBRACE ]
## struct_or_union_specifier -> struct_or_union c_identifier . [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME STRUCT STATIC STAR SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## struct_or_union c_identifier
##

<257 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: UNION XOR_EQ
##
## Ends in an error in state: 72.
##
## struct_or_union_specifier -> struct_or_union . option(c_identifier) LBRACE nonempty_list(struct_declaration) RBRACE [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME STRUCT STATIC STAR SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## struct_or_union_specifier -> struct_or_union . c_identifier [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME STRUCT STATIC STAR SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## struct_or_union
##

<72 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: VOLATILE SEMI XOR_EQ
##
## Ends in an error in state: 414.
##
## nonempty_list(external_declaration) -> external_declaration . [ EOF ]
## nonempty_list(external_declaration) -> external_declaration . nonempty_list(external_declaration) [ EOF ]
##
## The known suffix of the stack is as follows:
## external_declaration
##

<414 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: VOLATILE XOR_EQ
##
## Ends in an error in state: 416.
##
## list(declaration_specifier) -> declaration_specifier . list(declaration_specifier) [ STAR LPAR IDENTIFIER ]
## nonempty_list(declaration_specifier) -> declaration_specifier . [ STAR SEMI LPAR IDENTIFIER ]
## nonempty_list(declaration_specifier) -> declaration_specifier . nonempty_list(declaration_specifier) [ STAR SEMI LPAR IDENTIFIER ]
##
## The known suffix of the stack is as follows:
## declaration_specifier
##

<416 YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: XOR_EQ
##
## Ends in an error in state: 409.
##
## translation_unit' -> . translation_unit [ # ]
##
## The known suffix of the stack is as follows:
##
##

<409 YOUR SYNTAX ERROR MESSAGE HERE>

litmus_postcondition: LIT_FORALL LPAR IDENTIFIER EQ_OP XOR_EQ
##
## Ends in an error in state: 274.
##
## litmus_primitive -> litmus_identifier EQ_OP . constant [ RPAR LIT_OR LIT_AND ]
##
## The known suffix of the stack is as follows:
## litmus_identifier EQ_OP
##

Expected a valid constant after '=='

litmus_postcondition: LIT_FORALL LPAR IDENTIFIER XOR_EQ
##
## Ends in an error in state: 273.
##
## litmus_primitive -> litmus_identifier . EQ_OP constant [ RPAR LIT_OR LIT_AND ]
##
## The known suffix of the stack is as follows:
## litmus_identifier
##

Expected '==' here

litmus_postcondition: LIT_FORALL LPAR INT_LIT COLON XOR_EQ
##
## Ends in an error in state: 269.
##
## litmus_identifier -> INT_LIT COLON . IDENTIFIER [ EQ_OP ]
##
## The known suffix of the stack is as follows:
## INT_LIT COLON
##

Expected a valid identifier after the thread selector

litmus_postcondition: LIT_FORALL LPAR INT_LIT XOR_EQ
##
## Ends in an error in state: 268.
##
## litmus_identifier -> INT_LIT . COLON IDENTIFIER [ EQ_OP ]
##
## The known suffix of the stack is as follows:
## INT_LIT
##

Expected a colon, followed by a valid identifier, after the thread selector

litmus_postcondition: LIT_FORALL LPAR LIT_TRUE LIT_AND XOR_EQ
##
## Ends in an error in state: 280.
##
## litmus_conjunct -> litmus_conjunct LIT_AND . litmus_primitive [ RPAR LIT_OR LIT_AND ]
##
## The known suffix of the stack is as follows:
## litmus_conjunct LIT_AND
##
litmus_postcondition: LIT_FORALL LPAR LIT_TRUE LIT_OR XOR_EQ
##
## Ends in an error in state: 278.
##
## litmus_disjunct -> litmus_disjunct LIT_OR . litmus_conjunct [ RPAR LIT_OR ]
##
## The known suffix of the stack is as follows:
## litmus_disjunct LIT_OR
##

Expected a valid Litmus proposition after this operator

litmus_postcondition: LIT_FORALL LPAR LIT_TRUE LIT_OR LIT_TRUE XOR_EQ
##
## Ends in an error in state: 279.
##
## litmus_conjunct -> litmus_conjunct . LIT_AND litmus_primitive [ RPAR LIT_OR LIT_AND ]
## litmus_disjunct -> litmus_disjunct LIT_OR litmus_conjunct . [ RPAR LIT_OR ]
##
## The known suffix of the stack is as follows:
## litmus_disjunct LIT_OR litmus_conjunct
##
litmus_postcondition: LIT_FORALL LPAR LIT_TRUE XOR_EQ
##
## Ends in an error in state: 282.
##
## litmus_conjunct -> litmus_conjunct . LIT_AND litmus_primitive [ RPAR LIT_OR LIT_AND ]
## litmus_disjunct -> litmus_conjunct . [ RPAR LIT_OR ]
##
## The known suffix of the stack is as follows:
## litmus_conjunct
##

Invalid continuation of Litmus proposition

litmus_postcondition: LIT_FORALL LPAR LPAR XOR_EQ
##
## Ends in an error in state: 265.
##
## litmus_primitive -> LPAR . litmus_disjunct RPAR [ RPAR LIT_OR LIT_AND ]
##
## The known suffix of the stack is as follows:
## LPAR
##
litmus_postcondition: LIT_FORALL LPAR XOR_EQ
##
## Ends in an error in state: 405.
##
## litmus_postcondition -> litmus_quantifier LPAR . litmus_disjunct RPAR [ # ]
##
## The known suffix of the stack is as follows:
## litmus_quantifier LPAR
##
litmus: IDENTIFIER IDENTIFIER LIT_FORALL LPAR XOR_EQ
##
## Ends in an error in state: 264.
##
## litmus_postcondition -> litmus_quantifier LPAR . litmus_disjunct RPAR [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME STRUCT STATIC STAR SIGNED SHORT REGISTER LPAR LONG LIT_LOCATIONS LIT_FORALL LIT_EXISTS LBRACE INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## litmus_quantifier LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>
Expected a valid Litmus proposition after this parenthesis

litmus_postcondition: LIT_FORALL XOR_EQ
##
## Ends in an error in state: 404.
##
## litmus_postcondition -> litmus_quantifier . LPAR litmus_disjunct RPAR [ # ]
##
## The known suffix of the stack is as follows:
## litmus_quantifier
##
litmus: IDENTIFIER IDENTIFIER LIT_FORALL XOR_EQ
##
## Ends in an error in state: 263.
##
## litmus_postcondition -> litmus_quantifier . LPAR litmus_disjunct RPAR [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME STRUCT STATIC STAR SIGNED SHORT REGISTER LPAR LONG LIT_LOCATIONS LIT_FORALL LIT_EXISTS LBRACE INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## litmus_quantifier
##

Expected a valid Litmus proposition after this quantifier

litmus_postcondition: XOR_EQ
##
## Ends in an error in state: 403.
##
## litmus_postcondition' -> . litmus_postcondition [ # ]
##
## The known suffix of the stack is as follows:
##
##

Expected a valid Litmus postcondition

litmus: IDENTIFIER IDENTIFIER LBRACE LIT_TRUE EQ CHAR_LIT SEMI XOR_EQ
##
## Ends in an error in state: 34.
##
## list(endsemi(litmus_init_stm)) -> litmus_init_stm SEMI . list(endsemi(litmus_init_stm)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## litmus_init_stm SEMI
##
litmus: IDENTIFIER IDENTIFIER LBRACE XOR_EQ
##
## Ends in an error in state: 32.
##
## litmus_initialiser -> LBRACE . list(endsemi(litmus_init_stm)) RBRACE [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME STRUCT STATIC STAR SIGNED SHORT REGISTER LPAR LONG LIT_LOCATIONS LIT_FORALL LIT_EXISTS LBRACE INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Expected a valid global initialiser

litmus: IDENTIFIER IDENTIFIER LBRACE LIT_TRUE EQ CHAR_LIT XOR_EQ
##
## Ends in an error in state: 33.
##
## list(endsemi(litmus_init_stm)) -> litmus_init_stm . SEMI list(endsemi(litmus_init_stm)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## litmus_init_stm
##

Expected a semicolon to terminate this initialiser

litmus: IDENTIFIER IDENTIFIER LBRACE LIT_TRUE EQ XOR_EQ
##
## Ends in an error in state: 37.
##
## litmus_init_stm -> c_identifier EQ . constant [ SEMI ]
##
## The known suffix of the stack is as follows:
## c_identifier EQ
##

Expected a constant value for this initialiser

litmus: IDENTIFIER IDENTIFIER LBRACE LIT_TRUE XOR_EQ
##
## Ends in an error in state: 36.
##
## litmus_init_stm -> c_identifier . EQ constant [ SEMI ]
##
## The known suffix of the stack is as follows:
## c_identifier
##

Expected a '=' (followed by a constant value)

litmus: IDENTIFIER IDENTIFIER LBRACE RBRACE XOR_EQ
##
## Ends in an error in state: 288.
##
## nonempty_list(litmus_declaration) -> litmus_declaration . [ EOF ]
## nonempty_list(litmus_declaration) -> litmus_declaration . nonempty_list(litmus_declaration) [ EOF ]
##
## The known suffix of the stack is as follows:
## litmus_declaration
##
litmus: IDENTIFIER IDENTIFIER XOR_EQ
##
## Ends in an error in state: 2.
##
## litmus -> IDENTIFIER IDENTIFIER . nonempty_list(litmus_declaration) EOF [ # ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER IDENTIFIER
##

Expected a valid toplevel Litmus declaration here

litmus: IDENTIFIER IDENTIFIER LIT_LOCATIONS LBRACK LIT_TRUE SEMI XOR_EQ
##
## Ends in an error in state: 28.
##
## separated_nonempty_list(SEMI,c_identifier) -> c_identifier SEMI . separated_nonempty_list(SEMI,c_identifier) [ RBRACK ]
##
## The known suffix of the stack is as follows:
## c_identifier SEMI
##

Expected a valid location identifier here

litmus: IDENTIFIER IDENTIFIER LIT_LOCATIONS LBRACK LIT_TRUE XOR_EQ
##
## Ends in an error in state: 27.
##
## separated_nonempty_list(SEMI,c_identifier) -> c_identifier . [ RBRACK ]
## separated_nonempty_list(SEMI,c_identifier) -> c_identifier . SEMI separated_nonempty_list(SEMI,c_identifier) [ RBRACK ]
##
## The known suffix of the stack is as follows:
## c_identifier
##

Expected a '}' to close this locations stanza, or ';' followed by an identifier

litmus: IDENTIFIER IDENTIFIER LIT_LOCATIONS LBRACK XOR_EQ
##
## Ends in an error in state: 15.
##
## litmus_locations -> LIT_LOCATIONS LBRACK . loption(separated_nonempty_list(SEMI,c_identifier)) RBRACK [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME STRUCT STATIC STAR SIGNED SHORT REGISTER LPAR LONG LIT_LOCATIONS LIT_FORALL LIT_EXISTS LBRACE INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## LIT_LOCATIONS LBRACK
##

Expected a '}' to close this locations stanza, or an identifier

litmus: IDENTIFIER IDENTIFIER LIT_LOCATIONS XOR_EQ
##
## Ends in an error in state: 14.
##
## litmus_locations -> LIT_LOCATIONS . LBRACK loption(separated_nonempty_list(SEMI,c_identifier)) RBRACK [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME STRUCT STATIC STAR SIGNED SHORT REGISTER LPAR LONG LIT_LOCATIONS LIT_FORALL LIT_EXISTS LBRACE INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## LIT_LOCATIONS
##

Expected a '{' to open a Litmus locations stanza.
(If this error occurs near a use of the word "locations" as an identifier,
rename it; it is clashing with a Litmus keyword.)

litmus: IDENTIFIER IDENTIFIER VOLATILE XOR_EQ
##
## Ends in an error in state: 400.
##
## list(declaration_specifier) -> declaration_specifier . list(declaration_specifier) [ STAR LPAR IDENTIFIER ]
##
## The known suffix of the stack is as follows:
## declaration_specifier
##

<400 YOUR SYNTAX ERROR MESSAGE HERE>

litmus: IDENTIFIER XOR_EQ
##
## Ends in an error in state: 1.
##
## litmus -> IDENTIFIER . IDENTIFIER nonempty_list(litmus_declaration) EOF [ # ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER
##

Expected a test name

litmus: XOR_EQ
##
## Ends in an error in state: 0.
##
## litmus' -> . litmus [ # ]
##
## The known suffix of the stack is as follows:
##
##

Expected a language identifier (eg 'C')

