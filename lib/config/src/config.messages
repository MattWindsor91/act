main: MACHINE IDENTIFIER LBRACE COMPILER IDENTIFIER LBRACE ARGV VIA
##
## Ends in an error in state: 33.
##
## argv -> ARGV . nonempty_list(STRING) [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## ARGV
##

Expected at least one quoted string after `argv`

main: MACHINE IDENTIFIER LBRACE COMPILER IDENTIFIER LBRACE ARCH VIA
##
## Ends in an error in state: 37.
##
## id_directive(ARCH) -> ARCH . IDENTIFIER [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## ARCH
##
main: MACHINE IDENTIFIER LBRACE COMPILER IDENTIFIER LBRACE STYLE VIA
##
## Ends in an error in state: 29.
##
## id_directive(STYLE) -> STYLE . IDENTIFIER [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## STYLE
##
main: DEFAULT LBRACE TRY BACKEND WEIGHT
##
## Ends in an error in state: 113.
##
## default_item -> TRY try_category . IDENTIFIER [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## TRY try_category
##

Expected a valid identifier argument

##
## Ends in an error in state: 53.
##
## compiler_item -> STYLE . IDENTIFIER [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## STYLE
##
main: MACHINE IDENTIFIER LBRACE BACKEND WEIGHT
##
## Ends in an error in state: 50.
##
## id_stanza(BACKEND,backend_item) -> BACKEND . IDENTIFIER LBRACE separated_nonempty_list(EOL,option(backend_item)) RBRACE [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## BACKEND
##
main: MACHINE IDENTIFIER LBRACE COMPILER VIA
##
## Ends in an error in state: 26.
##
## id_stanza(COMPILER,compiler_item) -> COMPILER . IDENTIFIER LBRACE separated_nonempty_list(EOL,option(compiler_item)) RBRACE [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## COMPILER
##

Expected a valid identifier before starting the stanza

main: MACHINE IDENTIFIER LBRACE COMPILER IDENTIFIER LBRACE VIA
##
## Ends in an error in state: 28.
##
## id_stanza(COMPILER,compiler_item) -> COMPILER IDENTIFIER LBRACE . separated_nonempty_list(EOL,option(compiler_item)) RBRACE [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## COMPILER IDENTIFIER LBRACE
##
main: MACHINE IDENTIFIER LBRACE COMPILER IDENTIFIER LBRACE STYLE IDENTIFIER EOL VIA
##
## Ends in an error in state: 42.
##
## separated_nonempty_list(EOL,option(compiler_item)) -> option(compiler_item) EOL . separated_nonempty_list(EOL,option(compiler_item)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## option(compiler_item) EOL
##

Expected a valid compiler configuration item; for example:
- `enabled BOOL`
- `cmd "COMMAND"`
- `argv "ARG" "ARG" ...`
- `style STYLE-ID`
- `emits ARCH-ID`

main: DEFAULT LBRACE WEIGHT
##
## Ends in an error in state: 107.
##
## simple_stanza(DEFAULT,default_item) -> DEFAULT LBRACE . separated_nonempty_list(EOL,option(default_item)) RBRACE [ EOL EOF ]
##
## The known suffix of the stack is as follows:
## DEFAULT LBRACE
##
main: DEFAULT LBRACE EOL WEIGHT
##
## Ends in an error in state: 118.
##
## separated_nonempty_list(EOL,option(default_item)) -> option(default_item) EOL . separated_nonempty_list(EOL,option(default_item)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## option(default_item) EOL
##

Expected a valid default item (`try CATEGORY ID`)

main: DEFAULT LBRACE TRY WEIGHT
##
## Ends in an error in state: 108.
##
## default_item -> TRY . try_category IDENTIFIER [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## TRY
##

Expected a category after `try`; for example:
- `arch`
- `compiler`
- `machine`
- `backend`

main: FUZZ LBRACE WEIGHT
##
## Ends in an error in state: 78.
##
## simple_stanza(FUZZ,fuzz_item) -> FUZZ LBRACE . separated_nonempty_list(EOL,option(fuzz_item)) RBRACE [ EOL EOF ]
##
## The known suffix of the stack is as follows:
## FUZZ LBRACE
##
main: FUZZ LBRACE EOL WEIGHT
##
## Ends in an error in state: 103.
##
## separated_nonempty_list(EOL,option(fuzz_item)) -> option(fuzz_item) EOL . separated_nonempty_list(EOL,option(fuzz_item)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## option(fuzz_item) EOL
##

Expected a valid fuzz configuration item; for example:
- `action ACTION-ID`
- `action ACTION-ID weight NUM`

main: FUZZ LBRACE ACTION WEIGHT
##
## Ends in an error in state: 94.
##
## fuzz_item -> ACTION . IDENTIFIER option(fuzz_weight) [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## ACTION
##

Expected an action identifier after `action`

main: FUZZ LBRACE ACTION IDENTIFIER VIA
##
## Ends in an error in state: 95.
##
## fuzz_item -> ACTION IDENTIFIER . option(fuzz_weight) [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## ACTION IDENTIFIER
##

Expected `weight NUMBER`, or a newline, after the action identifier

main: FUZZ LBRACE ACTION IDENTIFIER WEIGHT WEIGHT
##
## Ends in an error in state: 96.
##
## fuzz_weight -> WEIGHT . INTEGER [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## WEIGHT
##

Expected an integer weight after `weight`

main: FUZZ LBRACE SET WEIGHT
##
## Ends in an error in state: 79.
##
## fuzz_item -> SET . fuzz_setter [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## SET
##

Expected `flag` or `param`, followed by an identifier and value assignment

main: FUZZ LBRACE SET PARAM WEIGHT
##
## Ends in an error in state: 80.
##
## fuzz_setter -> PARAM . IDENTIFIER option(TO) INTEGER [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## PARAM
##
main: FUZZ LBRACE SET FLAG WEIGHT
##
## Ends in an error in state: 84.
##
## fuzz_setter -> FLAG . IDENTIFIER option(TO) fuzz_flag_value [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## FLAG
##

Expected an identifier naming the fuzzer tunable to be set

main: FUZZ LBRACE SET PARAM IDENTIFIER TO IDENTIFIER
##
## Ends in an error in state: 82.
##
## fuzz_setter -> PARAM IDENTIFIER option(TO) . INTEGER [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## PARAM IDENTIFIER option(TO)
##

Expected an integer value for this flag, optionally preceded by `to`

main: FUZZ LBRACE SET PARAM IDENTIFIER WEIGHT
##
## Ends in an error in state: 81.
##
## fuzz_setter -> PARAM IDENTIFIER . option(TO) INTEGER [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## PARAM IDENTIFIER
##

Expected an integer value for this flag

main: FUZZ LBRACE SET FLAG IDENTIFIER WEIGHT
##
## Ends in an error in state: 85.
##
## fuzz_setter -> FLAG IDENTIFIER . option(TO) fuzz_flag_value [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## FLAG IDENTIFIER
##

Expected a Boolean, or `ratio NUMBER : NUMBER`, value for this flag, optionally
preceded by `to`

main: FUZZ LBRACE SET FLAG IDENTIFIER TO BACKEND
##
## Ends in an error in state: 86.
##
## fuzz_setter -> FLAG IDENTIFIER option(TO) . fuzz_flag_value [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## FLAG IDENTIFIER option(TO)
##

Expected a Boolean, or `ratio NUMBER : NUMBER`, value for this flag

main: FUZZ LBRACE SET FLAG IDENTIFIER RATIO WEIGHT
##
## Ends in an error in state: 87.
##
## fuzz_flag_value -> RATIO . INTEGER COLON INTEGER [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## RATIO
##

Expected a ratio (`NUMBER : NUMBER`) after `ratio`

main: FUZZ LBRACE SET FLAG IDENTIFIER RATIO INTEGER WEIGHT
##
## Ends in an error in state: 88.
##
## fuzz_flag_value -> RATIO INTEGER . COLON INTEGER [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## RATIO INTEGER
##

Expected `: NUMBER` after the denominator of a ratio

main: FUZZ LBRACE SET FLAG IDENTIFIER RATIO INTEGER COLON WEIGHT
##
## Ends in an error in state: 89.
##
## fuzz_flag_value -> RATIO INTEGER COLON . INTEGER [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## RATIO INTEGER COLON
##

Expected an integer numerator after `:`

main: MACHINE IDENTIFIER LBRACE VIA SSH VIA
##
## Ends in an error in state: 5.
##
## simple_stanza(SSH,ssh_item) -> SSH . LBRACE separated_nonempty_list(EOL,option(ssh_item)) RBRACE [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## SSH
##
main: FUZZ WEIGHT
##
## Ends in an error in state: 77.
##
## simple_stanza(FUZZ,fuzz_item) -> FUZZ . LBRACE separated_nonempty_list(EOL,option(fuzz_item)) RBRACE [ EOL EOF ]
##
## The known suffix of the stack is as follows:
## FUZZ
##
main: DEFAULT WEIGHT
##
## Ends in an error in state: 106.
##
## simple_stanza(DEFAULT,default_item) -> DEFAULT . LBRACE separated_nonempty_list(EOL,option(default_item)) RBRACE [ EOL EOF ]
##
## The known suffix of the stack is as follows:
## DEFAULT
##

Expected an opening brace after the block name

main: MACHINE IDENTIFIER LBRACE COMPILER IDENTIFIER VIA
##
## Ends in an error in state: 27.
##
## id_stanza(COMPILER,compiler_item) -> COMPILER IDENTIFIER . LBRACE separated_nonempty_list(EOL,option(compiler_item)) RBRACE [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## COMPILER IDENTIFIER
##
main: MACHINE IDENTIFIER VIA
##
## Ends in an error in state: 2.
##
## id_stanza(MACHINE,machine_item) -> MACHINE IDENTIFIER . LBRACE separated_nonempty_list(EOL,option(machine_item)) RBRACE [ EOL EOF ]
##
## The known suffix of the stack is as follows:
## MACHINE IDENTIFIER
##
main: MACHINE IDENTIFIER LBRACE BACKEND IDENTIFIER VIA
##
## Ends in an error in state: 51.
##
## id_stanza(BACKEND,backend_item) -> BACKEND IDENTIFIER . LBRACE separated_nonempty_list(EOL,option(backend_item)) RBRACE [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## BACKEND IDENTIFIER
##

Expected an opening brace after the identifier

main: MACHINE IDENTIFIER LBRACE BACKEND IDENTIFIER LBRACE ASM_MODEL IDENTIFIER VIA
##
## Ends in an error in state: 56.
##
## backend_item -> ASM_MODEL IDENTIFIER . STRING [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## ASM_MODEL IDENTIFIER
##

Expected a quoted filename for this assembly model (after the architecture ID)

main: MACHINE IDENTIFIER LBRACE BACKEND IDENTIFIER LBRACE ASM_MODEL VIA
##
## Ends in an error in state: 55.
##
## backend_item -> ASM_MODEL . IDENTIFIER STRING [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## ASM_MODEL
##

Expected an architecture ID for this assembly model

main: MACHINE IDENTIFIER LBRACE BACKEND IDENTIFIER LBRACE CMD VIA
##
## Ends in an error in state: 31.
##
## cmd -> CMD . STRING [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## CMD
##

Expected a quoted command name or path

main: MACHINE IDENTIFIER LBRACE BACKEND IDENTIFIER LBRACE C_MODEL STRING VIA
##
## Ends in an error in state: 60.
##
## separated_nonempty_list(EOL,option(backend_item)) -> option(backend_item) . [ RBRACE ]
## separated_nonempty_list(EOL,option(backend_item)) -> option(backend_item) . EOL separated_nonempty_list(EOL,option(backend_item)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## option(backend_item)
##
main: MACHINE IDENTIFIER LBRACE COMPILER IDENTIFIER LBRACE STYLE IDENTIFIER VIA
##
## Ends in an error in state: 41.
##
## separated_nonempty_list(EOL,option(compiler_item)) -> option(compiler_item) . [ RBRACE ]
## separated_nonempty_list(EOL,option(compiler_item)) -> option(compiler_item) . EOL separated_nonempty_list(EOL,option(compiler_item)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## option(compiler_item)
##
main: MACHINE IDENTIFIER LBRACE VIA LOCAL VIA
##
## Ends in an error in state: 68.
##
## separated_nonempty_list(EOL,option(machine_item)) -> option(machine_item) . [ RBRACE ]
## separated_nonempty_list(EOL,option(machine_item)) -> option(machine_item) . EOL separated_nonempty_list(EOL,option(machine_item)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## option(machine_item)
##
main: MACHINE IDENTIFIER LBRACE VIA SSH LBRACE USER STRING VIA
##
## Ends in an error in state: 18.
##
## separated_nonempty_list(EOL,option(ssh_item)) -> option(ssh_item) . [ RBRACE ]
## separated_nonempty_list(EOL,option(ssh_item)) -> option(ssh_item) . EOL separated_nonempty_list(EOL,option(ssh_item)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## option(ssh_item)
##
main: FUZZ LBRACE ACTION IDENTIFIER WEIGHT INTEGER WEIGHT
##
## Ends in an error in state: 102.
##
## separated_nonempty_list(EOL,option(fuzz_item)) -> option(fuzz_item) . [ RBRACE ]
## separated_nonempty_list(EOL,option(fuzz_item)) -> option(fuzz_item) . EOL separated_nonempty_list(EOL,option(fuzz_item)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## option(fuzz_item)
##
main: DEFAULT LBRACE TRY BACKEND IDENTIFIER EOF
##
## Ends in an error in state: 117.
##
## separated_nonempty_list(EOL,option(default_item)) -> option(default_item) . [ RBRACE ]
## separated_nonempty_list(EOL,option(default_item)) -> option(default_item) . EOL separated_nonempty_list(EOL,option(default_item)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## option(default_item)
##

Expected a closing brace (to terminate this block), or a newline

main: MACHINE IDENTIFIER LBRACE COMPILER IDENTIFIER LBRACE ARGV STRING VIA
##
## Ends in an error in state: 34.
##
## nonempty_list(STRING) -> STRING . [ RBRACE EOL ]
## nonempty_list(STRING) -> STRING . nonempty_list(STRING) [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## STRING
##

Expected a closing brace (to terminate this block), another string, or a newline

main: MACHINE IDENTIFIER LBRACE RBRACE VIA
##
## Ends in an error in state: 126.
##
## separated_nonempty_list(EOL,option(top_stanza)) -> option(top_stanza) . [ EOF ]
## separated_nonempty_list(EOL,option(top_stanza)) -> option(top_stanza) . EOL separated_nonempty_list(EOL,option(top_stanza)) [ EOF ]
##
## The known suffix of the stack is as follows:
## option(top_stanza)
##

Top-level items must be separated by newlines

main: MACHINE IDENTIFIER LBRACE BACKEND IDENTIFIER LBRACE C_MODEL VIA
##
## Ends in an error in state: 53.
##
## backend_item -> C_MODEL . STRING [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## C_MODEL
##

Expected a quoted filename for the C model

main: MACHINE IDENTIFIER LBRACE BACKEND IDENTIFIER LBRACE VIA
##
## Ends in an error in state: 52.
##
## id_stanza(BACKEND,backend_item) -> BACKEND IDENTIFIER LBRACE . separated_nonempty_list(EOL,option(backend_item)) RBRACE [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## BACKEND IDENTIFIER LBRACE
##
main: MACHINE IDENTIFIER LBRACE BACKEND IDENTIFIER LBRACE C_MODEL STRING EOL VIA
##
## Ends in an error in state: 61.
##
## separated_nonempty_list(EOL,option(backend_item)) -> option(backend_item) EOL . separated_nonempty_list(EOL,option(backend_item)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## option(backend_item) EOL
##

Expected a valid simulator configuration item; for example:
- `cmd "/path/to/herd"`
- `c_model "/path/to/C/model.cat"`
- `asm_model ARCH-ID "/path/to/asm/model.cat"`

main: MACHINE IDENTIFIER LBRACE ENABLED VIA
##
## Ends in an error in state: 24.
##
## enabled -> ENABLED . BOOL [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## ENABLED
##

Expected a Boolean (eg `true`, `false`, `yes`, `no`, `on`, or `off`)

main: MACHINE IDENTIFIER LBRACE USER
##
## Ends in an error in state: 3.
##
## id_stanza(MACHINE,machine_item) -> MACHINE IDENTIFIER LBRACE . separated_nonempty_list(EOL,option(machine_item)) RBRACE [ EOL EOF ]
##
## The known suffix of the stack is as follows:
## MACHINE IDENTIFIER LBRACE
##
main: MACHINE IDENTIFIER LBRACE VIA LOCAL EOL USER
##
## Ends in an error in state: 69.
##
## separated_nonempty_list(EOL,option(machine_item)) -> option(machine_item) EOL . separated_nonempty_list(EOL,option(machine_item)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## option(machine_item) EOL
##

Expected a valid machine configuration item; for example:
- `enabled BOOL`
- `via local`
- `via ssh { SSH-CONFIG }`

main: MACHINE IDENTIFIER LBRACE VIA SSH LBRACE VIA
##
## Ends in an error in state: 6.
##
## simple_stanza(SSH,ssh_item) -> SSH LBRACE . separated_nonempty_list(EOL,option(ssh_item)) RBRACE [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## SSH LBRACE
##
main: MACHINE IDENTIFIER LBRACE VIA SSH LBRACE USER STRING EOL VIA
##
## Ends in an error in state: 19.
##
## separated_nonempty_list(EOL,option(ssh_item)) -> option(ssh_item) EOL . separated_nonempty_list(EOL,option(ssh_item)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## option(ssh_item) EOL
##

Expected a valid SSH configuration item; for example:
- `user "USERNAME"`
- `host "HOSTNAME"`
- `copy to "REMOTE-PATH"`


main: MACHINE IDENTIFIER LBRACE VIA SSH LBRACE COPY TO VIA
##
## Ends in an error in state: 13.
##
## ssh_item -> COPY option(TO) . STRING [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## COPY option(TO)
##

Expected a quoted path after `copy to`

main: MACHINE IDENTIFIER LBRACE VIA SSH LBRACE COPY VIA
##
## Ends in an error in state: 11.
##
## ssh_item -> COPY . option(TO) STRING [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## COPY
##

Expected `copy to`

main: MACHINE IDENTIFIER LBRACE VIA SSH LBRACE HOST VIA
##
## Ends in an error in state: 9.
##
## ssh_item -> HOST . STRING [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## HOST
##

Expected a quoted hostname string

main: MACHINE IDENTIFIER LBRACE VIA SSH LBRACE USER VIA
##
## Ends in an error in state: 7.
##
## ssh_item -> USER . STRING [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## USER
##

Expected a quoted username string

main: MACHINE IDENTIFIER LBRACE VIA VIA
##
## Ends in an error in state: 4.
##
## machine_item -> VIA . via_stanza [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## VIA
##

Expected a valid `via` stanza: either `local` or `ssh { SSH-CONFIG }`

main: MACHINE VIA
##
## Ends in an error in state: 1.
##
## id_stanza(MACHINE,machine_item) -> MACHINE . IDENTIFIER LBRACE separated_nonempty_list(EOL,option(machine_item)) RBRACE [ EOL EOF ]
##
## The known suffix of the stack is as follows:
## MACHINE
##

Expected a identifier, or `default`, after `machine`

main: VIA
##
## Ends in an error in state: 0.
##
## main' -> . main [ # ]
##
## The known suffix of the stack is as follows:
##
##
main: DEFAULT LBRACE RBRACE EOL TO
##
## Ends in an error in state: 127.
##
## separated_nonempty_list(EOL,option(top_stanza)) -> option(top_stanza) EOL . separated_nonempty_list(EOL,option(top_stanza)) [ EOF ]
##
## The known suffix of the stack is as follows:
## option(top_stanza) EOL
##

Expected a valid top-level item; for example:
- `default { ... }`
- `machine ID { ... }`
- `fuzz { ... }`
