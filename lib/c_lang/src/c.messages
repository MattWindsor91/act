translation_unit: ENUM LBRACE LIT_TRUE COMMA XOR_EQ
##
## Ends in an error in state: 256.
##
## separated_nonempty_list(COMMA,enumerator) -> enumerator COMMA . separated_nonempty_list(COMMA,enumerator) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## enumerator COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: ENUM LBRACE LIT_TRUE EQ STRING XOR_EQ
##
## Ends in an error in state: 255.
##
## separated_nonempty_list(COMMA,enumerator) -> enumerator . [ RBRACE ]
## separated_nonempty_list(COMMA,enumerator) -> enumerator . COMMA separated_nonempty_list(COMMA,enumerator) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## enumerator
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 134, spurious reduction of production unary_expression -> postfix_expression 
## In state 132, spurious reduction of production cast_expression -> unary_expression 
## In state 149, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 140, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 162, spurious reduction of production shift_expression -> additive_expression 
## In state 136, spurious reduction of production relational_expression -> shift_expression 
## In state 155, spurious reduction of production equality_expression -> relational_expression 
## In state 171, spurious reduction of production and_expression -> equality_expression 
## In state 179, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 180, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 181, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 165, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 163, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 233, spurious reduction of production constant_expression -> conditional_expression 
## In state 253, spurious reduction of production option(preceded(EQ,constant_expression)) -> EQ constant_expression 
## In state 254, spurious reduction of production enumerator -> identifier option(preceded(EQ,constant_expression)) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: ENUM LBRACE LIT_TRUE EQ XOR_EQ
##
## Ends in an error in state: 53.
##
## option(preceded(EQ,constant_expression)) -> EQ . constant_expression [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: ENUM LBRACE LIT_TRUE XOR_EQ
##
## Ends in an error in state: 52.
##
## enumerator -> identifier . option(preceded(EQ,constant_expression)) [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## identifier
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: ENUM LBRACE XOR_EQ
##
## Ends in an error in state: 48.
##
## enum_specifier -> ENUM option(identifier) LBRACE . loption(separated_nonempty_list(COMMA,enumerator)) RBRACE [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## ENUM option(identifier) LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: ENUM LIT_TRUE XOR_EQ
##
## Ends in an error in state: 258.
##
## enum_specifier -> ENUM identifier . [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## option(identifier) -> identifier . [ LBRACE ]
##
## The known suffix of the stack is as follows:
## ENUM identifier
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: ENUM XOR_EQ
##
## Ends in an error in state: 46.
##
## enum_specifier -> ENUM . option(identifier) LBRACE loption(separated_nonempty_list(COMMA,enumerator)) RBRACE [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## enum_specifier -> ENUM . identifier [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## ENUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE CASE STRING XOR_EQ
##
## Ends in an error in state: 342.
##
## labelled_statement -> CASE constant_expression . statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## CASE constant_expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 134, spurious reduction of production unary_expression -> postfix_expression 
## In state 132, spurious reduction of production cast_expression -> unary_expression 
## In state 149, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 140, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 162, spurious reduction of production shift_expression -> additive_expression 
## In state 136, spurious reduction of production relational_expression -> shift_expression 
## In state 155, spurious reduction of production equality_expression -> relational_expression 
## In state 171, spurious reduction of production and_expression -> equality_expression 
## In state 179, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 180, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 181, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 165, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 163, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 233, spurious reduction of production constant_expression -> conditional_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE CASE XOR_EQ
##
## Ends in an error in state: 341.
##
## labelled_statement -> CASE . constant_expression statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## CASE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE DEFAULT COLON XOR_EQ
##
## Ends in an error in state: 339.
##
## labelled_statement -> DEFAULT COLON . statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## DEFAULT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE DEFAULT XOR_EQ
##
## Ends in an error in state: 338.
##
## labelled_statement -> DEFAULT . COLON statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## DEFAULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE DO SEMI WHILE LPAR STRING WHILE
##
## Ends in an error in state: 360.
##
## expression -> expression . COMMA assignment_expression [ RPAR COMMA ]
## iteration_statement -> DO statement WHILE LPAR expression . RPAR [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## DO statement WHILE LPAR expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 134, spurious reduction of production unary_expression -> postfix_expression 
## In state 132, spurious reduction of production cast_expression -> unary_expression 
## In state 149, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 140, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 162, spurious reduction of production shift_expression -> additive_expression 
## In state 136, spurious reduction of production relational_expression -> shift_expression 
## In state 155, spurious reduction of production equality_expression -> relational_expression 
## In state 171, spurious reduction of production and_expression -> equality_expression 
## In state 179, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 180, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 181, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 165, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 163, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 184, spurious reduction of production assignment_expression -> conditional_expression 
## In state 201, spurious reduction of production expression -> assignment_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE DO SEMI WHILE LPAR XOR_EQ
##
## Ends in an error in state: 359.
##
## iteration_statement -> DO statement WHILE LPAR . expression RPAR [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## DO statement WHILE LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE DO SEMI WHILE XOR_EQ
##
## Ends in an error in state: 358.
##
## iteration_statement -> DO statement WHILE . LPAR expression RPAR [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## DO statement WHILE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE DO SEMI XOR_EQ
##
## Ends in an error in state: 357.
##
## iteration_statement -> DO statement . WHILE LPAR expression RPAR [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## DO statement
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE DO XOR_EQ
##
## Ends in an error in state: 337.
##
## iteration_statement -> DO . statement WHILE LPAR expression RPAR [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## DO
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE FOR LPAR SEMI SEMI RPAR XOR_EQ
##
## Ends in an error in state: 336.
##
## iteration_statement -> FOR LPAR option(expression) SEMI option(expression) SEMI option(expression) RPAR . statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## FOR LPAR option(expression) SEMI option(expression) SEMI option(expression) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE FOR LPAR SEMI SEMI STRING RETURN
##
## Ends in an error in state: 335.
##
## iteration_statement -> FOR LPAR option(expression) SEMI option(expression) SEMI option(expression) . RPAR statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## FOR LPAR option(expression) SEMI option(expression) SEMI option(expression)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 134, spurious reduction of production unary_expression -> postfix_expression 
## In state 132, spurious reduction of production cast_expression -> unary_expression 
## In state 149, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 140, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 162, spurious reduction of production shift_expression -> additive_expression 
## In state 136, spurious reduction of production relational_expression -> shift_expression 
## In state 155, spurious reduction of production equality_expression -> relational_expression 
## In state 171, spurious reduction of production and_expression -> equality_expression 
## In state 179, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 180, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 181, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 165, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 163, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 184, spurious reduction of production assignment_expression -> conditional_expression 
## In state 201, spurious reduction of production expression -> assignment_expression 
## In state 322, spurious reduction of production option(expression) -> expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE FOR LPAR SEMI SEMI XOR_EQ
##
## Ends in an error in state: 334.
##
## iteration_statement -> FOR LPAR option(expression) SEMI option(expression) SEMI . option(expression) RPAR statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## FOR LPAR option(expression) SEMI option(expression) SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE FOR LPAR SEMI STRING RPAR
##
## Ends in an error in state: 333.
##
## iteration_statement -> FOR LPAR option(expression) SEMI option(expression) . SEMI option(expression) RPAR statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## FOR LPAR option(expression) SEMI option(expression)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 134, spurious reduction of production unary_expression -> postfix_expression 
## In state 132, spurious reduction of production cast_expression -> unary_expression 
## In state 149, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 140, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 162, spurious reduction of production shift_expression -> additive_expression 
## In state 136, spurious reduction of production relational_expression -> shift_expression 
## In state 155, spurious reduction of production equality_expression -> relational_expression 
## In state 171, spurious reduction of production and_expression -> equality_expression 
## In state 179, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 180, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 181, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 165, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 163, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 184, spurious reduction of production assignment_expression -> conditional_expression 
## In state 201, spurious reduction of production expression -> assignment_expression 
## In state 322, spurious reduction of production option(expression) -> expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE FOR LPAR SEMI XOR_EQ
##
## Ends in an error in state: 332.
##
## iteration_statement -> FOR LPAR option(expression) SEMI . option(expression) SEMI option(expression) RPAR statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## FOR LPAR option(expression) SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE FOR LPAR STRING RPAR
##
## Ends in an error in state: 331.
##
## iteration_statement -> FOR LPAR option(expression) . SEMI option(expression) SEMI option(expression) RPAR statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## FOR LPAR option(expression)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 134, spurious reduction of production unary_expression -> postfix_expression 
## In state 132, spurious reduction of production cast_expression -> unary_expression 
## In state 149, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 140, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 162, spurious reduction of production shift_expression -> additive_expression 
## In state 136, spurious reduction of production relational_expression -> shift_expression 
## In state 155, spurious reduction of production equality_expression -> relational_expression 
## In state 171, spurious reduction of production and_expression -> equality_expression 
## In state 179, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 180, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 181, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 165, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 163, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 184, spurious reduction of production assignment_expression -> conditional_expression 
## In state 201, spurious reduction of production expression -> assignment_expression 
## In state 322, spurious reduction of production option(expression) -> expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE FOR LPAR XOR_EQ
##
## Ends in an error in state: 330.
##
## iteration_statement -> FOR LPAR . option(expression) SEMI option(expression) SEMI option(expression) RPAR statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## FOR LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE FOR XOR_EQ
##
## Ends in an error in state: 329.
##
## iteration_statement -> FOR . LPAR option(expression) SEMI option(expression) SEMI option(expression) RPAR statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## FOR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE GOTO XOR_EQ
##
## Ends in an error in state: 327.
##
## jump_statement -> GOTO . identifier [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## GOTO
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE IF LPAR STRING RPAR SEMI ELSE XOR_EQ
##
## Ends in an error in state: 364.
##
## option(preceded(ELSE,statement)) -> ELSE . statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE IF LPAR STRING RPAR SEMI XOR_EQ
##
## Ends in an error in state: 363.
##
## selection_statement -> IF LPAR expression RPAR statement . option(preceded(ELSE,statement)) [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## IF LPAR expression RPAR statement
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE IF LPAR STRING RPAR XOR_EQ
##
## Ends in an error in state: 326.
##
## selection_statement -> IF LPAR expression RPAR . statement option(preceded(ELSE,statement)) [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## IF LPAR expression RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE IF LPAR STRING WHILE
##
## Ends in an error in state: 325.
##
## expression -> expression . COMMA assignment_expression [ RPAR COMMA ]
## selection_statement -> IF LPAR expression . RPAR statement option(preceded(ELSE,statement)) [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## IF LPAR expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 134, spurious reduction of production unary_expression -> postfix_expression 
## In state 132, spurious reduction of production cast_expression -> unary_expression 
## In state 149, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 140, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 162, spurious reduction of production shift_expression -> additive_expression 
## In state 136, spurious reduction of production relational_expression -> shift_expression 
## In state 155, spurious reduction of production equality_expression -> relational_expression 
## In state 171, spurious reduction of production and_expression -> equality_expression 
## In state 179, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 180, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 181, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 165, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 163, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 184, spurious reduction of production assignment_expression -> conditional_expression 
## In state 201, spurious reduction of production expression -> assignment_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE IF LPAR XOR_EQ
##
## Ends in an error in state: 324.
##
## selection_statement -> IF LPAR . expression RPAR statement option(preceded(ELSE,statement)) [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## IF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE IF XOR_EQ
##
## Ends in an error in state: 323.
##
## selection_statement -> IF . LPAR expression RPAR statement option(preceded(ELSE,statement)) [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE LIT_TRUE COLON XOR_EQ
##
## Ends in an error in state: 352.
##
## labelled_statement -> identifier COLON . statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## identifier COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE LIT_TRUE WHILE
##
## Ends in an error in state: 351.
##
## labelled_statement -> identifier . COLON statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
## primary_expression -> identifier . [ XOR_EQ XOR SUB_EQ SUBSUB SUB STAR_EQ STAR SHR_EQ SHR SHL_EQ SHL SEMI QUESTION PIPE_EQ PIPE NEQ_OP MOD_EQ MOD LT LPAR LOR LE LBRACK LAND GT GE EQ_OP EQ DOT DIV_EQ DIV COMMA ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## identifier
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE RETURN XOR_EQ
##
## Ends in an error in state: 320.
##
## jump_statement -> RETURN . option(expression) [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## RETURN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE SEMI XOR_EQ
##
## Ends in an error in state: 373.
##
## list(block_item) -> block_item . list(block_item) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## block_item
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE STRING COMMA XOR_EQ
##
## Ends in an error in state: 183.
##
## expression -> expression COMMA . assignment_expression [ XOR_EQ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHORT SHL_EQ SEMI RPAR RETURN REGISTER RBRACK RBRACE PIPE_EQ NOT MOD_EQ LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN EQ ENUM ELSE DOUBLE DO DIV_EQ DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## expression COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE STRING RBRACK
##
## Ends in an error in state: 322.
##
## expression -> expression . COMMA assignment_expression [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RPAR RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST COMMA CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
## option(expression) -> expression . [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RPAR RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 134, spurious reduction of production unary_expression -> postfix_expression 
## In state 132, spurious reduction of production cast_expression -> unary_expression 
## In state 149, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 140, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 162, spurious reduction of production shift_expression -> additive_expression 
## In state 136, spurious reduction of production relational_expression -> shift_expression 
## In state 155, spurious reduction of production equality_expression -> relational_expression 
## In state 171, spurious reduction of production and_expression -> equality_expression 
## In state 179, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 180, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 181, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 165, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 163, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 184, spurious reduction of production assignment_expression -> conditional_expression 
## In state 201, spurious reduction of production expression -> assignment_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE STRING RPAR
##
## Ends in an error in state: 346.
##
## expression_statement -> option(expression) . SEMI [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## option(expression)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 134, spurious reduction of production unary_expression -> postfix_expression 
## In state 132, spurious reduction of production cast_expression -> unary_expression 
## In state 149, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 140, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 162, spurious reduction of production shift_expression -> additive_expression 
## In state 136, spurious reduction of production relational_expression -> shift_expression 
## In state 155, spurious reduction of production equality_expression -> relational_expression 
## In state 171, spurious reduction of production and_expression -> equality_expression 
## In state 179, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 180, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 181, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 165, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 163, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 184, spurious reduction of production assignment_expression -> conditional_expression 
## In state 201, spurious reduction of production expression -> assignment_expression 
## In state 322, spurious reduction of production option(expression) -> expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE STRING XOR_EQ XOR_EQ
##
## Ends in an error in state: 196.
##
## assignment_expression -> conditional_expression assignment_operator . assignment_expression [ XOR_EQ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHORT SHL_EQ SEMI RPAR RETURN REGISTER RBRACK RBRACE PIPE_EQ NOT MOD_EQ LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN EQ ENUM ELSE DOUBLE DO DIV_EQ DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## conditional_expression assignment_operator
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE SWITCH LPAR STRING RPAR XOR_EQ
##
## Ends in an error in state: 319.
##
## selection_statement -> SWITCH LPAR expression RPAR . statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## SWITCH LPAR expression RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE SWITCH LPAR STRING WHILE
##
## Ends in an error in state: 318.
##
## expression -> expression . COMMA assignment_expression [ RPAR COMMA ]
## selection_statement -> SWITCH LPAR expression . RPAR statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## SWITCH LPAR expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 134, spurious reduction of production unary_expression -> postfix_expression 
## In state 132, spurious reduction of production cast_expression -> unary_expression 
## In state 149, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 140, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 162, spurious reduction of production shift_expression -> additive_expression 
## In state 136, spurious reduction of production relational_expression -> shift_expression 
## In state 155, spurious reduction of production equality_expression -> relational_expression 
## In state 171, spurious reduction of production and_expression -> equality_expression 
## In state 179, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 180, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 181, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 165, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 163, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 184, spurious reduction of production assignment_expression -> conditional_expression 
## In state 201, spurious reduction of production expression -> assignment_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE SWITCH LPAR XOR_EQ
##
## Ends in an error in state: 317.
##
## selection_statement -> SWITCH LPAR . expression RPAR statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## SWITCH LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE SWITCH XOR_EQ
##
## Ends in an error in state: 316.
##
## selection_statement -> SWITCH . LPAR expression RPAR statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## SWITCH
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE WHILE LPAR STRING RPAR XOR_EQ
##
## Ends in an error in state: 315.
##
## iteration_statement -> WHILE LPAR expression RPAR . statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## WHILE LPAR expression RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE WHILE LPAR STRING WHILE
##
## Ends in an error in state: 314.
##
## expression -> expression . COMMA assignment_expression [ RPAR COMMA ]
## iteration_statement -> WHILE LPAR expression . RPAR statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## WHILE LPAR expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 134, spurious reduction of production unary_expression -> postfix_expression 
## In state 132, spurious reduction of production cast_expression -> unary_expression 
## In state 149, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 140, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 162, spurious reduction of production shift_expression -> additive_expression 
## In state 136, spurious reduction of production relational_expression -> shift_expression 
## In state 155, spurious reduction of production equality_expression -> relational_expression 
## In state 171, spurious reduction of production and_expression -> equality_expression 
## In state 179, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 180, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 181, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 165, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 163, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 184, spurious reduction of production assignment_expression -> conditional_expression 
## In state 201, spurious reduction of production expression -> assignment_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE WHILE LPAR XOR_EQ
##
## Ends in an error in state: 313.
##
## iteration_statement -> WHILE LPAR . expression RPAR statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## WHILE LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE WHILE XOR_EQ
##
## Ends in an error in state: 312.
##
## iteration_statement -> WHILE . LPAR expression RPAR statement [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## WHILE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACE XOR_EQ
##
## Ends in an error in state: 311.
##
## compound_statement -> LBRACE . list(block_item) RBRACE [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN EOF ENUM ELSE DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACK LPAR STRING WHILE
##
## Ends in an error in state: 218.
##
## expression -> expression . COMMA assignment_expression [ RPAR COMMA ]
## primary_expression -> LPAR expression . RPAR [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACK LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DOT DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## LPAR expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 134, spurious reduction of production unary_expression -> postfix_expression 
## In state 132, spurious reduction of production cast_expression -> unary_expression 
## In state 149, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 140, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 162, spurious reduction of production shift_expression -> additive_expression 
## In state 136, spurious reduction of production relational_expression -> shift_expression 
## In state 155, spurious reduction of production equality_expression -> relational_expression 
## In state 171, spurious reduction of production and_expression -> equality_expression 
## In state 179, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 180, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 181, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 165, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 163, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 184, spurious reduction of production assignment_expression -> conditional_expression 
## In state 201, spurious reduction of production expression -> assignment_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACK LPAR VOLATILE LIT_TRUE
##
## Ends in an error in state: 224.
##
## type_name -> nonempty_list(specifier_qualifier) . option(abstract_declarator) [ RPAR ]
##
## The known suffix of the stack is as follows:
## nonempty_list(specifier_qualifier)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 72, spurious reduction of production nonempty_list(specifier_qualifier) -> specifier_qualifier 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACK LPAR VOLATILE LPAR XOR_EQ
##
## Ends in an error in state: 226.
##
## direct_abstract_declarator -> LPAR . abstract_declarator RPAR [ RPAR LPAR LBRACK ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACK LPAR VOLATILE RPAR XOR_EQ
##
## Ends in an error in state: 222.
##
## cast_expression -> LPAR type_name RPAR . cast_expression [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## LPAR type_name RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACK LPAR VOLATILE STAR COMMA
##
## Ends in an error in state: 221.
##
## cast_expression -> LPAR type_name . RPAR cast_expression [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## LPAR type_name
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 77, spurious reduction of production list(type_qualifier) -> 
## In state 80, spurious reduction of production nonempty_list(preceded(STAR,list(type_qualifier))) -> STAR list(type_qualifier) 
## In state 88, spurious reduction of production pointer -> nonempty_list(preceded(STAR,list(type_qualifier))) 
## In state 109, spurious reduction of production abstract_declarator -> pointer 
## In state 229, spurious reduction of production option(abstract_declarator) -> abstract_declarator 
## In state 228, spurious reduction of production type_name -> nonempty_list(specifier_qualifier) option(abstract_declarator) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACK LPAR VOLATILE STAR IDENTIFIER
##
## Ends in an error in state: 225.
##
## abstract_declarator -> option(pointer) . direct_abstract_declarator [ RPAR ]
##
## The known suffix of the stack is as follows:
## option(pointer)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 77, spurious reduction of production list(type_qualifier) -> 
## In state 80, spurious reduction of production nonempty_list(preceded(STAR,list(type_qualifier))) -> STAR list(type_qualifier) 
## In state 88, spurious reduction of production pointer -> nonempty_list(preceded(STAR,list(type_qualifier))) 
## In state 109, spurious reduction of production option(pointer) -> pointer 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACK LPAR XOR_EQ
##
## Ends in an error in state: 124.
##
## cast_expression -> LPAR . type_name RPAR cast_expression [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO AND_EQ AND ADD_EQ ADDADD ADD ]
## primary_expression -> LPAR . expression RPAR [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACK LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DOT DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACK SIZEOF LPAR CHAR RPAR LIT_OR
##
## Ends in an error in state: 140.
##
## additive_expression -> multiplicative_expression . [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DO DIV_EQ DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO AND_EQ AND ADD_EQ ADDADD ADD ]
## multiplicative_expression -> multiplicative_expression . multiplicative_operator cast_expression [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## multiplicative_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACK SIZEOF LPAR VOLATILE STAR COMMA
##
## Ends in an error in state: 65.
##
## unary_expression -> SIZEOF LPAR type_name . RPAR [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## SIZEOF LPAR type_name
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 77, spurious reduction of production list(type_qualifier) -> 
## In state 80, spurious reduction of production nonempty_list(preceded(STAR,list(type_qualifier))) -> STAR list(type_qualifier) 
## In state 88, spurious reduction of production pointer -> nonempty_list(preceded(STAR,list(type_qualifier))) 
## In state 109, spurious reduction of production abstract_declarator -> pointer 
## In state 229, spurious reduction of production option(abstract_declarator) -> abstract_declarator 
## In state 228, spurious reduction of production type_name -> nonempty_list(specifier_qualifier) option(abstract_declarator) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACK SIZEOF LPAR XOR_EQ
##
## Ends in an error in state: 59.
##
## unary_expression -> SIZEOF LPAR . type_name RPAR [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## SIZEOF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACK SIZEOF XOR_EQ
##
## Ends in an error in state: 58.
##
## unary_expression -> SIZEOF . LPAR type_name RPAR [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO AND_EQ AND ADD_EQ ADDADD ADD ]
## unary_operator_unary -> SIZEOF . [ SUBSUB SUB STRING STAR SIZEOF NOT LPAR LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS INT_LIT IDENTIFIER FLOAT_LIT CHAR_LIT AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## SIZEOF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACK STRING AND XOR_EQ
##
## Ends in an error in state: 177.
##
## and_expression -> and_expression AND . equality_expression [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHORT SHL_EQ SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT MOD_EQ LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE LAND INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN EQ ENUM ELSE DOUBLE DO DIV_EQ DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## and_expression AND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACK STRING DOT XOR_EQ
##
## Ends in an error in state: 215.
##
## postfix_expression -> postfix_expression field_access . identifier [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACK LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DOT DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## postfix_expression field_access
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACK STRING LAND XOR_EQ
##
## Ends in an error in state: 166.
##
## logical_and_expression -> logical_and_expression LAND . inclusive_or_expression [ XOR_EQ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHORT SHL_EQ SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ NOT MOD_EQ LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE LAND INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN EQ ENUM ELSE DOUBLE DO DIV_EQ DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## logical_and_expression LAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACK STRING LBRACK STRING WHILE
##
## Ends in an error in state: 210.
##
## expression -> expression . COMMA assignment_expression [ RBRACK COMMA ]
## postfix_expression -> postfix_expression LBRACK expression . RBRACK [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACK LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DOT DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## postfix_expression LBRACK expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 134, spurious reduction of production unary_expression -> postfix_expression 
## In state 132, spurious reduction of production cast_expression -> unary_expression 
## In state 149, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 140, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 162, spurious reduction of production shift_expression -> additive_expression 
## In state 136, spurious reduction of production relational_expression -> shift_expression 
## In state 155, spurious reduction of production equality_expression -> relational_expression 
## In state 171, spurious reduction of production and_expression -> equality_expression 
## In state 179, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 180, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 181, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 165, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 163, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 184, spurious reduction of production assignment_expression -> conditional_expression 
## In state 201, spurious reduction of production expression -> assignment_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACK STRING LBRACK XOR_EQ
##
## Ends in an error in state: 209.
##
## postfix_expression -> postfix_expression LBRACK . expression RBRACK [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACK LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DOT DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## postfix_expression LBRACK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACK STRING LIT_OR
##
## Ends in an error in state: 134.
##
## postfix_expression -> postfix_expression . LBRACK expression RBRACK [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACK LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DOT DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
## postfix_expression -> postfix_expression . LPAR argument_expression_list RPAR [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACK LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DOT DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
## postfix_expression -> postfix_expression . field_access identifier [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACK LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DOT DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
## postfix_expression -> postfix_expression . inc_or_dec_operator [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACK LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DOT DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
## unary_expression -> postfix_expression . [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## postfix_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACK STRING LOR XOR_EQ
##
## Ends in an error in state: 202.
##
## logical_or_expression -> logical_or_expression LOR . logical_and_expression [ XOR_EQ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHORT SHL_EQ SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ NOT MOD_EQ LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN EQ ENUM ELSE DOUBLE DO DIV_EQ DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## logical_or_expression LOR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACK STRING LPAR STRING COMMA XOR_EQ
##
## Ends in an error in state: 205.
##
## argument_expression_list -> assignment_expression COMMA . argument_expression_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## assignment_expression COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACK STRING LPAR STRING WHILE
##
## Ends in an error in state: 204.
##
## argument_expression_list -> assignment_expression . [ RPAR ]
## argument_expression_list -> assignment_expression . COMMA argument_expression_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## assignment_expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 134, spurious reduction of production unary_expression -> postfix_expression 
## In state 132, spurious reduction of production cast_expression -> unary_expression 
## In state 149, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 140, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 162, spurious reduction of production shift_expression -> additive_expression 
## In state 136, spurious reduction of production relational_expression -> shift_expression 
## In state 155, spurious reduction of production equality_expression -> relational_expression 
## In state 171, spurious reduction of production and_expression -> equality_expression 
## In state 179, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 180, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 181, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 165, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 163, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 184, spurious reduction of production assignment_expression -> conditional_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACK STRING LPAR XOR_EQ
##
## Ends in an error in state: 135.
##
## postfix_expression -> postfix_expression LPAR . argument_expression_list RPAR [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACK LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DOT DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## postfix_expression LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACK STRING LT XOR_EQ
##
## Ends in an error in state: 160.
##
## relational_expression -> relational_expression relational_operator . shift_expression [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHORT SHL_EQ SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DO DIV_EQ DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## relational_expression relational_operator
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACK STRING NEQ_OP XOR_EQ
##
## Ends in an error in state: 174.
##
## equality_expression -> equality_expression equality_operator . relational_expression [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHORT SHL_EQ SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE LAND INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DO DIV_EQ DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## equality_expression equality_operator
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACK STRING PIPE XOR_EQ
##
## Ends in an error in state: 168.
##
## inclusive_or_expression -> inclusive_or_expression PIPE . exclusive_or_expression [ XOR_EQ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHORT SHL_EQ SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT MOD_EQ LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE LAND INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN EQ ENUM ELSE DOUBLE DO DIV_EQ DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## inclusive_or_expression PIPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACK STRING QUESTION STRING COLON XOR_EQ
##
## Ends in an error in state: 199.
##
## conditional_expression -> logical_or_expression QUESTION expression COLON . expression [ XOR_EQ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHORT SHL_EQ SEMI RPAR RETURN REGISTER RBRACK RBRACE PIPE_EQ NOT MOD_EQ LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN EQ ENUM ELSE DOUBLE DO DIV_EQ DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## logical_or_expression QUESTION expression COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACK STRING QUESTION STRING WHILE
##
## Ends in an error in state: 182.
##
## conditional_expression -> logical_or_expression QUESTION expression . COLON expression [ XOR_EQ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHORT SHL_EQ SEMI RPAR RETURN REGISTER RBRACK RBRACE PIPE_EQ NOT MOD_EQ LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN EQ ENUM ELSE DOUBLE DO DIV_EQ DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO AND_EQ AND ADD_EQ ADDADD ADD ]
## expression -> expression . COMMA assignment_expression [ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## logical_or_expression QUESTION expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 134, spurious reduction of production unary_expression -> postfix_expression 
## In state 132, spurious reduction of production cast_expression -> unary_expression 
## In state 149, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 140, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 162, spurious reduction of production shift_expression -> additive_expression 
## In state 136, spurious reduction of production relational_expression -> shift_expression 
## In state 155, spurious reduction of production equality_expression -> relational_expression 
## In state 171, spurious reduction of production and_expression -> equality_expression 
## In state 179, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 180, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 181, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 165, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 163, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 184, spurious reduction of production assignment_expression -> conditional_expression 
## In state 201, spurious reduction of production expression -> assignment_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACK STRING QUESTION XOR_EQ
##
## Ends in an error in state: 164.
##
## conditional_expression -> logical_or_expression QUESTION . expression COLON expression [ XOR_EQ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHORT SHL_EQ SEMI RPAR RETURN REGISTER RBRACK RBRACE PIPE_EQ NOT MOD_EQ LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN EQ ENUM ELSE DOUBLE DO DIV_EQ DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## logical_or_expression QUESTION
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACK STRING RBRACE
##
## Ends in an error in state: 242.
##
## direct_declarator -> direct_declarator LBRACK option(constant_expression) . RBRACK [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LBRACK LBRACE INT FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## direct_declarator LBRACK option(constant_expression)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 134, spurious reduction of production unary_expression -> postfix_expression 
## In state 132, spurious reduction of production cast_expression -> unary_expression 
## In state 149, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 140, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 162, spurious reduction of production shift_expression -> additive_expression 
## In state 136, spurious reduction of production relational_expression -> shift_expression 
## In state 155, spurious reduction of production equality_expression -> relational_expression 
## In state 171, spurious reduction of production and_expression -> equality_expression 
## In state 179, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 180, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 181, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 165, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 163, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 233, spurious reduction of production constant_expression -> conditional_expression 
## In state 232, spurious reduction of production option(constant_expression) -> constant_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACK STRING SHR XOR_EQ
##
## Ends in an error in state: 139.
##
## shift_expression -> shift_expression shift_operator . additive_expression [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DO DIV_EQ DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## shift_expression shift_operator
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACK STRING STAR XOR_EQ
##
## Ends in an error in state: 144.
##
## multiplicative_expression -> multiplicative_expression multiplicative_operator . cast_expression [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## multiplicative_expression multiplicative_operator
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACK STRING SUB SIZEOF LPAR CHAR RPAR LIT_OR
##
## Ends in an error in state: 154.
##
## additive_expression -> additive_expression additive_operator multiplicative_expression . [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DO DIV_EQ DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO AND_EQ AND ADD_EQ ADDADD ADD ]
## multiplicative_expression -> multiplicative_expression . multiplicative_operator cast_expression [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## additive_expression additive_operator multiplicative_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACK STRING SUB XOR_EQ
##
## Ends in an error in state: 153.
##
## additive_expression -> additive_expression additive_operator . multiplicative_expression [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DO DIV_EQ DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## additive_expression additive_operator
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACK STRING XOR XOR_EQ
##
## Ends in an error in state: 170.
##
## exclusive_or_expression -> exclusive_or_expression XOR . and_expression [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHORT SHL_EQ SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT MOD_EQ LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE LAND INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN EQ ENUM ELSE DOUBLE DO DIV_EQ DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## exclusive_or_expression XOR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACK SUB XOR_EQ
##
## Ends in an error in state: 131.
##
## unary_expression -> unary_operator_cast . cast_expression [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## unary_operator_cast
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACK SUBSUB LPAR XOR_EQ
##
## Ends in an error in state: 130.
##
## primary_expression -> LPAR . expression RPAR [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACK LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DOT DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO ARROW AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACK SUBSUB XOR_EQ
##
## Ends in an error in state: 129.
##
## unary_expression -> unary_operator_unary . unary_expression [ XOR_EQ XOR WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUB_EQ SUBSUB SUB STRUCT STRING STATIC STAR_EQ STAR SIZEOF SIGNED SHR_EQ SHR SHORT SHL_EQ SHL SEMI RPAR RETURN REGISTER RBRACK RBRACE QUESTION PIPE_EQ PIPE NOT NEQ_OP MOD_EQ MOD LT LPAR LOR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LE LBRACE LAND INT_LIT INT IF IDENTIFIER GT GOTO GE FOR FLOAT_LIT FLOAT EXTERN EQ_OP EQ ENUM ELSE DOUBLE DO DIV_EQ DIV DEFAULT CONTINUE CONST COMMA COLON CHAR_LIT CHAR CASE BREAK AUTO AND_EQ AND ADD_EQ ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## unary_operator_unary
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LBRACK XOR_EQ
##
## Ends in an error in state: 241.
##
## direct_declarator -> direct_declarator LBRACK . option(constant_expression) RBRACK [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LBRACK LBRACE INT FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## direct_declarator LBRACK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LPAR LIT_TRUE COMMA XOR_EQ
##
## Ends in an error in state: 239.
##
## separated_nonempty_list(COMMA,identifier) -> identifier COMMA . separated_nonempty_list(COMMA,identifier) [ RPAR ]
##
## The known suffix of the stack is as follows:
## identifier COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LPAR LIT_TRUE XOR_EQ
##
## Ends in an error in state: 238.
##
## separated_nonempty_list(COMMA,identifier) -> identifier . [ RPAR ]
## separated_nonempty_list(COMMA,identifier) -> identifier . COMMA separated_nonempty_list(COMMA,identifier) [ RPAR ]
##
## The known suffix of the stack is as follows:
## identifier
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LPAR VOLATILE COMMA XOR_EQ
##
## Ends in an error in state: 106.
##
## separated_nonempty_list(COMMA,parameter_declaration) -> parameter_declaration COMMA . separated_nonempty_list(COMMA,parameter_declaration) [ RPAR COMMA ]
##
## The known suffix of the stack is as follows:
## parameter_declaration COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LPAR VOLATILE IDENTIFIER VOLATILE
##
## Ends in an error in state: 105.
##
## separated_nonempty_list(COMMA,parameter_declaration) -> parameter_declaration . [ RPAR COMMA ]
## separated_nonempty_list(COMMA,parameter_declaration) -> parameter_declaration . COMMA separated_nonempty_list(COMMA,parameter_declaration) [ RPAR COMMA ]
##
## The known suffix of the stack is as follows:
## parameter_declaration
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 92, spurious reduction of production declarator -> option(pointer) direct_declarator 
## In state 235, spurious reduction of production parameter_declarator -> declarator 
## In state 110, spurious reduction of production parameter_declaration -> nonempty_list(declaration_specifier) parameter_declarator 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LPAR VOLATILE LBRACK RBRACK LPAR XOR_EQ
##
## Ends in an error in state: 116.
##
## direct_abstract_declarator -> option(direct_abstract_declarator) LPAR . option(parameter_type_list) RPAR [ RPAR LPAR LBRACK COMMA ]
##
## The known suffix of the stack is as follows:
## option(direct_abstract_declarator) LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LPAR VOLATILE LBRACK RBRACK XOR_EQ
##
## Ends in an error in state: 227.
##
## abstract_declarator -> option(pointer) direct_abstract_declarator . [ RPAR COMMA ]
## option(direct_abstract_declarator) -> direct_abstract_declarator . [ LPAR LBRACK ]
##
## The known suffix of the stack is as follows:
## option(pointer) direct_abstract_declarator
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LPAR VOLATILE LBRACK STRING RBRACE
##
## Ends in an error in state: 230.
##
## direct_abstract_declarator -> option(direct_abstract_declarator) LBRACK option(constant_expression) . RBRACK [ RPAR LPAR LBRACK COMMA ]
##
## The known suffix of the stack is as follows:
## option(direct_abstract_declarator) LBRACK option(constant_expression)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 134, spurious reduction of production unary_expression -> postfix_expression 
## In state 132, spurious reduction of production cast_expression -> unary_expression 
## In state 149, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 140, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 162, spurious reduction of production shift_expression -> additive_expression 
## In state 136, spurious reduction of production relational_expression -> shift_expression 
## In state 155, spurious reduction of production equality_expression -> relational_expression 
## In state 171, spurious reduction of production and_expression -> equality_expression 
## In state 179, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 180, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 181, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 165, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 163, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 233, spurious reduction of production constant_expression -> conditional_expression 
## In state 232, spurious reduction of production option(constant_expression) -> constant_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LPAR VOLATILE LBRACK XOR_EQ
##
## Ends in an error in state: 122.
##
## direct_abstract_declarator -> option(direct_abstract_declarator) LBRACK . option(constant_expression) RBRACK [ RPAR LPAR LBRACK COMMA ]
##
## The known suffix of the stack is as follows:
## option(direct_abstract_declarator) LBRACK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LPAR VOLATILE LPAR STAR COMMA
##
## Ends in an error in state: 113.
##
## direct_abstract_declarator -> LPAR abstract_declarator . RPAR [ RPAR LPAR LBRACK COMMA ]
##
## The known suffix of the stack is as follows:
## LPAR abstract_declarator
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 77, spurious reduction of production list(type_qualifier) -> 
## In state 80, spurious reduction of production nonempty_list(preceded(STAR,list(type_qualifier))) -> STAR list(type_qualifier) 
## In state 88, spurious reduction of production pointer -> nonempty_list(preceded(STAR,list(type_qualifier))) 
## In state 109, spurious reduction of production abstract_declarator -> pointer 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LPAR VOLATILE LPAR XOR_EQ
##
## Ends in an error in state: 112.
##
## direct_abstract_declarator -> LPAR . abstract_declarator RPAR [ RPAR LPAR LBRACK COMMA ]
## direct_declarator -> LPAR . declarator RPAR [ RPAR LPAR LBRACK COMMA ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LPAR VOLATILE SEMI
##
## Ends in an error in state: 108.
##
## parameter_declaration -> nonempty_list(declaration_specifier) . parameter_declarator [ RPAR COMMA ]
##
## The known suffix of the stack is as follows:
## nonempty_list(declaration_specifier)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 120, spurious reduction of production nonempty_list(declaration_specifier) -> declaration_specifier 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE LPAR XOR_EQ
##
## Ends in an error in state: 93.
##
## direct_declarator -> direct_declarator LPAR . parameter_type_list RPAR [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LBRACK LBRACE INT FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## direct_declarator -> direct_declarator LPAR . loption(separated_nonempty_list(COMMA,identifier)) RPAR [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LBRACK LBRACE INT FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## direct_declarator LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE SEMI
##
## Ends in an error in state: 289.
##
## function_definition -> list(declaration_specifier) declarator . list(declaration) compound_statement [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAR LONG LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## list(declaration_specifier) declarator
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 92, spurious reduction of production declarator -> option(pointer) direct_declarator 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE VOLATILE LIT_TRUE COMMA XOR_EQ
##
## Ends in an error in state: 295.
##
## separated_nonempty_list(COMMA,init_declarator) -> init_declarator COMMA . separated_nonempty_list(COMMA,init_declarator) [ SEMI ]
##
## The known suffix of the stack is as follows:
## init_declarator COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE VOLATILE LIT_TRUE EQ LBRACE STRING COMMA XOR_EQ
##
## Ends in an error in state: 305.
##
## separated_nonempty_list(COMMA,initialiser) -> initialiser COMMA . separated_nonempty_list(COMMA,initialiser) [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## initialiser COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE VOLATILE LIT_TRUE EQ LBRACE STRING WHILE
##
## Ends in an error in state: 304.
##
## separated_nonempty_list(COMMA,initialiser) -> initialiser . [ RBRACE COMMA ]
## separated_nonempty_list(COMMA,initialiser) -> initialiser . COMMA separated_nonempty_list(COMMA,initialiser) [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## initialiser
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 134, spurious reduction of production unary_expression -> postfix_expression 
## In state 132, spurious reduction of production cast_expression -> unary_expression 
## In state 149, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 140, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 162, spurious reduction of production shift_expression -> additive_expression 
## In state 136, spurious reduction of production relational_expression -> shift_expression 
## In state 155, spurious reduction of production equality_expression -> relational_expression 
## In state 171, spurious reduction of production and_expression -> equality_expression 
## In state 179, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 180, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 181, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 165, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 163, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 184, spurious reduction of production assignment_expression -> conditional_expression 
## In state 307, spurious reduction of production initialiser -> assignment_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE VOLATILE LIT_TRUE EQ LBRACE XOR_EQ
##
## Ends in an error in state: 299.
##
## initialiser -> LBRACE . separated_nonempty_list(COMMA,initialiser) option(COMMA) RBRACE [ SEMI RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE VOLATILE LIT_TRUE EQ STRING WHILE
##
## Ends in an error in state: 294.
##
## separated_nonempty_list(COMMA,init_declarator) -> init_declarator . [ SEMI ]
## separated_nonempty_list(COMMA,init_declarator) -> init_declarator . COMMA separated_nonempty_list(COMMA,init_declarator) [ SEMI ]
##
## The known suffix of the stack is as follows:
## init_declarator
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 134, spurious reduction of production unary_expression -> postfix_expression 
## In state 132, spurious reduction of production cast_expression -> unary_expression 
## In state 149, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 140, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 162, spurious reduction of production shift_expression -> additive_expression 
## In state 136, spurious reduction of production relational_expression -> shift_expression 
## In state 155, spurious reduction of production equality_expression -> relational_expression 
## In state 171, spurious reduction of production and_expression -> equality_expression 
## In state 179, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 180, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 181, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 165, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 163, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 184, spurious reduction of production assignment_expression -> conditional_expression 
## In state 307, spurious reduction of production initialiser -> assignment_expression 
## In state 308, spurious reduction of production option(preceded(EQ,initialiser)) -> EQ initialiser 
## In state 309, spurious reduction of production init_declarator -> declarator option(preceded(EQ,initialiser)) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE VOLATILE LIT_TRUE EQ XOR_EQ
##
## Ends in an error in state: 298.
##
## option(preceded(EQ,initialiser)) -> EQ . initialiser [ SEMI COMMA ]
##
## The known suffix of the stack is as follows:
## EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE VOLATILE LIT_TRUE VOLATILE
##
## Ends in an error in state: 297.
##
## init_declarator -> declarator . option(preceded(EQ,initialiser)) [ SEMI COMMA ]
##
## The known suffix of the stack is as follows:
## declarator
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 92, spurious reduction of production declarator -> option(pointer) direct_declarator 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE VOLATILE RPAR
##
## Ends in an error in state: 290.
##
## declaration -> nonempty_list(declaration_specifier) . loption(separated_nonempty_list(COMMA,init_declarator)) SEMI [ WHILE VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF SWITCH SUBSUB SUB STRUCT STRING STATIC STAR SIZEOF SIGNED SHORT SEMI RETURN REGISTER RBRACE NOT LPAR LONG LNOT LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT_LIT INT IF IDENTIFIER GOTO FOR FLOAT_LIT FLOAT EXTERN EOF ENUM DOUBLE DO DEFAULT CONTINUE CONST CHAR_LIT CHAR CASE BREAK AUTO AND ADDADD ADD ]
##
## The known suffix of the stack is as follows:
## nonempty_list(declaration_specifier)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 120, spurious reduction of production nonempty_list(declaration_specifier) -> declaration_specifier 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE VOLATILE SEMI XOR_EQ
##
## Ends in an error in state: 376.
##
## list(declaration) -> declaration . list(declaration) [ LBRACE ]
##
## The known suffix of the stack is as follows:
## declaration
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE VOLATILE XOR_EQ
##
## Ends in an error in state: 120.
##
## nonempty_list(declaration_specifier) -> declaration_specifier . [ STAR SEMI RPAR LPAR LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACK IDENTIFIER COMMA ]
## nonempty_list(declaration_specifier) -> declaration_specifier . nonempty_list(declaration_specifier) [ STAR SEMI RPAR LPAR LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACK IDENTIFIER COMMA ]
##
## The known suffix of the stack is as follows:
## declaration_specifier
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LIT_TRUE XOR_EQ
##
## Ends in an error in state: 92.
##
## declarator -> option(pointer) direct_declarator . [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMI RPAR REGISTER LONG LBRACE INT FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## direct_declarator -> direct_declarator . LBRACK option(constant_expression) RBRACK [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LBRACK LBRACE INT FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## direct_declarator -> direct_declarator . LPAR parameter_type_list RPAR [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LBRACK LBRACE INT FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## direct_declarator -> direct_declarator . LPAR loption(separated_nonempty_list(COMMA,identifier)) RPAR [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LBRACK LBRACE INT FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## option(pointer) direct_declarator
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LPAR LIT_TRUE VOLATILE
##
## Ends in an error in state: 89.
##
## direct_declarator -> LPAR declarator . RPAR [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LBRACK LBRACE INT FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## LPAR declarator
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 92, spurious reduction of production declarator -> option(pointer) direct_declarator 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: LPAR XOR_EQ
##
## Ends in an error in state: 87.
##
## direct_declarator -> LPAR . declarator RPAR [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LBRACK LBRACE INT FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: STAR COMMA
##
## Ends in an error in state: 86.
##
## declarator -> option(pointer) . direct_declarator [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMI RPAR REGISTER LONG LBRACE INT FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## option(pointer)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 77, spurious reduction of production list(type_qualifier) -> 
## In state 80, spurious reduction of production nonempty_list(preceded(STAR,list(type_qualifier))) -> STAR list(type_qualifier) 
## In state 88, spurious reduction of production pointer -> nonempty_list(preceded(STAR,list(type_qualifier))) 
## In state 85, spurious reduction of production option(pointer) -> pointer 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: STAR VOLATILE XOR_EQ
##
## Ends in an error in state: 78.
##
## list(type_qualifier) -> type_qualifier . list(type_qualifier) [ STAR RPAR LPAR LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACK IDENTIFIER COMMA ]
##
## The known suffix of the stack is as follows:
## type_qualifier
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: STAR XOR_EQ
##
## Ends in an error in state: 77.
##
## nonempty_list(preceded(STAR,list(type_qualifier))) -> STAR . list(type_qualifier) [ RPAR LPAR LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACK IDENTIFIER COMMA ]
## nonempty_list(preceded(STAR,list(type_qualifier))) -> STAR . list(type_qualifier) nonempty_list(preceded(STAR,list(type_qualifier))) [ RPAR LPAR LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACK IDENTIFIER COMMA ]
##
## The known suffix of the stack is as follows:
## STAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: UNION LBRACE VOLATILE COLON STRING WHILE
##
## Ends in an error in state: 246.
##
## expression -> expression . COMMA assignment_expression [ SEMI COMMA ]
## struct_declarator -> option(declarator) COLON expression . [ SEMI COMMA ]
##
## The known suffix of the stack is as follows:
## option(declarator) COLON expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 134, spurious reduction of production unary_expression -> postfix_expression 
## In state 132, spurious reduction of production cast_expression -> unary_expression 
## In state 149, spurious reduction of production multiplicative_expression -> cast_expression 
## In state 140, spurious reduction of production additive_expression -> multiplicative_expression 
## In state 162, spurious reduction of production shift_expression -> additive_expression 
## In state 136, spurious reduction of production relational_expression -> shift_expression 
## In state 155, spurious reduction of production equality_expression -> relational_expression 
## In state 171, spurious reduction of production and_expression -> equality_expression 
## In state 179, spurious reduction of production exclusive_or_expression -> and_expression 
## In state 180, spurious reduction of production inclusive_or_expression -> exclusive_or_expression 
## In state 181, spurious reduction of production logical_and_expression -> inclusive_or_expression 
## In state 165, spurious reduction of production logical_or_expression -> logical_and_expression 
## In state 163, spurious reduction of production conditional_expression -> logical_or_expression 
## In state 184, spurious reduction of production assignment_expression -> conditional_expression 
## In state 201, spurious reduction of production expression -> assignment_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: UNION LBRACE VOLATILE COLON XOR_EQ
##
## Ends in an error in state: 245.
##
## struct_declarator -> option(declarator) COLON . expression [ SEMI COMMA ]
##
## The known suffix of the stack is as follows:
## option(declarator) COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: UNION LBRACE VOLATILE IDENTIFIER SEMI XOR_EQ
##
## Ends in an error in state: 71.
##
## nonempty_list(struct_declaration) -> struct_declaration . [ RBRACE ]
## nonempty_list(struct_declaration) -> struct_declaration . nonempty_list(struct_declaration) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## struct_declaration
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: UNION LBRACE VOLATILE LIT_TRUE COMMA XOR_EQ
##
## Ends in an error in state: 83.
##
## separated_nonempty_list(COMMA,struct_declarator) -> struct_declarator COMMA . separated_nonempty_list(COMMA,struct_declarator) [ SEMI ]
##
## The known suffix of the stack is as follows:
## struct_declarator COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: UNION LBRACE VOLATILE LIT_TRUE VOLATILE
##
## Ends in an error in state: 247.
##
## option(declarator) -> declarator . [ COLON ]
## struct_declarator -> declarator . [ SEMI COMMA ]
##
## The known suffix of the stack is as follows:
## declarator
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 92, spurious reduction of production declarator -> option(pointer) direct_declarator 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: UNION LBRACE VOLATILE RPAR
##
## Ends in an error in state: 76.
##
## struct_declaration -> nonempty_list(specifier_qualifier) . separated_nonempty_list(COMMA,struct_declarator) SEMI [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME STRUCT SIGNED SHORT RBRACE LONG INT FLOAT ENUM DOUBLE CONST CHAR ]
##
## The known suffix of the stack is as follows:
## nonempty_list(specifier_qualifier)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 72, spurious reduction of production nonempty_list(specifier_qualifier) -> specifier_qualifier 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: UNION LBRACE VOLATILE XOR_EQ
##
## Ends in an error in state: 72.
##
## nonempty_list(specifier_qualifier) -> specifier_qualifier . [ STAR RPAR LPAR LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACK IDENTIFIER COLON ]
## nonempty_list(specifier_qualifier) -> specifier_qualifier . nonempty_list(specifier_qualifier) [ STAR RPAR LPAR LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACK IDENTIFIER COLON ]
##
## The known suffix of the stack is as follows:
## specifier_qualifier
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: UNION LBRACE XOR_EQ
##
## Ends in an error in state: 70.
##
## struct_or_union_specifier -> struct_or_union option(identifier) LBRACE . nonempty_list(struct_declaration) RBRACE [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## struct_or_union option(identifier) LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: UNION LIT_TRUE XOR_EQ
##
## Ends in an error in state: 252.
##
## option(identifier) -> identifier . [ LBRACE ]
## struct_or_union_specifier -> struct_or_union identifier . [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## struct_or_union identifier
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: UNION XOR_EQ
##
## Ends in an error in state: 68.
##
## struct_or_union_specifier -> struct_or_union . option(identifier) LBRACE nonempty_list(struct_declaration) RBRACE [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## struct_or_union_specifier -> struct_or_union . identifier [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMI RPAR REGISTER LPAR LONG LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## struct_or_union
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: VOLATILE SEMI XOR_EQ
##
## Ends in an error in state: 393.
##
## nonempty_list(external_declaration) -> external_declaration . [ EOF ]
## nonempty_list(external_declaration) -> external_declaration . nonempty_list(external_declaration) [ EOF ]
##
## The known suffix of the stack is as follows:
## external_declaration
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: VOLATILE XOR_EQ
##
## Ends in an error in state: 395.
##
## list(declaration_specifier) -> declaration_specifier . list(declaration_specifier) [ STAR LPAR LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS IDENTIFIER ]
## nonempty_list(declaration_specifier) -> declaration_specifier . [ STAR SEMI LPAR LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS IDENTIFIER ]
## nonempty_list(declaration_specifier) -> declaration_specifier . nonempty_list(declaration_specifier) [ STAR SEMI LPAR LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS IDENTIFIER ]
##
## The known suffix of the stack is as follows:
## declaration_specifier
##

<YOUR SYNTAX ERROR MESSAGE HERE>

translation_unit: XOR_EQ
##
## Ends in an error in state: 388.
##
## translation_unit' -> . translation_unit [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

litmus_postcondition: LIT_FORALL LPAR IDENTIFIER EQ_OP XOR_EQ
##
## Ends in an error in state: 272.
##
## litmus_primitive -> litmus_identifier EQ_OP . constant [ RPAR LIT_OR LIT_AND ]
##
## The known suffix of the stack is as follows:
## litmus_identifier EQ_OP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

litmus_postcondition: LIT_FORALL LPAR IDENTIFIER XOR_EQ
##
## Ends in an error in state: 271.
##
## litmus_primitive -> litmus_identifier . EQ_OP constant [ RPAR LIT_OR LIT_AND ]
##
## The known suffix of the stack is as follows:
## litmus_identifier
##

<YOUR SYNTAX ERROR MESSAGE HERE>

litmus_postcondition: LIT_FORALL LPAR INT_LIT COLON XOR_EQ
##
## Ends in an error in state: 267.
##
## litmus_identifier -> INT_LIT COLON . IDENTIFIER [ EQ_OP ]
##
## The known suffix of the stack is as follows:
## INT_LIT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

litmus_postcondition: LIT_FORALL LPAR INT_LIT XOR_EQ
##
## Ends in an error in state: 266.
##
## litmus_identifier -> INT_LIT . COLON IDENTIFIER [ EQ_OP ]
##
## The known suffix of the stack is as follows:
## INT_LIT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

litmus_postcondition: LIT_FORALL LPAR LIT_TRUE LIT_AND XOR_EQ
##
## Ends in an error in state: 278.
##
## litmus_conjunct -> litmus_conjunct LIT_AND . litmus_primitive [ RPAR LIT_OR LIT_AND ]
##
## The known suffix of the stack is as follows:
## litmus_conjunct LIT_AND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

litmus_postcondition: LIT_FORALL LPAR LIT_TRUE LIT_OR LIT_TRUE XOR_EQ
##
## Ends in an error in state: 277.
##
## litmus_conjunct -> litmus_conjunct . LIT_AND litmus_primitive [ RPAR LIT_OR LIT_AND ]
## litmus_disjunct -> litmus_disjunct LIT_OR litmus_conjunct . [ RPAR LIT_OR ]
##
## The known suffix of the stack is as follows:
## litmus_disjunct LIT_OR litmus_conjunct
##

<YOUR SYNTAX ERROR MESSAGE HERE>

litmus_postcondition: LIT_FORALL LPAR LIT_TRUE LIT_OR XOR_EQ
##
## Ends in an error in state: 276.
##
## litmus_disjunct -> litmus_disjunct LIT_OR . litmus_conjunct [ RPAR LIT_OR ]
##
## The known suffix of the stack is as follows:
## litmus_disjunct LIT_OR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

litmus_postcondition: LIT_FORALL LPAR LIT_TRUE XOR_EQ
##
## Ends in an error in state: 280.
##
## litmus_conjunct -> litmus_conjunct . LIT_AND litmus_primitive [ RPAR LIT_OR LIT_AND ]
## litmus_disjunct -> litmus_conjunct . [ RPAR LIT_OR ]
##
## The known suffix of the stack is as follows:
## litmus_conjunct
##

<YOUR SYNTAX ERROR MESSAGE HERE>

litmus_postcondition: LIT_FORALL LPAR LPAR XOR_EQ
##
## Ends in an error in state: 263.
##
## litmus_primitive -> LPAR . litmus_disjunct RPAR [ RPAR LIT_OR LIT_AND ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

litmus_postcondition: LIT_FORALL LPAR XOR_EQ
##
## Ends in an error in state: 384.
##
## litmus_postcondition -> litmus_quantifier LPAR . litmus_disjunct RPAR [ # ]
##
## The known suffix of the stack is as follows:
## litmus_quantifier LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

litmus_postcondition: LIT_FORALL XOR_EQ
##
## Ends in an error in state: 383.
##
## litmus_postcondition -> litmus_quantifier . LPAR litmus_disjunct RPAR [ # ]
##
## The known suffix of the stack is as follows:
## litmus_quantifier
##

<YOUR SYNTAX ERROR MESSAGE HERE>

litmus_postcondition: XOR_EQ
##
## Ends in an error in state: 382.
##
## litmus_postcondition' -> . litmus_postcondition [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

litmus: IDENTIFIER IDENTIFIER LBRACE LIT_TRUE EQ CHAR_LIT SEMI XOR_EQ
##
## Ends in an error in state: 33.
##
## list(endsemi(litmus_init_stm)) -> litmus_init_stm SEMI . list(endsemi(litmus_init_stm)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## litmus_init_stm SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

litmus: IDENTIFIER IDENTIFIER LBRACE LIT_TRUE EQ CHAR_LIT XOR_EQ
##
## Ends in an error in state: 32.
##
## list(endsemi(litmus_init_stm)) -> litmus_init_stm . SEMI list(endsemi(litmus_init_stm)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## litmus_init_stm
##

<YOUR SYNTAX ERROR MESSAGE HERE>

litmus: IDENTIFIER IDENTIFIER LBRACE LIT_TRUE EQ XOR_EQ
##
## Ends in an error in state: 36.
##
## litmus_init_stm -> identifier EQ . constant [ SEMI ]
##
## The known suffix of the stack is as follows:
## identifier EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

litmus: IDENTIFIER IDENTIFIER LBRACE LIT_TRUE XOR_EQ
##
## Ends in an error in state: 35.
##
## litmus_init_stm -> identifier . EQ constant [ SEMI ]
##
## The known suffix of the stack is as follows:
## identifier
##

<YOUR SYNTAX ERROR MESSAGE HERE>

litmus: IDENTIFIER IDENTIFIER LBRACE RBRACE XOR_EQ
##
## Ends in an error in state: 286.
##
## nonempty_list(litmus_declaration) -> litmus_declaration . [ EOF ]
## nonempty_list(litmus_declaration) -> litmus_declaration . nonempty_list(litmus_declaration) [ EOF ]
##
## The known suffix of the stack is as follows:
## litmus_declaration
##

<YOUR SYNTAX ERROR MESSAGE HERE>

litmus: IDENTIFIER IDENTIFIER LBRACE XOR_EQ
##
## Ends in an error in state: 31.
##
## litmus_initialiser -> LBRACE . list(endsemi(litmus_init_stm)) RBRACE [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAR LONG LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

litmus: IDENTIFIER IDENTIFIER LIT_FORALL LPAR XOR_EQ
##
## Ends in an error in state: 262.
##
## litmus_postcondition -> litmus_quantifier LPAR . litmus_disjunct RPAR [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAR LONG LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## litmus_quantifier LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

litmus: IDENTIFIER IDENTIFIER LIT_FORALL XOR_EQ
##
## Ends in an error in state: 261.
##
## litmus_postcondition -> litmus_quantifier . LPAR litmus_disjunct RPAR [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAR LONG LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## litmus_quantifier
##

<YOUR SYNTAX ERROR MESSAGE HERE>

litmus: IDENTIFIER IDENTIFIER LIT_LOCATIONS LBRACK LIT_TRUE SEMI XOR_EQ
##
## Ends in an error in state: 27.
##
## separated_nonempty_list(SEMI,identifier) -> identifier SEMI . separated_nonempty_list(SEMI,identifier) [ RBRACK ]
##
## The known suffix of the stack is as follows:
## identifier SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

litmus: IDENTIFIER IDENTIFIER LIT_LOCATIONS LBRACK LIT_TRUE XOR_EQ
##
## Ends in an error in state: 26.
##
## separated_nonempty_list(SEMI,identifier) -> identifier . [ RBRACK ]
## separated_nonempty_list(SEMI,identifier) -> identifier . SEMI separated_nonempty_list(SEMI,identifier) [ RBRACK ]
##
## The known suffix of the stack is as follows:
## identifier
##

<YOUR SYNTAX ERROR MESSAGE HERE>

litmus: IDENTIFIER IDENTIFIER LIT_LOCATIONS LBRACK XOR_EQ
##
## Ends in an error in state: 16.
##
## litmus_locations -> LIT_LOCATIONS LBRACK . loption(separated_nonempty_list(SEMI,identifier)) RBRACK [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAR LONG LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## LIT_LOCATIONS LBRACK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

litmus: IDENTIFIER IDENTIFIER LIT_LOCATIONS XOR_EQ
##
## Ends in an error in state: 15.
##
## litmus_locations -> LIT_LOCATIONS . LBRACK loption(separated_nonempty_list(SEMI,identifier)) RBRACK [ VOLATILE VOID UNSIGNED UNION TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAR LONG LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS LBRACE INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ]
##
## The known suffix of the stack is as follows:
## LIT_LOCATIONS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

litmus: IDENTIFIER IDENTIFIER VOLATILE XOR_EQ
##
## Ends in an error in state: 379.
##
## list(declaration_specifier) -> declaration_specifier . list(declaration_specifier) [ STAR LPAR LIT_TRUE LIT_LOCATIONS LIT_FORALL LIT_FALSE LIT_EXISTS IDENTIFIER ]
##
## The known suffix of the stack is as follows:
## declaration_specifier
##

<YOUR SYNTAX ERROR MESSAGE HERE>

litmus: IDENTIFIER IDENTIFIER XOR_EQ
##
## Ends in an error in state: 2.
##
## litmus -> IDENTIFIER IDENTIFIER . nonempty_list(litmus_declaration) EOF [ # ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER IDENTIFIER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

litmus: IDENTIFIER XOR_EQ
##
## Ends in an error in state: 1.
##
## litmus -> IDENTIFIER . IDENTIFIER nonempty_list(litmus_declaration) EOF [ # ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

litmus: XOR_EQ
##
## Ends in an error in state: 0.
##
## litmus' -> . litmus [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

