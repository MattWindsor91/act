;; -*- mode: lisp; -*-

#| This is a compiler spec file.  It tells act which compilers to run,
and how to run them.

It takes the form of a list S-expression, where each item in the list
a pair of a 'compiler identifier' and a specification for that
compiler.  For details on syntax, see
`https://github.com/janestreet/sexplib`.

By default, 'act' reads from './compiler.spec'.  |#

(
 #| This expression specifies a compiler we'll call 'gcc x86'.
 Compiler identifiers are lists: each item in the list corresponds
 to a level in the directory hierarchy act builds in memalloy mode.

 Whenever you want to refer to a compiler by identifier on an act
 command line, you need to join the list elements with one of the
 following characters: '.', ' ', '/', or '\'.  For example, you could
 refer to this compiler as 'gcc.x86'.  |#
 ((gcc x86)
  (
   #| 'enabled BOOL' enables or disables a compiler.  You can omit
   '(enabled true)': compilers are enabled by default. |#
   (enabled true)

   #| 'style' tells us what sort of interface the compiler exposes.

    Currently, we only support 'gcc' here; later, we might have
    support for MSVC, etc.

   'act' runs some lightweight checks to make sure that the compiler
   actually obeys the style choice. |#
   (style gcc)

   #| 'emits' tells act which language the compiler is emitting.  Each
   language may have a sub-dialect, in which case 'emits' is a list.

   Currently, we only support '(x86 at&t)' (AT&T syntax x86). |#
   (emits (x86 at&t))

   #| 'cmd' gives the command name for the compiler.  This should
      point to somewhere in your PATH, or be an absolute path. |#
   (cmd gcc)

   #| 'argv' gives the list of arguments to the compiler. |#
   (argv ("-m32" "-DNO_PTHREADS"))

   #| Optionally, you can tell act to auto-run Herd on generated
      litmus.  To do so, uncomment the line below and, if needed,
      replace "herd7" with the name of the Herd binary (or full path,
      if it isn't in your PATH).

   (herd "herd7")

   |#

   #| By default, 'act' assumes the compiler exists on the local
   machine.  To use 'act' with remote compilers over SSH, you can
   uncomment and adjust the following S-expression.

   (ssh
     (
       (host "hostname")
       (user "username")
       (copy_dir "/path/to/directory/where/we/should/run/the/compiler")
     )
   )

   Some notes about act's SSH support:

   - act won't ask for a password or passphrase---it'll only work if
     you have some sort of non-interactive authentication mechanism
     (such as public-key with the key added to your current agent).
   - act doesn't clean up the copy_dir after use, nor will it make
     the copy_dir if it doesn't already exist.
   - In memalloy mode, you can disable all SSH compilers by passing the
     '-local-only' flag on the command line.
   - act currently establishes three SSH connections per compilation:
     one for the compiler, and two to SCP the results across.
     This may get optimised in future versions, but, until then,
     be warned that the process may be slow and traffic-intensive. |#
   )))
