#!/usr/bin/env bash
#  The Automagic Compiler Tormentor
#  Copyright (c) 2018--2020 Matt Windsor and contributors.
#  - ACT itself is licensed under the MIT License. See the LICENSE file in the
#    project root for more information.
#  - ACT is based in part on code from the Herdtools7 project
#    (https://github.com/herd/herdtools7) : see the LICENSE.herd file in the
#    project root for more information.

# Compiles the given litmus harness using the given compiler, stores the binary locally,
# runs it on the compiler's native machine, and parses it into ACT's format.

set -euo pipefail

SCRIPTDIR="${SCRIPTDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && cd .. && pwd)"}"
readonly SCRIPTDIR

declare ACT_STANDARD_FLAGS ACT_STANDARD_OPTS

# shellcheck source=scripts/act_bash/log.sh
source "${SCRIPTDIR}/act_bash/log.sh"
# shellcheck source=scripts/act_bash/args.sh
source "${SCRIPTDIR}/act_bash/args.sh"
# shellcheck source=scripts/act_bash/exec.sh
source "${SCRIPTDIR}/act_bash/exec.sh"

THISDIR="${THISDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"}"
readonly THISDIR


## Constants and arguments ##


# The backend ID to use to get state sets.
# Must not be empty at the end of argument parsing.
BACKEND=""

# The name of the compiler to compile through.
# Must not be empty at the end of argument parsing.
COMPILER=""

# Whether or not we're running ACT programs through `dune exec`.
DUNE_EXEC="false"

# Whether or not verbose logging is enabled.
VERBOSE="false"


## Functions ##


#Â Prints the script's usage and exits.
usage() {
  echo "usage: $0 [-b BACKEND] [-c COMPILER] [-${ACT_STANDARD_FLAGS}] HARNESS_DIR"
  echo
  echo "-b: ID of Litmus-style ACT backend that was used for making harness"
  echo "-c: ID of compiler to use to compile file"
  act::standard_usage

  exit 1
}


# The main function.
main() {
  while getopts "b:c:${ACT_STANDARD_OPTS}" a; do
    case ${a} in
      b) BACKEND=${OPTARG} ;;
      c) COMPILER=${OPTARG} ;;
      *) act::parse_standard_args "${a}" "${OPTARG:-}" ;;
    esac
  done

  # VERBOSE etc. are used indirectly by various library functions.
  # shellcheck disable=SC2034
  readonly BACKEND COMPILER VERBOSE DUNE_EXEC
  shift $((OPTIND-1))

  if [[ -z ${BACKEND} ]]; then act::arg_error "expected a nonempty backend (-b)"; fi
  if [[ -z ${COMPILER} ]]; then act::arg_error "expected a nonempty compiler (-c)"; fi
  if [[ $# -ne 1 ]]; then act::arg_error "expected precisely one anonymous argument"; fi

  local litdir="$1"

  local payload
  payload="$(act::run_with_qvx "${THISDIR}/compile" -c "${COMPILER}" "${litdir}")"

  act::run_with_qvx "${THISDIR}/run" -c "${COMPILER}" "${payload}" | act::backend parse -backend "${BACKEND}"
}


## Entry point ##
main "$@"
