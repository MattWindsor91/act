#!/usr/bin/env bash
# Gets the FQID of the first backend with the given parameters.
#
# For usage information, scroll down to the `usage` function.

# TODO(@MattWindsor91): select local backends only?

set -o errexit
set -o pipefail
set -o nounset

SCRIPTDIR="${SCRIPTDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"}"
readonly SCRIPTDIR

# shellcheck source=scripts/act_bash/args.sh
source "${SCRIPTDIR}/act_bash/args.sh"
# shellcheck source=scripts/act_bash/exec.sh
source "${SCRIPTDIR}/act_bash/exec.sh"
# shellcheck source=scripts/act_bash/log.sh
source "${SCRIPTDIR}/act_bash/log.sh"


## Constants and arguments ##

# The backend ID to require, if any.
BACKEND_ID=""

# The machine ID to require, if any.
MACHINE_ID=""

# The style to require, if any.
STYLE=""

# Whether to require local backends.
REQUIRE_LOCAL="false"

# Whether or not we're running ACT programs through `dune exec`.
DUNE_EXEC="false"

# Whether or not verbose logging is enabled.
VERBOSE="false"


## Functions ##


# Prints usage information and exits.
usage() {
  echo "Usage: $0 [-b ID] [-m ID] [-s STYLE] [-il] ${ACT_STANDARD_USAGE}"
  echo
  echo "-b ID: Require that the backend has the given ID"
  echo "-m ID: Require that the machine has the given ID"
  echo "-s: See usage for 'make_backend_predicate'"
  echo "-l: See usage for 'make_machine_predicate'"
  echo "-v/-q: verbose/quiet"
  echo "-x: run ACT binaries with \`dune exec\`"
  echo "-h/-?: usage"
  exit
}

main() {
  while getopts "b:m:s:l${ACT_STANDARD_OPTS}" a; do
    case ${a} in
    b) BACKEND_ID="${OPTARG}" ;;
    m) MACHINE_ID="${OPTARG}" ;;
    s) STYLE="${OPTARG}" ;;
    l) REQUIRE_LOCAL="true" ;;
    q) VERBOSE="false" ;;
    v) VERBOSE="true" ;;
    x) DUNE_EXEC="true" ;;
    h|?) usage ;;
    esac
  done

  readonly BACKEND_ID MACHINE_ID REQUIRE_LOCAL STYLE DUNE_EXEC VERBOSE
  shift $((OPTIND-1))

  local backend
  backend=$(list_backends | head -n 1 | cut -f1-2 -d' ' | sed 's/ /./')
  if [[ -z "${backend}" ]]; then act::fatal "No matching backend found."; fi

  # Not using echo to avoid a spurious newline
  printf "%s" "${backend}"
}

list_backends() {
	act::backend list \
	-filter-backends "$(make_backend_predicate)" \
	-filter-machines "$(make_machine_predicate)"
}

make_backend_predicate() {
  local predicate
  predicate=$("${SCRIPTDIR}/make_backend_predicate" -i "${BACKEND_ID}" -s "${STYLE}")

  act::log "Backend predicate: %s\n" "${predicate}"
	echo "${predicate}"
}

make_machine_predicate() {
	local lflag=""
	if [[ "${REQUIRE_LOCAL}" = "true" ]]; then lflag="l"; fi

  local predicate
  predicate=$("${SCRIPTDIR}/make_machine_predicate" -"${lflag}"i "${MACHINE_ID}")

  act::log "Machine predicate: %s\n" "${predicate}"
	echo "${predicate}"
}


## Entry point ##
main "$@"

