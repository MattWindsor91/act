#!/usr/bin/env bash
#
# A harness script that runs memalloy (looking for it in the given directory),
# then fuzzes its output into a directory.

set -o errexit
set -o pipefail
set -o nounset

SCRIPTDIR="${SCRIPTDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"}"
# shellcheck source=scripts/act_bash/args.sh
source "${SCRIPTDIR}/act_bash/args.sh"
# shellcheck source=scripts/act_bash/exec.sh
source "${SCRIPTDIR}/act_bash/exec.sh"
# shellcheck source=scripts/act_bash/log.sh
source "${SCRIPTDIR}/act_bash/log.sh"


## Constants ##
# TODO(@MattWindsor91): most of these shouldn't be hardcoded.


# The number of times the fuzzer should run on each Memalloy output by default.
readonly DEFAULT_FUZZ_PASSES=10

# The directory, relative to the Memalloy output directory, to which any
# fuzzer outcomes should be output.
readonly FUZZ_OUTPUT_DIR="fuzz"



## Arguments ##


# The directory in which Memalloy lives.
MEMALLOY_DIR=""

# The number of events Memalloy should be asked to produce.
# Passed straight into `do_memalloy`, which will do the appropriate default
# substitution and error handling.
MEMALLOY_EVENTS=""

# The number of times the fuzzer should run on each Memalloy output.
# Defaults to `DEFAULT_FUZZ_PASSES` if empty.
FUZZ_PASSES=""

# The compiler-filtering predicate to send to the test builder.
COMPILER_PREDICATE=""


## Functions ##


# Prints usage information and exits.
usage() {
  echo "Usage: $0 [-n NUM_EVENTS] [-k NUM_FUZZ_PASSES] [-xh?] MEMALLOY_DIR"
  echo
  echo "-n: number of events to ask Memalloy to generate"
  echo "-k: number of times to fuzz each Memalloy witness"
  echo "-v/-q: verbose/quiet"
  echo "-x: run ACT binaries with \`dune exec\`"
  echo "-h/-?: usage"
  exit
}


# Main function.
main() {
  while getopts "n:k:qvx?h" a; do
    case ${a} in
    n) MEMALLOY_EVENTS=${OPTARG} ;;
    k) FUZZ_PASSES=${OPTARG} ;;
    q) VERBOSE="false" ;;
    v) VERBOSE="true" ;;
    x) DUNE_EXEC="true" ;;
    h|?) usage ;;
    esac
  done
  if [[ -z "${FUZZ_PASSES}" ]]; then FUZZ_PASSES="${DEFAULT_FUZZ_PASSES}"; fi
  readonly MEMALLOY_EVENTS FUZZ_PASSES DUNE_EXEC VERBOSE
  shift $((OPTIND-1))

  if [[ ${DUNE_EXEC} = "true" ]]; then
    act::log "%s: using 'dune exec' for ACT.\n" "$0"
  fi

  if [[ $# -ne 1 ]]; then
    act::error "need precisely one directory"
    usage
  fi
  MEMALLOY_DIR=$1
  readonly MEMALLOY_DIR

  "${SCRIPTDIR}/do_memalloy" "${MEMALLOY_DIR}"

  local results_dir="${MEMALLOY_DIR}/results/_latest"
  litmus_dir="${results_dir}/litmus"
  fuzz_dir="${results_dir}/${FUZZ_OUTPUT_DIR}"
  act::log "now fuzzing into %s\n" "${fuzz_dir}"
  mkdir -p "${fuzz_dir}"
  "${SCRIPTDIR}/fuzz_many" -c "${FUZZ_PASSES}" -d "${fuzz_dir}" "${litmus_dir}"/*.litmus
}


## Entry point ##
main "$@"
