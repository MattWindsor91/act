#!/usr/bin/env bash
# Programmatically builds a backend predicate from a conjunction of various
# command line arguments.
#
# For more complex predicates, you'll need to build the Blang expression
# yourself.
#
# For usage information, scroll down to the `usage` function.

set -o errexit
set -o pipefail
set -o nounset


## Constants and arguments ##


# The ID to require, if any.
ID=""


# Whether the machine must be local.
REQUIRE_LOCAL="false"


## Functions ##


# Prints usage information and exits.
usage() {
  echo "Usage: $0 [-i ID] [-lh?]"
  echo
  echo "-i: If given, require machine to have the given ID"
  echo "-l: If given, require machine to be local"
  echo "-h/-?: usage"
  exit
}

main() {
  while getopts "i:l?h" a; do
    case ${a} in
    i) ID="${OPTARG}" ;;
    l) REQUIRE_LOCAL="true" ;;
    h|?) usage ;;
    esac
  done
  readonly REQUIRE_LOCAL ID

  local predicate=""
  if [[ -n "${ID}" ]]; then predicate="${predicate} (id (is ${ID}))"; fi
  if [[ "${REQUIRE_LOCAL}" = "true" ]]; then predicate="${predicate} is_local"; fi
  if [[ -z predicate ]]; then echo "true"; else echo "(and${predicate})"; fi
}


## Entry point ##
main "$@"

