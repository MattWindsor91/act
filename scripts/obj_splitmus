#!/usr/bin/env bash
#
# A driver that works by running Litmus on a stubbed-out version of
# a litmus test in cross-compile mode, then generates an object file
# containing the body of the litmus test and links it into the
# Litmus harness.
#
# Similar to, but more heavyweight than, normal `splitmus`.

set -o errexit
set -o pipefail
set -o nounset

SCRIPTDIR="${SCRIPTDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"}"

# Programs
ACT=${ACT="act"}
LITMUS=${LITMUS="litmus7"}
SED=${SED="sed"}

# Prints the self-reported name of an assembly Litmus test to stdout.
#
# $1: path of Litmus file
get_litmus_name() {
  local infile="$1"
  # The first line of a Litmus test is 'ARCH NAME', where ' ' is just
  # a regular space, so we can get the name of the test from that.
  #
  # TODO(@MattWindsor91): make act able to do this sort of litmus-test
  #                       header reading.
  head -n1 "${infile}" | cut -d ' ' -f 2
}

# Produces a ready-to-splice Litmus harness from a delitmus aux file.
#
# Globals:
#   - SCRIPTDIR (read)
#   - ACT (read)
#   - LITMUS (read)
#
# Arguments:
#   1: the compiler ID.
#   2: path to the delitmus aux file to use when generating the harness.
#   3: path to which a skeleton assembly file should be written.
#   4: path to which a skeleton assembly Litmus test should be written.
#   5: directory into which the Litmus harness should be constructed.
make_litmus_harness() {
  local compiler="$1"
  local auxfile="$2"
  local skelfile="$3"
  local alitfile="$4"
  local litdir="$5"

  "${SCRIPTDIR}/qualify_aux.py" "${auxfile}"
  "${SCRIPTDIR}/gen_asm_skel.py" "${auxfile}" > "${skelfile}"
  "${ACT}" asm litmusify -compiler "${compiler}" -aux "${auxfile}" -o "${alitfile}" "${skelfile}"
  "${LITMUS}" "${alitfile}" -o "${litdir}"
}

# Splices function calls corresponding to an object-file test candidate into a
# Litmus harness.
#
# Globals:
#   - SCRIPTDIR (read)
#
# Arguments:
#   1: the name of the test object file, local to the Litmus harness directory.
#   2: path to the delitmus aux file to use when generating the harness.
#   3: path to the Litmus harness Makefile.
#   4: path to the Litmus harness's main .c file.
#   5: path to which a function call stub file should be written.
splice_litmus() {
  local objname="$1"
  local auxfile="$2"
  local makefile="$3"
  local runfile="$4"
  local stubfile="$5"

  "${SCRIPTDIR}/gen_call_stubs.py" "${auxfile}" > "${stubfile}"
  "${SCRIPTDIR}"/splice.awk "${stubfile}" "${runfile}" > "${runfile}.new"
  mv "${runfile}.new" "${runfile}"

  "${SED}" "s/UTILS=/UTILS=${objname} /" "${makefile}" > "${makefile}.new"
  mv "${makefile}.new" "${makefile}"
}

# Prints the script's usage and exits.
usage() {
  echo "usage: $0 COMPILER FILE"
  exit 1
}

# Parameters
[[ "$#" -ne "2" ]] && usage
compiler="$1"
infile="${2}"

name="$(get_litmus_name "${infile}")"

tmpdir="$(mktemp -d)" || exit 2
echo "${tmpdir}"

auxfile="${tmpdir}/${name}.aux.json"
cfile="${tmpdir}/${name}.c"
stubfile="${tmpdir}/${name}.stubs.c"
skelfile="${tmpdir}/${name}.skel.s"
alitfile="${tmpdir}/${name}.litmus"

litdir="${tmpdir}/exec"
mkdir "${litdir}"

runfile="${litdir}/${name}.c"
objname="${name}_body.o" # Can't be $name.o; this clashes with Litmus harness
objfile="${litdir}/${objname}"
makefile="${litdir}/Makefile"

"${ACT}" c delitmus -style vars-as-parameters -aux "${auxfile}" -o "${cfile}" "${infile}"
"${ACT}" c compile -compiler "${compiler}" -mode object -o "${objfile}" "${cfile}"

make_litmus_harness "${compiler}" "${auxfile}" "${skelfile}" "${alitfile}" "${litdir}"
splice_litmus "${objname}" "${auxfile}" "${makefile}" "${runfile}" "${stubfile}"

cd "${litdir}" && make
