#!/usr/bin/env bash
# Runs the ACT fuzzer several times on each of a set of C litmus tests,
# outputting the results into a directory.
#
# For usage information, scroll down to the `usage` function.

SCRIPTDIR="${SCRIPTDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"}"
readonly SCRIPTDIR

# shellcheck source=scripts/act_bash/log.sh
source "${SCRIPTDIR}/act_bash/log.sh"
# shellcheck source=scripts/act_bash/naming.sh
source "${SCRIPTDIR}/act_bash/naming.sh"

VERBOSE="false"

# Programs
ACT_FUZZ=${ACT_FUZZ="act-fuzz"}

# If we look like we're on a Mac, open directory $1 in Finder.
#
# $1: fuzzer directory
open_directory ()
{
  local dir_name="${1}"

  if [[ "$(uname)" = "Darwin" ]]; then
    open "${dir_name}"
  fi
}

# Runs the fuzzer a given amount of times on a litmus test, outputting the
# results to a directory with systematic naming.
#
# Globals:
#   ACT_FUZZ: read
#
# Arguments:
#   1: fuzzer output directory
#   2: name of file to mutate
#   3: count
fuzz_file() {
  local dir_name="${1}"
  local in_file="${2}"
  local count="${3}"

  act::log "Fuzzing %s..." "${in_file}"

  for k in $(seq "${count}"); do
    act::log " %d" "${k}"

    out_file="${dir_name}/$(act::fuzz_name "${in_file}" "${k}")"
    "${ACT_FUZZ}" run "${in_file}" -o "${out_file}"
  done

  act::log " done.\n"
}

# Prints usage information.
usage () {
  echo "Usage: $0 [-c COUNT] [-d DIR_NAME] [-k BACKEND] [-fh?] INFILES..."
  echo
  echo "-c: number of times to run the fuzzer per file"
  echo "-d: override autogenerated directory name"
  echo "-f: 'fire and forget': set up 'latest' symlink and open in Finder"
  echo "-v: verbose"
  echo "-h/-?: usage"
  exit
}


# Default variables
dir_name="fuzz_$(date '+%y_%m_%d_%H_%M_%S')"
count=10
fire_and_forget="false"

main() {
  while getopts "c:d:f:v?h" a; do
    case ${a} in
    d) dir_name=${OPTARG} ;;
    c) count=${OPTARG} ;;
    f) fire_and_forget="true" ;;
    v) VERBOSE="true" ;;
    h|?) usage ;;
    esac
  done
  readonly VERBOSE
  shift $((OPTIND-1))

  if [[ "$#" -lt "1" ]]; then
    echo "${0}: need at least one file argument"
    usage
  fi

  if [[ "${count}" -le "0" ]]; then
    echo "${0}: count must be a non-negative integer"
    usage
  fi

  mkdir -p "${dir_name}"

  for file in "${@}"; do
    fuzz_file "${dir_name}" "${file}" "${count}"
  done

  if [[ "${fire_and_forget}" = "true" ]]; then
    symlink_name="_fuzz_latest"

    act::log "Linking %s to %s.\n" "${symlink_name}" "${dir_name}"

    rm -f "${symlink_name}"
    ln -s "${dir_name}" "${symlink_name}"

    act::log "Opening %s.\n" "${dir_name}"
    open_directory "${dir_name}"
  fi
}

main "${@}"
