#!/usr/bin/env bash
#
# Inner part of `obj_splitmus` that populates a directory with a litmus test
# harness.

set -o errexit
set -o pipefail
set -o nounset

SCRIPTDIR="${SCRIPTDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"}"

# Programs
ACT=${ACT="act"}
LITMUS=${LITMUS="litmus7"}
SED=${SED="sed"}

# Runs the delitmusifier and compiler on an input litmus test, saving an
# aux file and header file for future consumption.
#
# Globals:
#   - ACT (read)
#   - SCRIPTDIR (read)
#
# Arguments:
#   1: the compiler ID.
#   2: path to the C litmus test to delitmusify and compile.
#   3: path to which a delitmus auxiliary file should be written.
#   4: path to which the intermediate C file should be written.
#   5: path to which a header file exposing the C file's functions should be written.
#   4: path to which the compiled object code should be written.
delitmus_and_compile() {
  local compiler="$1"
  local infile="$2"
  local auxfile="$3"
  local cfile="$4"
  local hfile="$5"
  local objfile="$6"

  "${ACT}" c delitmus -style vars-as-parameters -aux "${auxfile}" -o "${cfile}" "${infile}"
  "${ACT}" c compile -compiler "${compiler}" -mode object -o "${objfile}" "${cfile}"
  "${SCRIPTDIR}"/make_header.awk "${cfile}" > "${hfile}"
}

# Produces a ready-to-splice Litmus harness from a delitmus aux file.
#
# Globals:
#   - ACT (read)
#   - LITMUS (read)
#   - SCRIPTDIR (read)
#
# Arguments:
#   1: the compiler ID.
#   2: path to the delitmus aux file to use when generating the harness.
#   3: path to which a skeleton assembly file should be written.
#   4: path to which a skeleton assembly Litmus test should be written.
#   5: directory into which the Litmus harness should be constructed.
make_litmus_harness() {
  local backend="$1"
  local compiler="$2"
  local auxfile="$3"
  local skelfile="$4"
  local alitfile="$5"
  local litdir="$6"

  "${SCRIPTDIR}/gen_asm_skel.py" "${auxfile}" > "${skelfile}"
  "${ACT}" asm litmusify -compiler "${compiler}" -aux "${auxfile}" -o "${alitfile}" "${skelfile}"
  # TODO(@MattWindsor91): store the outputted commands somewhere and run them
  "${ACT}" backend make-harness -sim "${backend}" "${alitfile}" -output "${litdir}" > /dev/null
}

# Splices function calls corresponding to an object-file test candidate into a
# Litmus harness.  The object file, and its corresponding header, must be
# called 'body'.
#
# Globals:
#   - SCRIPTDIR (read)
#   - SED (read)
#
# Arguments:
#   1: path to the delitmus aux file to use when generating the harness.
#   2: path to the Litmus harness Makefile.
#   3: path to the Litmus harness's main .c file.
#   4: path to which a function call stub file should be written.
splice_litmus() {
  local auxfile="$1"
  local makefile="$2"
  local runfile="$3"
  local stubfile="$4"

  "${SCRIPTDIR}/gen_call_stubs.py" "${auxfile}" > "${stubfile}"
  "${SCRIPTDIR}"/splice.awk "${stubfile}" "${runfile}" > "${runfile}.new"
  mv "${runfile}.new" "${runfile}"

  "${SED}" '
    /#include "utils.h"/ a\
    #include "body.h"
  ' "${runfile}" > "${runfile}.new"
  mv "${runfile}.new" "${runfile}"

  "${SED}" "s/UTILS=/UTILS=body.o /" "${makefile}" > "${makefile}.new"
  mv "${makefile}.new" "${makefile}"
}

# Prints the script's usage and exits.
usage() {
  echo "usage: $0 BACKEND_ID COMPILER_ID FILE TEST_NAME TARGET_DIR" >&2
  exit 1
}

# Parameters
[[ "$#" -ne "5" ]] && usage
backend="$1"
compiler="$2"
infile="$3"
name="$4"
tmpdir="$5"

auxfile="${tmpdir}/${name}.aux.json"
cfile="${tmpdir}/${name}.c"
stubfile="${tmpdir}/${name}.stubs.c"
skelfile="${tmpdir}/${name}.skel.s"
alitfile="${tmpdir}/${name}.litmus"

litdir="${tmpdir}/exec"
mkdir -p "${litdir}"

runfile="${litdir}/${name}.c"

# TODO(@MattWindsor91): what if $name is body?
objfile="${litdir}/body.o"
hfile="${litdir}/body.h"

makefile="${litdir}/Makefile"

delitmus_and_compile "${compiler}" "${infile}" "${auxfile}" "${cfile}" "${hfile}" "${objfile}"
make_litmus_harness "${backend}" "${compiler}" "${auxfile}" "${skelfile}" "${alitfile}" "${litdir}"
splice_litmus "${auxfile}" "${makefile}" "${runfile}" "${stubfile}"

(cd "${litdir}" && make >/dev/null)
"${litdir}/${name}.exe" | "${ACT}" backend parse -sim "${backend}"
