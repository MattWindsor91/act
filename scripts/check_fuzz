#!/usr/bin/env bash
# Given a C litmus test and its fuzzed equivalent, this script checks
# to see if the behaviours of one are included in the behaviours of the other.
#
# For usage information, scroll down to the `usage` function.

SCRIPTDIR="${SCRIPTDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"}"
readonly SCRIPTDIR

# shellcheck source=scripts/act_bash/exec.sh
source "${SCRIPTDIR}/act_bash/exec.sh"
# shellcheck source=scripts/act_bash/log.sh
source "${SCRIPTDIR}/act_bash/log.sh"

## Constants and arguments ##

# The name of the directory into which the script outputs intermediate
# results.  If empty, it will create a temporary directory with mktemp.
DIR_NAME=""

# Whether or not verbose logging is enabled.
VERBOSE="false"

# Whether or not we're running ACT programs through `dune exec`.
DUNE_EXEC="false"

# The backend ID to use to get state sets.
BACKEND="herd"

## Functions ##

# Prints usage information and exits.
usage() {
  echo "Usage: $0 [-b BACKEND] [-d DIR_NAME] [-hv?] ORIGINAL FUZZED"
  echo
  echo "-b: ID of backend to use for simulating C files"
  echo "-d: override autogenerated directory name"
  echo "-v: verbose"
  echo "-x: run ACT binaries with 'dune exec'"
  echo "-h/-?: usage"
  exit
}

main() {
  while getopts "d:vx?h" a; do
    case ${a} in
    b) BACKEND=${OPTARG} ;;
    d) DIR_NAME=${OPTARG} ;;
    v) VERBOSE="true" ;;
    x) DUNE_EXEC="true" ;;
    h|?) usage ;;
    esac
  done

  if [[ -z "${DIR_NAME}" ]]; then
    DIR_NAME="$(mktemp -d)" || exit 2
  else
    mkdir -p "${DIR_NAME}"
  fi

  readonly BACKEND DIR_NAME DUNE_EXEC VERBOSE
  shift $((OPTIND-1))

  if [[ $# -ne 2 ]]; then
    echo "${0}: need precisely two file arguments"
    usage
  fi
  local original_file=$1
  local fuzzed_file=$2

  act::log "Outputting to %s.\n" "${DIR_NAME}"

  act::log "Running backend on original file (%s)..." "${original_file}"
  local original_obs_file="${DIR_NAME}/original.obs.json"
  act::backend run -c -sim "${BACKEND}" "${original_file}" |
  act::backend parse -c -sim "${BACKEND}" -o "${original_obs_file}"
  act::log " done.\n"

  act::log "Running backend on fuzzed file (%s)..." "${fuzzed_file}"
  local fuzzed_obs_file="${DIR_NAME}/fuzzed.obs.json"
  act::backend run -c -sim "${BACKEND}" "${fuzzed_file}" |
  act::backend parse -c -sim "${BACKEND}" -o "${fuzzed_obs_file}"
  act::log " done.\n"
}

## Entry point ##

main "${@}"
