# Explainer tests

## gcc_elf_o0_stackchk.s

```
P0:  # <-- label (unused label, program boundary)
pushl %EBP # <-- stack (manipulates stack)
movl %ESP, %EBP # <-- move (manipulates stack)
subl $24, %ESP # <-- arithmetic (manipulates stack)
movl %GS:20, %EAX # <-- move
movl %EAX, -12(%EBP) # <-- move
xorl %EAX, %EAX # <-- ?? instruction ??
movl $2, -20(%EBP) # <-- move
movl -20(%EBP), %EAX # <-- move
movl %EAX, y # <-- move
mfence  # <-- memory fence
movl x, %EAX # <-- move
movl %EAX, -16(%EBP) # <-- move
movl -16(%EBP), %EAX # <-- move
movl %EAX, t0r0 # <-- move
movl -12(%EBP), %EAX # <-- move
xorl %GS:20, %EAX # <-- ?? instruction ??
je .L2 # <-- jump
call __stack_chk_fail # <-- calling convention
.L2:  # <-- label
leave  # <-- calling convention
ret  # <-- return to caller
P1:  # <-- label (unused label, program boundary)
pushl %EBP # <-- stack (manipulates stack)
movl %ESP, %EBP # <-- move (manipulates stack)
subl $24, %ESP # <-- arithmetic (manipulates stack)
movl %GS:20, %EAX # <-- move
movl %EAX, -12(%EBP) # <-- move
xorl %EAX, %EAX # <-- ?? instruction ??
movl $1, -20(%EBP) # <-- move
movl -20(%EBP), %EAX # <-- move
movl %EAX, x # <-- move
mfence  # <-- memory fence
movl $1, -16(%EBP) # <-- move
movl -16(%EBP), %EAX # <-- move
movl %EAX, y # <-- move
mfence  # <-- memory fence
movl -12(%EBP), %EAX # <-- move
xorl %GS:20, %EAX # <-- ?? instruction ??
je .L4 # <-- jump
call __stack_chk_fail # <-- calling convention
.L4:  # <-- label
leave  # <-- calling convention
ret  # <-- return to caller
```
## gcc_macho_o0_moves.s

```
_P0:  # <-- label (unused label, program boundary)
pushl %EBP # <-- stack (manipulates stack)
movl %ESP, %EBP # <-- move (manipulates stack)
subl $16, %ESP # <-- arithmetic (manipulates stack)
movl _y, %EAX # <-- move
movl %EAX, -4(%EBP) # <-- move
movl -4(%EBP), %EAX # <-- move
movl %EAX, _t0r0 # <-- move
movl _t0r0, %EAX # <-- move
cmpl $1, %EAX # <-- comparison
jne L3 # <-- jump
movl $1, _x # <-- move
L3:  # <-- label
leave  # <-- calling convention
ret  # <-- return to caller
_P1:  # <-- label (unused label, program boundary)
pushl %EBP # <-- stack (manipulates stack)
movl %ESP, %EBP # <-- move (manipulates stack)
subl $16, %ESP # <-- arithmetic (manipulates stack)
movl _x, %EAX # <-- move
movl %EAX, _t1r0 # <-- move
movl _t1r0, %EAX # <-- move
cmpl $1, %EAX # <-- comparison
jne L6 # <-- jump
movl $1, -4(%EBP) # <-- move
movl -4(%EBP), %EAX # <-- move
movl %EAX, _y # <-- move
mfence  # <-- memory fence
L6:  # <-- label
leave  # <-- calling convention
ret  # <-- return to caller
```

Ran 2 test(s).

# Litmusifier tests

## gcc_elf_o0_stackchk.s

```
X86 gcc_elf_o0_stackchk.s

{
    t0gGSd200 = 0;
    t0gGSd201 = 0;
    t0r0 = 0;
    t0sZM12 = 0;
    t0sZM16 = 0;
    t0sZM20 = 0;
    t1gGSd200 = 0;
    t1gGSd201 = 0;
    t1sZM12 = 0;
    t1sZM16 = 0;
    t1sZM20 = 0;
    x = 0;
    y = 0;
    
}

P0                    | P1                    ;
movl EAX, [t0gGSd200] | movl EAX, [t1gGSd200] ;
movl [t0sZM12], EAX   | movl [t1sZM12], EAX   ;
xorl EAX, EAX         | xorl EAX, EAX         ;
movl [t0sZM20], 2     | movl [t1sZM20], 1     ;
movl EAX, [t0sZM20]   | movl EAX, [t1sZM20]   ;
movl [y], EAX         | movl [x], EAX         ;
mfence                | mfence                ;
movl EAX, [x]         | movl [t1sZM16], 1     ;
movl [t0sZM16], EAX   | movl EAX, [t1sZM16]   ;
movl EAX, [t0sZM16]   | movl [y], EAX         ;
movl [t0r0], EAX      | mfence                ;
movl EAX, [t0sZM12]   | movl EAX, [t1sZM12]   ;
xorl EAX, [t0gGSd201] | xorl EAX, [t1gGSd201] ;


locations [t0gGSd200; t0gGSd201; t0r0; t0sZM12; t0sZM16; t0sZM20; t1gGSd200;
           t1gGSd201; t1sZM12; t1sZM16; t1sZM20; x; y]
```
## gcc_macho_o0_moves.s

```
X86 gcc_macho_o0_moves.s

{
    ZUt0r0 = 0;
    ZUt1r0 = 0;
    ZUx = 0;
    ZUy = 0;
    t0sZM4 = 0;
    t1sZM4 = 0;
    
}

P0                 | P1                 ;
movl EAX, [ZUy]    | movl EAX, [ZUx]    ;
movl [t0sZM4], EAX | movl [ZUt1r0], EAX ;
movl EAX, [t0sZM4] | movl EAX, [ZUt1r0] ;
movl [ZUt0r0], EAX | cmp EAX, 1         ;
movl EAX, [ZUt0r0] | jne L6             ;
cmp EAX, 1         | movl [t1sZM4], 1   ;
jne L3             | movl EAX, [t1sZM4] ;
movl [ZUx], 1      | movl [ZUy], EAX    ;
L3:                | mfence             ;
                   | L6:                ;


locations [ZUt0r0; ZUt1r0; ZUx; ZUy; t0sZM4; t1sZM4]
```

Ran 2 test(s).


