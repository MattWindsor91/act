# This is an example of ACT config file.
# It tells ACT which compilers and simulators to run, how to run them, and
# various other things.
#
# Any run of characters from a # to the end of the line is a comment.

# An ACT config file is made up of various brace-delimited blocks, containing
# either more blocks or directives.  Each directive spans one line.

# Here is a `machine` block.
#
# Each `machine IDENTIFIER` block tells act about a machine, giving it the
# dotted identifier IDENTIFIER.  Compilers and simulators run on machines, and
# so their configuration lies inside a `machine` block.
#
# Usually, there'll be at least one machine: the local computer.  In this
# example, we give this machine the name `this`.
machine this {
  # The `via` directive tells act how to reach this machine.
  # `via local` tells act the machine is the one on which act is running.
  via local

  # A `backend` block configures a backend on a machine.  Backends take
  # litmus tests, simulate (or execute, etc.) them, and return information
  # about the potential final states of the test.
  backend herd {
    # 'cmd' tells us where Herd is.
    cmd "herd7"

    # Each backend block requires a `style ID` directive; this tells ACT
    # how it should execute the backend, and how to interpret the backend's
    # results.
    style herd

    #Â The next few directives only make sense when `style` is `herd`, but they
    # are allowed (and silently ignored) in other cases.

    # `c_model` overrides Herd's choice of cat model when reading in C
    # litmus tests.
    # You can omit this if you intend to use the normal model.
    c_model "c11_lahav.cat"

    # Each 'asm_model' overrides Herd's choice of model when reading in
    # litmus tests for a particular architecture (given by a dotted identifier).
    # Again, you can omit these if you intend to use the normal models.
    asm_model x86.att   "x86_example.cat"
    asm_model x86.intel "x86_example.cat"
  }
}

# Suppose we want to run backends on a remote machine.
# We can do so by using 'via ssh'.  Here's an example:
machine example {
  # We can disable machines using `enabled off` (or `false`, or `no`).
  # You can also put `enabled on` (or `true`, or `yes`), but it's redundant.
  enabled off

  # Most of this is self-explanatory, except for `copy to`.
  # This tells act where, on the remote system, to copy work for
  # the remote compiler to run, and where to expect the remote
  # system to put its results.  It should be writable, but
  # there otherwise aren't any real requirements.
  via ssh {
    host "example.com"
    user "johndoe"  # optional, defaults to current local user
    copy to "/home/johndoe/actscratch"
  }

  # Some notes about act's SSH support:
  #
  # - act won't ask for a password or passphrase---it'll only work
  #   if you have some sort of non-interactive authentication
  #   mechanism (such as public-key with the key added to your
  #   current agent).
  #
  # - act doesn't clean up the copy_dir after use, nor will it make
  #   the copy_dir if it doesn't already exist.
  #
  # - act currently establishes three SSH connections per
  #   compilation: one for the compiler, and two to SCP the results
  #   across.  This may get optimised in future versions, but, until
  #   then, be warned that the process may be slow and
  #   traffic-intensive.
}
